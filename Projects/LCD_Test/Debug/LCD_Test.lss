
LCD_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002374  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002374  00002408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800068  00800068  00002410  2**0
                  ALLOC
  3 .stab         00001db8  00000000  00000000  00002410  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e92  00000000  00000000  000041c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000505a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000519a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000530a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006f53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000097a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ac 36       	cpi	r26, 0x6C	; 108
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 e7       	ldi	r30, 0x74	; 116
      78:	f3 e2       	ldi	r31, 0x23	; 35
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 38 10 	call	0x2070	; 0x2070 <main>
      8a:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GIE_voidEnable>:




void GIE_voidEnable(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG, SREG_I_BIT);
     b4e:	af e5       	ldi	r26, 0x5F	; 95
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG, SREG_I_BIT);
     b6a:	af e5       	ldi	r26, 0x5F	; 95
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ef e5       	ldi	r30, 0x5F	; 95
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	8c 93       	st	X, r24
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <EXTI_voidInterruptEnable>:


static void (*INT0FunPtr)(void) = NULL;

void EXTI_voidInterruptEnable(u8 Copy_u8InterruptNumber)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	00 d0       	rcall	.+0      	; 0xb84 <EXTI_voidInterruptEnable+0x6>
     b84:	0f 92       	push	r0
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8InterruptNumber)
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	28 2f       	mov	r18, r24
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	3b 83       	std	Y+3, r19	; 0x03
     b94:	2a 83       	std	Y+2, r18	; 0x02
     b96:	8a 81       	ldd	r24, Y+2	; 0x02
     b98:	9b 81       	ldd	r25, Y+3	; 0x03
     b9a:	81 30       	cpi	r24, 0x01	; 1
     b9c:	91 05       	cpc	r25, r1
     b9e:	89 f0       	breq	.+34     	; 0xbc2 <EXTI_voidInterruptEnable+0x44>
     ba0:	2a 81       	ldd	r18, Y+2	; 0x02
     ba2:	3b 81       	ldd	r19, Y+3	; 0x03
     ba4:	22 30       	cpi	r18, 0x02	; 2
     ba6:	31 05       	cpc	r19, r1
     ba8:	a1 f0       	breq	.+40     	; 0xbd2 <EXTI_voidInterruptEnable+0x54>
     baa:	8a 81       	ldd	r24, Y+2	; 0x02
     bac:	9b 81       	ldd	r25, Y+3	; 0x03
     bae:	00 97       	sbiw	r24, 0x00	; 0
     bb0:	b9 f4       	brne	.+46     	; 0xbe0 <EXTI_voidInterruptEnable+0x62>
    {
    case EXTI_INT0:
        SET_BIT(GICR, GICR_INT0);
     bb2:	ab e5       	ldi	r26, 0x5B	; 91
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	eb e5       	ldi	r30, 0x5B	; 91
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	80 64       	ori	r24, 0x40	; 64
     bbe:	8c 93       	st	X, r24
     bc0:	0f c0       	rjmp	.+30     	; 0xbe0 <EXTI_voidInterruptEnable+0x62>
        break;
    case EXTI_INT1:
        SET_BIT(GICR, GICR_INT1);
     bc2:	ab e5       	ldi	r26, 0x5B	; 91
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	eb e5       	ldi	r30, 0x5B	; 91
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	80 68       	ori	r24, 0x80	; 128
     bce:	8c 93       	st	X, r24
     bd0:	07 c0       	rjmp	.+14     	; 0xbe0 <EXTI_voidInterruptEnable+0x62>
        break;
    case EXTI_INT2:
        SET_BIT(GICR, GICR_INT2);
     bd2:	ab e5       	ldi	r26, 0x5B	; 91
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	eb e5       	ldi	r30, 0x5B	; 91
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	80 62       	ori	r24, 0x20	; 32
     bde:	8c 93       	st	X, r24
        break;
    
    default:
        break;
    }
}
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	cf 91       	pop	r28
     be8:	df 91       	pop	r29
     bea:	08 95       	ret

00000bec <EXTI_voidInterruptDisable>:
void EXTI_voidInterruptDisable(u8 Copy_u8InterruptNumber)
{
     bec:	df 93       	push	r29
     bee:	cf 93       	push	r28
     bf0:	00 d0       	rcall	.+0      	; 0xbf2 <EXTI_voidInterruptDisable+0x6>
     bf2:	0f 92       	push	r0
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8InterruptNumber)
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	28 2f       	mov	r18, r24
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	3b 83       	std	Y+3, r19	; 0x03
     c02:	2a 83       	std	Y+2, r18	; 0x02
     c04:	8a 81       	ldd	r24, Y+2	; 0x02
     c06:	9b 81       	ldd	r25, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	91 05       	cpc	r25, r1
     c0c:	89 f0       	breq	.+34     	; 0xc30 <EXTI_voidInterruptDisable+0x44>
     c0e:	2a 81       	ldd	r18, Y+2	; 0x02
     c10:	3b 81       	ldd	r19, Y+3	; 0x03
     c12:	22 30       	cpi	r18, 0x02	; 2
     c14:	31 05       	cpc	r19, r1
     c16:	a1 f0       	breq	.+40     	; 0xc40 <EXTI_voidInterruptDisable+0x54>
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	9b 81       	ldd	r25, Y+3	; 0x03
     c1c:	00 97       	sbiw	r24, 0x00	; 0
     c1e:	b9 f4       	brne	.+46     	; 0xc4e <EXTI_voidInterruptDisable+0x62>
    {
    case EXTI_INT0:
        CLR_BIT(GICR, GICR_INT0);
     c20:	ab e5       	ldi	r26, 0x5B	; 91
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	eb e5       	ldi	r30, 0x5B	; 91
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	8f 7b       	andi	r24, 0xBF	; 191
     c2c:	8c 93       	st	X, r24
     c2e:	0f c0       	rjmp	.+30     	; 0xc4e <EXTI_voidInterruptDisable+0x62>
        break;
    case EXTI_INT1:
        CLR_BIT(GICR, GICR_INT1);
     c30:	ab e5       	ldi	r26, 0x5B	; 91
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	eb e5       	ldi	r30, 0x5B	; 91
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	8f 77       	andi	r24, 0x7F	; 127
     c3c:	8c 93       	st	X, r24
     c3e:	07 c0       	rjmp	.+14     	; 0xc4e <EXTI_voidInterruptDisable+0x62>
        break;
    case EXTI_INT2:
        CLR_BIT(GICR, GICR_INT2);
     c40:	ab e5       	ldi	r26, 0x5B	; 91
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	eb e5       	ldi	r30, 0x5B	; 91
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	8f 7d       	andi	r24, 0xDF	; 223
     c4c:	8c 93       	st	X, r24
        break;
    
    default:
        break;
    }
}
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	cf 91       	pop	r28
     c56:	df 91       	pop	r29
     c58:	08 95       	ret

00000c5a <EXTI_voidSetTriggerEdge>:

void EXTI_voidSetTriggerEdge(u8 Copy_u8InterruptNumber, u8 Copy_u8Edge)
{
     c5a:	df 93       	push	r29
     c5c:	cf 93       	push	r28
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	2a 97       	sbiw	r28, 0x0a	; 10
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	de bf       	out	0x3e, r29	; 62
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	cd bf       	out	0x3d, r28	; 61
     c6e:	89 83       	std	Y+1, r24	; 0x01
     c70:	6a 83       	std	Y+2, r22	; 0x02
        switch (Copy_u8InterruptNumber)
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	3a 87       	std	Y+10, r19	; 0x0a
     c7a:	29 87       	std	Y+9, r18	; 0x09
     c7c:	89 85       	ldd	r24, Y+9	; 0x09
     c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c80:	81 30       	cpi	r24, 0x01	; 1
     c82:	91 05       	cpc	r25, r1
     c84:	09 f4       	brne	.+2      	; 0xc88 <EXTI_voidSetTriggerEdge+0x2e>
     c86:	66 c0       	rjmp	.+204    	; 0xd54 <EXTI_voidSetTriggerEdge+0xfa>
     c88:	29 85       	ldd	r18, Y+9	; 0x09
     c8a:	3a 85       	ldd	r19, Y+10	; 0x0a
     c8c:	22 30       	cpi	r18, 0x02	; 2
     c8e:	31 05       	cpc	r19, r1
     c90:	09 f4       	brne	.+2      	; 0xc94 <EXTI_voidSetTriggerEdge+0x3a>
     c92:	bb c0       	rjmp	.+374    	; 0xe0a <EXTI_voidSetTriggerEdge+0x1b0>
     c94:	89 85       	ldd	r24, Y+9	; 0x09
     c96:	9a 85       	ldd	r25, Y+10	; 0x0a
     c98:	00 97       	sbiw	r24, 0x00	; 0
     c9a:	09 f0       	breq	.+2      	; 0xc9e <EXTI_voidSetTriggerEdge+0x44>
     c9c:	d5 c0       	rjmp	.+426    	; 0xe48 <EXTI_voidSetTriggerEdge+0x1ee>
    {
    case EXTI_INT0:
        switch (Copy_u8Edge)
     c9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ca0:	28 2f       	mov	r18, r24
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	38 87       	std	Y+8, r19	; 0x08
     ca6:	2f 83       	std	Y+7, r18	; 0x07
     ca8:	8f 81       	ldd	r24, Y+7	; 0x07
     caa:	98 85       	ldd	r25, Y+8	; 0x08
     cac:	81 30       	cpi	r24, 0x01	; 1
     cae:	91 05       	cpc	r25, r1
     cb0:	21 f1       	breq	.+72     	; 0xcfa <EXTI_voidSetTriggerEdge+0xa0>
     cb2:	2f 81       	ldd	r18, Y+7	; 0x07
     cb4:	38 85       	ldd	r19, Y+8	; 0x08
     cb6:	22 30       	cpi	r18, 0x02	; 2
     cb8:	31 05       	cpc	r19, r1
     cba:	2c f4       	brge	.+10     	; 0xcc6 <EXTI_voidSetTriggerEdge+0x6c>
     cbc:	8f 81       	ldd	r24, Y+7	; 0x07
     cbe:	98 85       	ldd	r25, Y+8	; 0x08
     cc0:	00 97       	sbiw	r24, 0x00	; 0
     cc2:	61 f0       	breq	.+24     	; 0xcdc <EXTI_voidSetTriggerEdge+0x82>
     cc4:	c1 c0       	rjmp	.+386    	; 0xe48 <EXTI_voidSetTriggerEdge+0x1ee>
     cc6:	2f 81       	ldd	r18, Y+7	; 0x07
     cc8:	38 85       	ldd	r19, Y+8	; 0x08
     cca:	22 30       	cpi	r18, 0x02	; 2
     ccc:	31 05       	cpc	r19, r1
     cce:	21 f1       	breq	.+72     	; 0xd18 <EXTI_voidSetTriggerEdge+0xbe>
     cd0:	8f 81       	ldd	r24, Y+7	; 0x07
     cd2:	98 85       	ldd	r25, Y+8	; 0x08
     cd4:	83 30       	cpi	r24, 0x03	; 3
     cd6:	91 05       	cpc	r25, r1
     cd8:	71 f1       	breq	.+92     	; 0xd36 <EXTI_voidSetTriggerEdge+0xdc>
     cda:	b6 c0       	rjmp	.+364    	; 0xe48 <EXTI_voidSetTriggerEdge+0x1ee>
        {
            case EXTI_LOW_LEVEL:
                CLR_BIT(MCUCR, MCUCR_ISC00);
     cdc:	a5 e5       	ldi	r26, 0x55	; 85
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e5 e5       	ldi	r30, 0x55	; 85
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	8e 7f       	andi	r24, 0xFE	; 254
     ce8:	8c 93       	st	X, r24
                CLR_BIT(MCUCR, MCUCR_ISC01);
     cea:	a5 e5       	ldi	r26, 0x55	; 85
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e5 e5       	ldi	r30, 0x55	; 85
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	8d 7f       	andi	r24, 0xFD	; 253
     cf6:	8c 93       	st	X, r24
     cf8:	a7 c0       	rjmp	.+334    	; 0xe48 <EXTI_voidSetTriggerEdge+0x1ee>
                break;
            case EXTI_ANY_CHANGE:
                SET_BIT(MCUCR, MCUCR_ISC00);
     cfa:	a5 e5       	ldi	r26, 0x55	; 85
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e5 e5       	ldi	r30, 0x55	; 85
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	81 60       	ori	r24, 0x01	; 1
     d06:	8c 93       	st	X, r24
                CLR_BIT(MCUCR, MCUCR_ISC01);
     d08:	a5 e5       	ldi	r26, 0x55	; 85
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e5 e5       	ldi	r30, 0x55	; 85
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	8d 7f       	andi	r24, 0xFD	; 253
     d14:	8c 93       	st	X, r24
     d16:	98 c0       	rjmp	.+304    	; 0xe48 <EXTI_voidSetTriggerEdge+0x1ee>
                break;
            case EXTI_FALLING_EDGE:
                CLR_BIT(MCUCR, MCUCR_ISC00);
     d18:	a5 e5       	ldi	r26, 0x55	; 85
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e5 e5       	ldi	r30, 0x55	; 85
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	8e 7f       	andi	r24, 0xFE	; 254
     d24:	8c 93       	st	X, r24
                SET_BIT(MCUCR, MCUCR_ISC01);
     d26:	a5 e5       	ldi	r26, 0x55	; 85
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e5 e5       	ldi	r30, 0x55	; 85
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	82 60       	ori	r24, 0x02	; 2
     d32:	8c 93       	st	X, r24
     d34:	89 c0       	rjmp	.+274    	; 0xe48 <EXTI_voidSetTriggerEdge+0x1ee>
                break;
            case EXTI_RISING_EDGE:
                SET_BIT(MCUCR, MCUCR_ISC00);
     d36:	a5 e5       	ldi	r26, 0x55	; 85
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e5 e5       	ldi	r30, 0x55	; 85
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	81 60       	ori	r24, 0x01	; 1
     d42:	8c 93       	st	X, r24
                SET_BIT(MCUCR, MCUCR_ISC01);
     d44:	a5 e5       	ldi	r26, 0x55	; 85
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e5 e5       	ldi	r30, 0x55	; 85
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	82 60       	ori	r24, 0x02	; 2
     d50:	8c 93       	st	X, r24
     d52:	7a c0       	rjmp	.+244    	; 0xe48 <EXTI_voidSetTriggerEdge+0x1ee>
        default:
            break;
        }
        break;
    case EXTI_INT1:
        switch (Copy_u8Edge)
     d54:	8a 81       	ldd	r24, Y+2	; 0x02
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	3e 83       	std	Y+6, r19	; 0x06
     d5c:	2d 83       	std	Y+5, r18	; 0x05
     d5e:	8d 81       	ldd	r24, Y+5	; 0x05
     d60:	9e 81       	ldd	r25, Y+6	; 0x06
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	91 05       	cpc	r25, r1
     d66:	21 f1       	breq	.+72     	; 0xdb0 <EXTI_voidSetTriggerEdge+0x156>
     d68:	2d 81       	ldd	r18, Y+5	; 0x05
     d6a:	3e 81       	ldd	r19, Y+6	; 0x06
     d6c:	22 30       	cpi	r18, 0x02	; 2
     d6e:	31 05       	cpc	r19, r1
     d70:	2c f4       	brge	.+10     	; 0xd7c <EXTI_voidSetTriggerEdge+0x122>
     d72:	8d 81       	ldd	r24, Y+5	; 0x05
     d74:	9e 81       	ldd	r25, Y+6	; 0x06
     d76:	00 97       	sbiw	r24, 0x00	; 0
     d78:	61 f0       	breq	.+24     	; 0xd92 <EXTI_voidSetTriggerEdge+0x138>
     d7a:	66 c0       	rjmp	.+204    	; 0xe48 <EXTI_voidSetTriggerEdge+0x1ee>
     d7c:	2d 81       	ldd	r18, Y+5	; 0x05
     d7e:	3e 81       	ldd	r19, Y+6	; 0x06
     d80:	22 30       	cpi	r18, 0x02	; 2
     d82:	31 05       	cpc	r19, r1
     d84:	21 f1       	breq	.+72     	; 0xdce <EXTI_voidSetTriggerEdge+0x174>
     d86:	8d 81       	ldd	r24, Y+5	; 0x05
     d88:	9e 81       	ldd	r25, Y+6	; 0x06
     d8a:	83 30       	cpi	r24, 0x03	; 3
     d8c:	91 05       	cpc	r25, r1
     d8e:	71 f1       	breq	.+92     	; 0xdec <EXTI_voidSetTriggerEdge+0x192>
     d90:	5b c0       	rjmp	.+182    	; 0xe48 <EXTI_voidSetTriggerEdge+0x1ee>
        {
        case EXTI_LOW_LEVEL:
            CLR_BIT(MCUCR, MCUCR_ISC10);
     d92:	a5 e5       	ldi	r26, 0x55	; 85
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e5 e5       	ldi	r30, 0x55	; 85
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	8b 7f       	andi	r24, 0xFB	; 251
     d9e:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, MCUCR_ISC11);
     da0:	a5 e5       	ldi	r26, 0x55	; 85
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e5 e5       	ldi	r30, 0x55	; 85
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	87 7f       	andi	r24, 0xF7	; 247
     dac:	8c 93       	st	X, r24
     dae:	4c c0       	rjmp	.+152    	; 0xe48 <EXTI_voidSetTriggerEdge+0x1ee>
            break;
        case EXTI_ANY_CHANGE:
            SET_BIT(MCUCR, MCUCR_ISC10);
     db0:	a5 e5       	ldi	r26, 0x55	; 85
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e5 e5       	ldi	r30, 0x55	; 85
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	84 60       	ori	r24, 0x04	; 4
     dbc:	8c 93       	st	X, r24
            CLR_BIT(MCUCR, MCUCR_ISC11);
     dbe:	a5 e5       	ldi	r26, 0x55	; 85
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e5 e5       	ldi	r30, 0x55	; 85
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	87 7f       	andi	r24, 0xF7	; 247
     dca:	8c 93       	st	X, r24
     dcc:	3d c0       	rjmp	.+122    	; 0xe48 <EXTI_voidSetTriggerEdge+0x1ee>
            break;
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCR, MCUCR_ISC10);
     dce:	a5 e5       	ldi	r26, 0x55	; 85
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e5 e5       	ldi	r30, 0x55	; 85
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	8b 7f       	andi	r24, 0xFB	; 251
     dda:	8c 93       	st	X, r24
            SET_BIT(MCUCR, MCUCR_ISC11);
     ddc:	a5 e5       	ldi	r26, 0x55	; 85
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	e5 e5       	ldi	r30, 0x55	; 85
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	88 60       	ori	r24, 0x08	; 8
     de8:	8c 93       	st	X, r24
     dea:	2e c0       	rjmp	.+92     	; 0xe48 <EXTI_voidSetTriggerEdge+0x1ee>
            break;
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCR, MCUCR_ISC10);
     dec:	a5 e5       	ldi	r26, 0x55	; 85
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e5 e5       	ldi	r30, 0x55	; 85
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	84 60       	ori	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
            SET_BIT(MCUCR, MCUCR_ISC11);
     dfa:	a5 e5       	ldi	r26, 0x55	; 85
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e5 e5       	ldi	r30, 0x55	; 85
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	88 60       	ori	r24, 0x08	; 8
     e06:	8c 93       	st	X, r24
     e08:	1f c0       	rjmp	.+62     	; 0xe48 <EXTI_voidSetTriggerEdge+0x1ee>
        default:
            break;
        }
        break;
    case EXTI_INT2:
        switch (Copy_u8Edge)
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	3c 83       	std	Y+4, r19	; 0x04
     e12:	2b 83       	std	Y+3, r18	; 0x03
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	9c 81       	ldd	r25, Y+4	; 0x04
     e18:	82 30       	cpi	r24, 0x02	; 2
     e1a:	91 05       	cpc	r25, r1
     e1c:	31 f0       	breq	.+12     	; 0xe2a <EXTI_voidSetTriggerEdge+0x1d0>
     e1e:	2b 81       	ldd	r18, Y+3	; 0x03
     e20:	3c 81       	ldd	r19, Y+4	; 0x04
     e22:	23 30       	cpi	r18, 0x03	; 3
     e24:	31 05       	cpc	r19, r1
     e26:	49 f0       	breq	.+18     	; 0xe3a <EXTI_voidSetTriggerEdge+0x1e0>
     e28:	0f c0       	rjmp	.+30     	; 0xe48 <EXTI_voidSetTriggerEdge+0x1ee>
        {
        case EXTI_FALLING_EDGE:
            CLR_BIT(MCUCSR, MCUCSR_ISC2);
     e2a:	a4 e5       	ldi	r26, 0x54	; 84
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e4 e5       	ldi	r30, 0x54	; 84
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	8f 7b       	andi	r24, 0xBF	; 191
     e36:	8c 93       	st	X, r24
     e38:	07 c0       	rjmp	.+14     	; 0xe48 <EXTI_voidSetTriggerEdge+0x1ee>
            break;
        case EXTI_RISING_EDGE:
            SET_BIT(MCUCSR, MCUCSR_ISC2);
     e3a:	a4 e5       	ldi	r26, 0x54	; 84
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e4 e5       	ldi	r30, 0x54	; 84
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	80 64       	ori	r24, 0x40	; 64
     e46:	8c 93       	st	X, r24
        break;

    default:
        break;
    }
}
     e48:	2a 96       	adiw	r28, 0x0a	; 10
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	de bf       	out	0x3e, r29	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <EXTI_u8ReadInterruptFlag>:


u8   EXTI_u8ReadInterruptFlag(u8 Copy_u8InterruptNumber)
{
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	00 d0       	rcall	.+0      	; 0xe60 <EXTI_u8ReadInterruptFlag+0x6>
     e60:	00 d0       	rcall	.+0      	; 0xe62 <EXTI_u8ReadInterruptFlag+0x8>
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8FlagStatus;

    switch (Copy_u8InterruptNumber)
     e68:	8a 81       	ldd	r24, Y+2	; 0x02
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	3c 83       	std	Y+4, r19	; 0x04
     e70:	2b 83       	std	Y+3, r18	; 0x03
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	9c 81       	ldd	r25, Y+4	; 0x04
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	91 05       	cpc	r25, r1
     e7a:	99 f0       	breq	.+38     	; 0xea2 <EXTI_u8ReadInterruptFlag+0x48>
     e7c:	2b 81       	ldd	r18, Y+3	; 0x03
     e7e:	3c 81       	ldd	r19, Y+4	; 0x04
     e80:	22 30       	cpi	r18, 0x02	; 2
     e82:	31 05       	cpc	r19, r1
     e84:	b1 f0       	breq	.+44     	; 0xeb2 <EXTI_u8ReadInterruptFlag+0x58>
     e86:	8b 81       	ldd	r24, Y+3	; 0x03
     e88:	9c 81       	ldd	r25, Y+4	; 0x04
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	d1 f4       	brne	.+52     	; 0xec2 <EXTI_u8ReadInterruptFlag+0x68>
    {
    case EXTI_INT0:
        Local_u8FlagStatus = GET_BIT(GIFR, GIFR_INTF0);
     e8e:	ea e5       	ldi	r30, 0x5A	; 90
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	82 95       	swap	r24
     e96:	86 95       	lsr	r24
     e98:	86 95       	lsr	r24
     e9a:	83 70       	andi	r24, 0x03	; 3
     e9c:	81 70       	andi	r24, 0x01	; 1
     e9e:	89 83       	std	Y+1, r24	; 0x01
     ea0:	10 c0       	rjmp	.+32     	; 0xec2 <EXTI_u8ReadInterruptFlag+0x68>
        break;
    case EXTI_INT1:
        Local_u8FlagStatus = GET_BIT(GIFR, GIFR_INTF1);
     ea2:	ea e5       	ldi	r30, 0x5A	; 90
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	88 1f       	adc	r24, r24
     eaa:	88 27       	eor	r24, r24
     eac:	88 1f       	adc	r24, r24
     eae:	89 83       	std	Y+1, r24	; 0x01
     eb0:	08 c0       	rjmp	.+16     	; 0xec2 <EXTI_u8ReadInterruptFlag+0x68>
        break;
    case EXTI_INT2:
        Local_u8FlagStatus = GET_BIT(GIFR, GIFR_INTF2);
     eb2:	ea e5       	ldi	r30, 0x5A	; 90
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	82 95       	swap	r24
     eba:	86 95       	lsr	r24
     ebc:	87 70       	andi	r24, 0x07	; 7
     ebe:	81 70       	andi	r24, 0x01	; 1
     ec0:	89 83       	std	Y+1, r24	; 0x01
    
    default:
        break;
    }

    return Local_u8FlagStatus;
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <EXTI_voidClearInterruptFlag>:

void EXTI_voidClearInterruptFlag(u8 Copy_u8InterruptNumber)
{
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	00 d0       	rcall	.+0      	; 0xed8 <EXTI_voidClearInterruptFlag+0x6>
     ed8:	0f 92       	push	r0
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8InterruptNumber)
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	3b 83       	std	Y+3, r19	; 0x03
     ee8:	2a 83       	std	Y+2, r18	; 0x02
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	9b 81       	ldd	r25, Y+3	; 0x03
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	91 05       	cpc	r25, r1
     ef2:	89 f0       	breq	.+34     	; 0xf16 <EXTI_voidClearInterruptFlag+0x44>
     ef4:	2a 81       	ldd	r18, Y+2	; 0x02
     ef6:	3b 81       	ldd	r19, Y+3	; 0x03
     ef8:	22 30       	cpi	r18, 0x02	; 2
     efa:	31 05       	cpc	r19, r1
     efc:	a1 f0       	breq	.+40     	; 0xf26 <EXTI_voidClearInterruptFlag+0x54>
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	9b 81       	ldd	r25, Y+3	; 0x03
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	b9 f4       	brne	.+46     	; 0xf34 <EXTI_voidClearInterruptFlag+0x62>
    {
        case EXTI_INT0:
            SET_BIT(GIFR, GIFR_INTF0);
     f06:	aa e5       	ldi	r26, 0x5A	; 90
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	ea e5       	ldi	r30, 0x5A	; 90
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	80 64       	ori	r24, 0x40	; 64
     f12:	8c 93       	st	X, r24
     f14:	0f c0       	rjmp	.+30     	; 0xf34 <EXTI_voidClearInterruptFlag+0x62>
            break;
        case EXTI_INT1:
            SET_BIT(GIFR, GIFR_INTF1);
     f16:	aa e5       	ldi	r26, 0x5A	; 90
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	ea e5       	ldi	r30, 0x5A	; 90
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	80 68       	ori	r24, 0x80	; 128
     f22:	8c 93       	st	X, r24
     f24:	07 c0       	rjmp	.+14     	; 0xf34 <EXTI_voidClearInterruptFlag+0x62>
            break;
        case EXTI_INT2:
            SET_BIT(GIFR, GIFR_INTF2);
     f26:	aa e5       	ldi	r26, 0x5A	; 90
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	ea e5       	ldi	r30, 0x5A	; 90
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	80 62       	ori	r24, 0x20	; 32
     f32:	8c 93       	st	X, r24
            break;

        default:
            break;
    }
}
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <EXTI_voidSetCallBack>:

void EXTI_voidSetCallBack(u8 Copy_u8InterruptNumber, void (*Notification)(void))
{
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	00 d0       	rcall	.+0      	; 0xf46 <EXTI_voidSetCallBack+0x6>
     f46:	0f 92       	push	r0
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	89 83       	std	Y+1, r24	; 0x01
     f4e:	7b 83       	std	Y+3, r23	; 0x03
     f50:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_u8InterruptNumber)
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	88 2f       	mov	r24, r24
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	00 97       	sbiw	r24, 0x00	; 0
     f5a:	31 f4       	brne	.+12     	; 0xf68 <EXTI_voidSetCallBack+0x28>
    {
        case EXTI_INT0:
            INT0FunPtr = Notification;
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	9b 81       	ldd	r25, Y+3	; 0x03
     f60:	90 93 69 00 	sts	0x0069, r25
     f64:	80 93 68 00 	sts	0x0068, r24
            break;

        default:
            break;
    }
}
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <__vector_1>:

//ISR EXTI INT0
ISR(INT0_vect)
{
     f74:	1f 92       	push	r1
     f76:	0f 92       	push	r0
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	0f 92       	push	r0
     f7c:	11 24       	eor	r1, r1
     f7e:	2f 93       	push	r18
     f80:	3f 93       	push	r19
     f82:	4f 93       	push	r20
     f84:	5f 93       	push	r21
     f86:	6f 93       	push	r22
     f88:	7f 93       	push	r23
     f8a:	8f 93       	push	r24
     f8c:	9f 93       	push	r25
     f8e:	af 93       	push	r26
     f90:	bf 93       	push	r27
     f92:	ef 93       	push	r30
     f94:	ff 93       	push	r31
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
	//ICU
	//Disable GIE
	
    //CallBackFunction
    if(INT0FunPtr != NULL)
     f9e:	80 91 68 00 	lds	r24, 0x0068
     fa2:	90 91 69 00 	lds	r25, 0x0069
     fa6:	00 97       	sbiw	r24, 0x00	; 0
     fa8:	29 f0       	breq	.+10     	; 0xfb4 <__vector_1+0x40>
    {
        INT0FunPtr();
     faa:	e0 91 68 00 	lds	r30, 0x0068
     fae:	f0 91 69 00 	lds	r31, 0x0069
     fb2:	09 95       	icall
    }
    
	//Enable GIE
}
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	ff 91       	pop	r31
     fba:	ef 91       	pop	r30
     fbc:	bf 91       	pop	r27
     fbe:	af 91       	pop	r26
     fc0:	9f 91       	pop	r25
     fc2:	8f 91       	pop	r24
     fc4:	7f 91       	pop	r23
     fc6:	6f 91       	pop	r22
     fc8:	5f 91       	pop	r21
     fca:	4f 91       	pop	r20
     fcc:	3f 91       	pop	r19
     fce:	2f 91       	pop	r18
     fd0:	0f 90       	pop	r0
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	0f 90       	pop	r0
     fd6:	1f 90       	pop	r1
     fd8:	18 95       	reti

00000fda <DIO_SetPortDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void    DIO_SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <DIO_SetPortDirection+0x6>
     fe0:	00 d0       	rcall	.+0      	; 0xfe2 <DIO_SetPortDirection+0x8>
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	89 83       	std	Y+1, r24	; 0x01
     fe8:	6a 83       	std	Y+2, r22	; 0x02
	 switch (Copy_u8Port)
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	3c 83       	std	Y+4, r19	; 0x04
     ff2:	2b 83       	std	Y+3, r18	; 0x03
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	9c 81       	ldd	r25, Y+4	; 0x04
     ff8:	81 30       	cpi	r24, 0x01	; 1
     ffa:	91 05       	cpc	r25, r1
     ffc:	d1 f0       	breq	.+52     	; 0x1032 <DIO_SetPortDirection+0x58>
     ffe:	2b 81       	ldd	r18, Y+3	; 0x03
    1000:	3c 81       	ldd	r19, Y+4	; 0x04
    1002:	22 30       	cpi	r18, 0x02	; 2
    1004:	31 05       	cpc	r19, r1
    1006:	2c f4       	brge	.+10     	; 0x1012 <DIO_SetPortDirection+0x38>
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	9c 81       	ldd	r25, Y+4	; 0x04
    100c:	00 97       	sbiw	r24, 0x00	; 0
    100e:	61 f0       	breq	.+24     	; 0x1028 <DIO_SetPortDirection+0x4e>
    1010:	1e c0       	rjmp	.+60     	; 0x104e <DIO_SetPortDirection+0x74>
    1012:	2b 81       	ldd	r18, Y+3	; 0x03
    1014:	3c 81       	ldd	r19, Y+4	; 0x04
    1016:	22 30       	cpi	r18, 0x02	; 2
    1018:	31 05       	cpc	r19, r1
    101a:	81 f0       	breq	.+32     	; 0x103c <DIO_SetPortDirection+0x62>
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	9c 81       	ldd	r25, Y+4	; 0x04
    1020:	83 30       	cpi	r24, 0x03	; 3
    1022:	91 05       	cpc	r25, r1
    1024:	81 f0       	breq	.+32     	; 0x1046 <DIO_SetPortDirection+0x6c>
    1026:	13 c0       	rjmp	.+38     	; 0x104e <DIO_SetPortDirection+0x74>
	  {
		case DIO_PORTA : DDRA = Copy_u8Direction; break;
    1028:	ea e3       	ldi	r30, 0x3A	; 58
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	80 83       	st	Z, r24
    1030:	0e c0       	rjmp	.+28     	; 0x104e <DIO_SetPortDirection+0x74>
		case DIO_PORTB : DDRB = Copy_u8Direction; break;
    1032:	e7 e3       	ldi	r30, 0x37	; 55
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	80 83       	st	Z, r24
    103a:	09 c0       	rjmp	.+18     	; 0x104e <DIO_SetPortDirection+0x74>
		case DIO_PORTC : DDRC = Copy_u8Direction; break;
    103c:	e4 e3       	ldi	r30, 0x34	; 52
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	80 83       	st	Z, r24
    1044:	04 c0       	rjmp	.+8      	; 0x104e <DIO_SetPortDirection+0x74>
		case DIO_PORTD : DDRD = Copy_u8Direction; break;
    1046:	e1 e3       	ldi	r30, 0x31	; 49
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	80 83       	st	Z, r24
	  }
}
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <DIO_voidSetPinDirection>:

void    DIO_voidSetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	2d 97       	sbiw	r28, 0x0d	; 13
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	89 83       	std	Y+1, r24	; 0x01
    1072:	6a 83       	std	Y+2, r22	; 0x02
    1074:	4b 83       	std	Y+3, r20	; 0x03
    switch (Copy_u8Port)
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	3d 87       	std	Y+13, r19	; 0x0d
    107e:	2c 87       	std	Y+12, r18	; 0x0c
    1080:	8c 85       	ldd	r24, Y+12	; 0x0c
    1082:	9d 85       	ldd	r25, Y+13	; 0x0d
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	91 05       	cpc	r25, r1
    1088:	09 f4       	brne	.+2      	; 0x108c <DIO_voidSetPinDirection+0x30>
    108a:	7b c0       	rjmp	.+246    	; 0x1182 <DIO_voidSetPinDirection+0x126>
    108c:	2c 85       	ldd	r18, Y+12	; 0x0c
    108e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1090:	22 30       	cpi	r18, 0x02	; 2
    1092:	31 05       	cpc	r19, r1
    1094:	2c f4       	brge	.+10     	; 0x10a0 <DIO_voidSetPinDirection+0x44>
    1096:	8c 85       	ldd	r24, Y+12	; 0x0c
    1098:	9d 85       	ldd	r25, Y+13	; 0x0d
    109a:	00 97       	sbiw	r24, 0x00	; 0
    109c:	71 f0       	breq	.+28     	; 0x10ba <DIO_voidSetPinDirection+0x5e>
    109e:	9c c1       	rjmp	.+824    	; 0x13d8 <DIO_voidSetPinDirection+0x37c>
    10a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    10a2:	3d 85       	ldd	r19, Y+13	; 0x0d
    10a4:	22 30       	cpi	r18, 0x02	; 2
    10a6:	31 05       	cpc	r19, r1
    10a8:	09 f4       	brne	.+2      	; 0x10ac <DIO_voidSetPinDirection+0x50>
    10aa:	cf c0       	rjmp	.+414    	; 0x124a <DIO_voidSetPinDirection+0x1ee>
    10ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    10ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    10b0:	83 30       	cpi	r24, 0x03	; 3
    10b2:	91 05       	cpc	r25, r1
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <DIO_voidSetPinDirection+0x5c>
    10b6:	2d c1       	rjmp	.+602    	; 0x1312 <DIO_voidSetPinDirection+0x2b6>
    10b8:	8f c1       	rjmp	.+798    	; 0x13d8 <DIO_voidSetPinDirection+0x37c>
    {
    case DIO_PORTA:
        switch (Copy_u8Direction)
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	3b 87       	std	Y+11, r19	; 0x0b
    10c2:	2a 87       	std	Y+10, r18	; 0x0a
    10c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    10c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    10c8:	81 30       	cpi	r24, 0x01	; 1
    10ca:	91 05       	cpc	r25, r1
    10cc:	f9 f0       	breq	.+62     	; 0x110c <DIO_voidSetPinDirection+0xb0>
    10ce:	2a 85       	ldd	r18, Y+10	; 0x0a
    10d0:	3b 85       	ldd	r19, Y+11	; 0x0b
    10d2:	22 30       	cpi	r18, 0x02	; 2
    10d4:	31 05       	cpc	r19, r1
    10d6:	71 f1       	breq	.+92     	; 0x1134 <DIO_voidSetPinDirection+0xd8>
    10d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    10da:	9b 85       	ldd	r25, Y+11	; 0x0b
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	09 f0       	breq	.+2      	; 0x10e2 <DIO_voidSetPinDirection+0x86>
    10e0:	7b c1       	rjmp	.+758    	; 0x13d8 <DIO_voidSetPinDirection+0x37c>
        {
        case DIO_INPUT:
            CLR_BIT(DDRA, Copy_u8Pin);
    10e2:	aa e3       	ldi	r26, 0x3A	; 58
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	ea e3       	ldi	r30, 0x3A	; 58
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <DIO_voidSetPinDirection+0xa4>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <DIO_voidSetPinDirection+0xa0>
    1104:	80 95       	com	r24
    1106:	84 23       	and	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	66 c1       	rjmp	.+716    	; 0x13d8 <DIO_voidSetPinDirection+0x37c>
            break;
        case DIO_OUTPUT:
            SET_BIT(DDRA, Copy_u8Pin);
    110c:	aa e3       	ldi	r26, 0x3A	; 58
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	ea e3       	ldi	r30, 0x3A	; 58
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_voidSetPinDirection+0xce>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_voidSetPinDirection+0xca>
    112e:	84 2b       	or	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	52 c1       	rjmp	.+676    	; 0x13d8 <DIO_voidSetPinDirection+0x37c>
            break;
        case DIO_IN_PULLUP:
            CLR_BIT(DDRA, Copy_u8Pin);
    1134:	aa e3       	ldi	r26, 0x3A	; 58
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	ea e3       	ldi	r30, 0x3A	; 58
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <DIO_voidSetPinDirection+0xf4>
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	2a 95       	dec	r18
    1152:	e2 f7       	brpl	.-8      	; 0x114c <DIO_voidSetPinDirection+0xf0>
    1154:	80 95       	com	r24
    1156:	84 23       	and	r24, r20
    1158:	8c 93       	st	X, r24
            SET_BIT(PORTA, Copy_u8Pin);
    115a:	ab e3       	ldi	r26, 0x3B	; 59
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	eb e3       	ldi	r30, 0x3B	; 59
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	48 2f       	mov	r20, r24
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	02 2e       	mov	r0, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <DIO_voidSetPinDirection+0x11c>
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	0a 94       	dec	r0
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <DIO_voidSetPinDirection+0x118>
    117c:	84 2b       	or	r24, r20
    117e:	8c 93       	st	X, r24
    1180:	2b c1       	rjmp	.+598    	; 0x13d8 <DIO_voidSetPinDirection+0x37c>
        default:
                break;
        }
        break;
    case DIO_PORTB:
        switch (Copy_u8Direction)
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	39 87       	std	Y+9, r19	; 0x09
    118a:	28 87       	std	Y+8, r18	; 0x08
    118c:	88 85       	ldd	r24, Y+8	; 0x08
    118e:	99 85       	ldd	r25, Y+9	; 0x09
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	91 05       	cpc	r25, r1
    1194:	f9 f0       	breq	.+62     	; 0x11d4 <DIO_voidSetPinDirection+0x178>
    1196:	28 85       	ldd	r18, Y+8	; 0x08
    1198:	39 85       	ldd	r19, Y+9	; 0x09
    119a:	22 30       	cpi	r18, 0x02	; 2
    119c:	31 05       	cpc	r19, r1
    119e:	71 f1       	breq	.+92     	; 0x11fc <DIO_voidSetPinDirection+0x1a0>
    11a0:	88 85       	ldd	r24, Y+8	; 0x08
    11a2:	99 85       	ldd	r25, Y+9	; 0x09
    11a4:	00 97       	sbiw	r24, 0x00	; 0
    11a6:	09 f0       	breq	.+2      	; 0x11aa <DIO_voidSetPinDirection+0x14e>
    11a8:	17 c1       	rjmp	.+558    	; 0x13d8 <DIO_voidSetPinDirection+0x37c>
            {
            case DIO_INPUT:
                CLR_BIT(DDRB, Copy_u8Pin);
    11aa:	a7 e3       	ldi	r26, 0x37	; 55
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e7 e3       	ldi	r30, 0x37	; 55
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 2e       	mov	r0, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <DIO_voidSetPinDirection+0x16c>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	0a 94       	dec	r0
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <DIO_voidSetPinDirection+0x168>
    11cc:	80 95       	com	r24
    11ce:	84 23       	and	r24, r20
    11d0:	8c 93       	st	X, r24
    11d2:	02 c1       	rjmp	.+516    	; 0x13d8 <DIO_voidSetPinDirection+0x37c>
                break;
            case DIO_OUTPUT:
                SET_BIT(DDRB, Copy_u8Pin);
    11d4:	a7 e3       	ldi	r26, 0x37	; 55
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e7 e3       	ldi	r30, 0x37	; 55
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	48 2f       	mov	r20, r24
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 2e       	mov	r0, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <DIO_voidSetPinDirection+0x196>
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	0a 94       	dec	r0
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <DIO_voidSetPinDirection+0x192>
    11f6:	84 2b       	or	r24, r20
    11f8:	8c 93       	st	X, r24
    11fa:	ee c0       	rjmp	.+476    	; 0x13d8 <DIO_voidSetPinDirection+0x37c>
                break;
            case DIO_IN_PULLUP:
                CLR_BIT(DDRB, Copy_u8Pin);
    11fc:	a7 e3       	ldi	r26, 0x37	; 55
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e7 e3       	ldi	r30, 0x37	; 55
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	48 2f       	mov	r20, r24
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_voidSetPinDirection+0x1bc>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	2a 95       	dec	r18
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_voidSetPinDirection+0x1b8>
    121c:	80 95       	com	r24
    121e:	84 23       	and	r24, r20
    1220:	8c 93       	st	X, r24
                SET_BIT(PORTB, Copy_u8Pin);
    1222:	a8 e3       	ldi	r26, 0x38	; 56
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e8 e3       	ldi	r30, 0x38	; 56
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <DIO_voidSetPinDirection+0x1e4>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <DIO_voidSetPinDirection+0x1e0>
    1244:	84 2b       	or	r24, r20
    1246:	8c 93       	st	X, r24
    1248:	c7 c0       	rjmp	.+398    	; 0x13d8 <DIO_voidSetPinDirection+0x37c>
            default:
                break;
            }
            break;
    case DIO_PORTC:
        switch (Copy_u8Direction)
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	3f 83       	std	Y+7, r19	; 0x07
    1252:	2e 83       	std	Y+6, r18	; 0x06
    1254:	8e 81       	ldd	r24, Y+6	; 0x06
    1256:	9f 81       	ldd	r25, Y+7	; 0x07
    1258:	81 30       	cpi	r24, 0x01	; 1
    125a:	91 05       	cpc	r25, r1
    125c:	f9 f0       	breq	.+62     	; 0x129c <DIO_voidSetPinDirection+0x240>
    125e:	2e 81       	ldd	r18, Y+6	; 0x06
    1260:	3f 81       	ldd	r19, Y+7	; 0x07
    1262:	22 30       	cpi	r18, 0x02	; 2
    1264:	31 05       	cpc	r19, r1
    1266:	71 f1       	breq	.+92     	; 0x12c4 <DIO_voidSetPinDirection+0x268>
    1268:	8e 81       	ldd	r24, Y+6	; 0x06
    126a:	9f 81       	ldd	r25, Y+7	; 0x07
    126c:	00 97       	sbiw	r24, 0x00	; 0
    126e:	09 f0       	breq	.+2      	; 0x1272 <DIO_voidSetPinDirection+0x216>
    1270:	b3 c0       	rjmp	.+358    	; 0x13d8 <DIO_voidSetPinDirection+0x37c>
            {
            case DIO_INPUT:
                CLR_BIT(DDRC, Copy_u8Pin);
    1272:	a4 e3       	ldi	r26, 0x34	; 52
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e4 e3       	ldi	r30, 0x34	; 52
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	48 2f       	mov	r20, r24
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	02 2e       	mov	r0, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <DIO_voidSetPinDirection+0x234>
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	0a 94       	dec	r0
    1292:	e2 f7       	brpl	.-8      	; 0x128c <DIO_voidSetPinDirection+0x230>
    1294:	80 95       	com	r24
    1296:	84 23       	and	r24, r20
    1298:	8c 93       	st	X, r24
    129a:	9e c0       	rjmp	.+316    	; 0x13d8 <DIO_voidSetPinDirection+0x37c>
                break;
            case DIO_OUTPUT:
                SET_BIT(DDRC, Copy_u8Pin);
    129c:	a4 e3       	ldi	r26, 0x34	; 52
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e4 e3       	ldi	r30, 0x34	; 52
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DIO_voidSetPinDirection+0x25e>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <DIO_voidSetPinDirection+0x25a>
    12be:	84 2b       	or	r24, r20
    12c0:	8c 93       	st	X, r24
    12c2:	8a c0       	rjmp	.+276    	; 0x13d8 <DIO_voidSetPinDirection+0x37c>
                break;
            case DIO_IN_PULLUP:
                CLR_BIT(DDRC, Copy_u8Pin);
    12c4:	a4 e3       	ldi	r26, 0x34	; 52
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e4 e3       	ldi	r30, 0x34	; 52
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <DIO_voidSetPinDirection+0x284>
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	2a 95       	dec	r18
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <DIO_voidSetPinDirection+0x280>
    12e4:	80 95       	com	r24
    12e6:	84 23       	and	r24, r20
    12e8:	8c 93       	st	X, r24
                SET_BIT(PORTC, Copy_u8Pin);
    12ea:	a5 e3       	ldi	r26, 0x35	; 53
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e5 e3       	ldi	r30, 0x35	; 53
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_voidSetPinDirection+0x2ac>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <DIO_voidSetPinDirection+0x2a8>
    130c:	84 2b       	or	r24, r20
    130e:	8c 93       	st	X, r24
    1310:	63 c0       	rjmp	.+198    	; 0x13d8 <DIO_voidSetPinDirection+0x37c>
            default:
                break;
            }
            break;
    case DIO_PORTD:
        switch (Copy_u8Direction)
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	3d 83       	std	Y+5, r19	; 0x05
    131a:	2c 83       	std	Y+4, r18	; 0x04
    131c:	8c 81       	ldd	r24, Y+4	; 0x04
    131e:	9d 81       	ldd	r25, Y+5	; 0x05
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	91 05       	cpc	r25, r1
    1324:	f9 f0       	breq	.+62     	; 0x1364 <DIO_voidSetPinDirection+0x308>
    1326:	2c 81       	ldd	r18, Y+4	; 0x04
    1328:	3d 81       	ldd	r19, Y+5	; 0x05
    132a:	22 30       	cpi	r18, 0x02	; 2
    132c:	31 05       	cpc	r19, r1
    132e:	71 f1       	breq	.+92     	; 0x138c <DIO_voidSetPinDirection+0x330>
    1330:	8c 81       	ldd	r24, Y+4	; 0x04
    1332:	9d 81       	ldd	r25, Y+5	; 0x05
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	09 f0       	breq	.+2      	; 0x133a <DIO_voidSetPinDirection+0x2de>
    1338:	4f c0       	rjmp	.+158    	; 0x13d8 <DIO_voidSetPinDirection+0x37c>
            {
            case DIO_INPUT:
                CLR_BIT(DDRD, Copy_u8Pin);
    133a:	a1 e3       	ldi	r26, 0x31	; 49
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e1 e3       	ldi	r30, 0x31	; 49
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <DIO_voidSetPinDirection+0x2fc>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <DIO_voidSetPinDirection+0x2f8>
    135c:	80 95       	com	r24
    135e:	84 23       	and	r24, r20
    1360:	8c 93       	st	X, r24
    1362:	3a c0       	rjmp	.+116    	; 0x13d8 <DIO_voidSetPinDirection+0x37c>
                break;
            case DIO_OUTPUT:
                SET_BIT(DDRD, Copy_u8Pin);
    1364:	a1 e3       	ldi	r26, 0x31	; 49
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	e1 e3       	ldi	r30, 0x31	; 49
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	48 2f       	mov	r20, r24
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 2e       	mov	r0, r18
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <DIO_voidSetPinDirection+0x326>
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	0a 94       	dec	r0
    1384:	e2 f7       	brpl	.-8      	; 0x137e <DIO_voidSetPinDirection+0x322>
    1386:	84 2b       	or	r24, r20
    1388:	8c 93       	st	X, r24
    138a:	26 c0       	rjmp	.+76     	; 0x13d8 <DIO_voidSetPinDirection+0x37c>
                break;
            case DIO_IN_PULLUP:
                CLR_BIT(DDRD, Copy_u8Pin);
    138c:	a1 e3       	ldi	r26, 0x31	; 49
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e1 e3       	ldi	r30, 0x31	; 49
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	48 2f       	mov	r20, r24
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <DIO_voidSetPinDirection+0x34c>
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	2a 95       	dec	r18
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <DIO_voidSetPinDirection+0x348>
    13ac:	80 95       	com	r24
    13ae:	84 23       	and	r24, r20
    13b0:	8c 93       	st	X, r24
                SET_BIT(PORTD, Copy_u8Pin);
    13b2:	a2 e3       	ldi	r26, 0x32	; 50
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e2 e3       	ldi	r30, 0x32	; 50
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	48 2f       	mov	r20, r24
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	02 2e       	mov	r0, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <DIO_voidSetPinDirection+0x374>
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	0a 94       	dec	r0
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <DIO_voidSetPinDirection+0x370>
    13d4:	84 2b       	or	r24, r20
    13d6:	8c 93       	st	X, r24
        
    
    default:
        break;
    }
}
    13d8:	2d 96       	adiw	r28, 0x0d	; 13
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	f8 94       	cli
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	cd bf       	out	0x3d, r28	; 61
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <DIO_voidSetPortValue>:

void DIO_voidSetPortValue (u8 Copy_u8Port , u8 Copy_u8Value)
{
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <DIO_voidSetPortValue+0x6>
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <DIO_voidSetPortValue+0x8>
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port)
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	3c 83       	std	Y+4, r19	; 0x04
    1402:	2b 83       	std	Y+3, r18	; 0x03
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	9c 81       	ldd	r25, Y+4	; 0x04
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	91 05       	cpc	r25, r1
    140c:	d1 f0       	breq	.+52     	; 0x1442 <DIO_voidSetPortValue+0x58>
    140e:	2b 81       	ldd	r18, Y+3	; 0x03
    1410:	3c 81       	ldd	r19, Y+4	; 0x04
    1412:	22 30       	cpi	r18, 0x02	; 2
    1414:	31 05       	cpc	r19, r1
    1416:	2c f4       	brge	.+10     	; 0x1422 <DIO_voidSetPortValue+0x38>
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	9c 81       	ldd	r25, Y+4	; 0x04
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	61 f0       	breq	.+24     	; 0x1438 <DIO_voidSetPortValue+0x4e>
    1420:	1e c0       	rjmp	.+60     	; 0x145e <DIO_voidSetPortValue+0x74>
    1422:	2b 81       	ldd	r18, Y+3	; 0x03
    1424:	3c 81       	ldd	r19, Y+4	; 0x04
    1426:	22 30       	cpi	r18, 0x02	; 2
    1428:	31 05       	cpc	r19, r1
    142a:	81 f0       	breq	.+32     	; 0x144c <DIO_voidSetPortValue+0x62>
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	9c 81       	ldd	r25, Y+4	; 0x04
    1430:	83 30       	cpi	r24, 0x03	; 3
    1432:	91 05       	cpc	r25, r1
    1434:	81 f0       	breq	.+32     	; 0x1456 <DIO_voidSetPortValue+0x6c>
    1436:	13 c0       	rjmp	.+38     	; 0x145e <DIO_voidSetPortValue+0x74>
		{
			case DIO_PORTA : PORTA = Copy_u8Value ; break ;
    1438:	eb e3       	ldi	r30, 0x3B	; 59
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	80 83       	st	Z, r24
    1440:	0e c0       	rjmp	.+28     	; 0x145e <DIO_voidSetPortValue+0x74>
			case DIO_PORTB : PORTB = Copy_u8Value ; break ;
    1442:	e8 e3       	ldi	r30, 0x38	; 56
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	80 83       	st	Z, r24
    144a:	09 c0       	rjmp	.+18     	; 0x145e <DIO_voidSetPortValue+0x74>
			case DIO_PORTC : PORTC = Copy_u8Value ; break ;
    144c:	e5 e3       	ldi	r30, 0x35	; 53
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	80 83       	st	Z, r24
    1454:	04 c0       	rjmp	.+8      	; 0x145e <DIO_voidSetPortValue+0x74>
			case DIO_PORTD : PORTD = Copy_u8Value ; break ;
    1456:	e2 e3       	ldi	r30, 0x32	; 50
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	80 83       	st	Z, r24
		}
}
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <DIO_voidWritePin>:

void    DIO_voidWritePin(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8PinStatus)
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	2d 97       	sbiw	r28, 0x0d	; 13
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	de bf       	out	0x3e, r29	; 62
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	cd bf       	out	0x3d, r28	; 61
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	6a 83       	std	Y+2, r22	; 0x02
    1484:	4b 83       	std	Y+3, r20	; 0x03
    switch (Copy_u8Port)
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	3d 87       	std	Y+13, r19	; 0x0d
    148e:	2c 87       	std	Y+12, r18	; 0x0c
    1490:	8c 85       	ldd	r24, Y+12	; 0x0c
    1492:	9d 85       	ldd	r25, Y+13	; 0x0d
    1494:	81 30       	cpi	r24, 0x01	; 1
    1496:	91 05       	cpc	r25, r1
    1498:	09 f4       	brne	.+2      	; 0x149c <DIO_voidWritePin+0x30>
    149a:	4f c0       	rjmp	.+158    	; 0x153a <DIO_voidWritePin+0xce>
    149c:	2c 85       	ldd	r18, Y+12	; 0x0c
    149e:	3d 85       	ldd	r19, Y+13	; 0x0d
    14a0:	22 30       	cpi	r18, 0x02	; 2
    14a2:	31 05       	cpc	r19, r1
    14a4:	2c f4       	brge	.+10     	; 0x14b0 <DIO_voidWritePin+0x44>
    14a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    14a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	71 f0       	breq	.+28     	; 0x14ca <DIO_voidWritePin+0x5e>
    14ae:	ec c0       	rjmp	.+472    	; 0x1688 <DIO_voidWritePin+0x21c>
    14b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    14b2:	3d 85       	ldd	r19, Y+13	; 0x0d
    14b4:	22 30       	cpi	r18, 0x02	; 2
    14b6:	31 05       	cpc	r19, r1
    14b8:	09 f4       	brne	.+2      	; 0x14bc <DIO_voidWritePin+0x50>
    14ba:	77 c0       	rjmp	.+238    	; 0x15aa <DIO_voidWritePin+0x13e>
    14bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    14be:	9d 85       	ldd	r25, Y+13	; 0x0d
    14c0:	83 30       	cpi	r24, 0x03	; 3
    14c2:	91 05       	cpc	r25, r1
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <DIO_voidWritePin+0x5c>
    14c6:	a9 c0       	rjmp	.+338    	; 0x161a <DIO_voidWritePin+0x1ae>
    14c8:	df c0       	rjmp	.+446    	; 0x1688 <DIO_voidWritePin+0x21c>
    {
    case DIO_PORTA:
        switch (Copy_u8PinStatus)
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	3b 87       	std	Y+11, r19	; 0x0b
    14d2:	2a 87       	std	Y+10, r18	; 0x0a
    14d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    14d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	31 f0       	breq	.+12     	; 0x14e8 <DIO_voidWritePin+0x7c>
    14dc:	2a 85       	ldd	r18, Y+10	; 0x0a
    14de:	3b 85       	ldd	r19, Y+11	; 0x0b
    14e0:	21 30       	cpi	r18, 0x01	; 1
    14e2:	31 05       	cpc	r19, r1
    14e4:	b1 f0       	breq	.+44     	; 0x1512 <DIO_voidWritePin+0xa6>
    14e6:	d0 c0       	rjmp	.+416    	; 0x1688 <DIO_voidWritePin+0x21c>
        {
        case DIO_LOW:
            CLR_BIT(PORTA, Copy_u8Pin);
    14e8:	ab e3       	ldi	r26, 0x3B	; 59
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	eb e3       	ldi	r30, 0x3B	; 59
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	48 2f       	mov	r20, r24
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	02 2e       	mov	r0, r18
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <DIO_voidWritePin+0x9a>
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	0a 94       	dec	r0
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <DIO_voidWritePin+0x96>
    150a:	80 95       	com	r24
    150c:	84 23       	and	r24, r20
    150e:	8c 93       	st	X, r24
    1510:	bb c0       	rjmp	.+374    	; 0x1688 <DIO_voidWritePin+0x21c>
            break;
        case DIO_HIGH:
            SET_BIT(PORTA, Copy_u8Pin);
    1512:	ab e3       	ldi	r26, 0x3B	; 59
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	eb e3       	ldi	r30, 0x3B	; 59
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	48 2f       	mov	r20, r24
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	02 2e       	mov	r0, r18
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <DIO_voidWritePin+0xc4>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	0a 94       	dec	r0
    1532:	e2 f7       	brpl	.-8      	; 0x152c <DIO_voidWritePin+0xc0>
    1534:	84 2b       	or	r24, r20
    1536:	8c 93       	st	X, r24
    1538:	a7 c0       	rjmp	.+334    	; 0x1688 <DIO_voidWritePin+0x21c>
        default:
            break;
        }
        break;
    case DIO_PORTB:
        switch (Copy_u8PinStatus)
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	39 87       	std	Y+9, r19	; 0x09
    1542:	28 87       	std	Y+8, r18	; 0x08
    1544:	88 85       	ldd	r24, Y+8	; 0x08
    1546:	99 85       	ldd	r25, Y+9	; 0x09
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	31 f0       	breq	.+12     	; 0x1558 <DIO_voidWritePin+0xec>
    154c:	28 85       	ldd	r18, Y+8	; 0x08
    154e:	39 85       	ldd	r19, Y+9	; 0x09
    1550:	21 30       	cpi	r18, 0x01	; 1
    1552:	31 05       	cpc	r19, r1
    1554:	b1 f0       	breq	.+44     	; 0x1582 <DIO_voidWritePin+0x116>
    1556:	98 c0       	rjmp	.+304    	; 0x1688 <DIO_voidWritePin+0x21c>
        {
        case DIO_LOW:
            CLR_BIT(PORTB, Copy_u8Pin);
    1558:	a8 e3       	ldi	r26, 0x38	; 56
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e8 e3       	ldi	r30, 0x38	; 56
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	48 2f       	mov	r20, r24
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	02 2e       	mov	r0, r18
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <DIO_voidWritePin+0x10a>
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	0a 94       	dec	r0
    1578:	e2 f7       	brpl	.-8      	; 0x1572 <DIO_voidWritePin+0x106>
    157a:	80 95       	com	r24
    157c:	84 23       	and	r24, r20
    157e:	8c 93       	st	X, r24
    1580:	83 c0       	rjmp	.+262    	; 0x1688 <DIO_voidWritePin+0x21c>
            break;
        case DIO_HIGH:
            SET_BIT(PORTB, Copy_u8Pin);
    1582:	a8 e3       	ldi	r26, 0x38	; 56
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e8 e3       	ldi	r30, 0x38	; 56
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	48 2f       	mov	r20, r24
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 2e       	mov	r0, r18
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <DIO_voidWritePin+0x134>
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	0a 94       	dec	r0
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <DIO_voidWritePin+0x130>
    15a4:	84 2b       	or	r24, r20
    15a6:	8c 93       	st	X, r24
    15a8:	6f c0       	rjmp	.+222    	; 0x1688 <DIO_voidWritePin+0x21c>
        default:
            break;
        }
        break;
    case DIO_PORTC:
        switch (Copy_u8PinStatus)
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	3f 83       	std	Y+7, r19	; 0x07
    15b2:	2e 83       	std	Y+6, r18	; 0x06
    15b4:	8e 81       	ldd	r24, Y+6	; 0x06
    15b6:	9f 81       	ldd	r25, Y+7	; 0x07
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	31 f0       	breq	.+12     	; 0x15c8 <DIO_voidWritePin+0x15c>
    15bc:	2e 81       	ldd	r18, Y+6	; 0x06
    15be:	3f 81       	ldd	r19, Y+7	; 0x07
    15c0:	21 30       	cpi	r18, 0x01	; 1
    15c2:	31 05       	cpc	r19, r1
    15c4:	b1 f0       	breq	.+44     	; 0x15f2 <DIO_voidWritePin+0x186>
    15c6:	60 c0       	rjmp	.+192    	; 0x1688 <DIO_voidWritePin+0x21c>
        {
        case DIO_LOW:
            CLR_BIT(PORTC, Copy_u8Pin);
    15c8:	a5 e3       	ldi	r26, 0x35	; 53
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e5 e3       	ldi	r30, 0x35	; 53
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	48 2f       	mov	r20, r24
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	02 2e       	mov	r0, r18
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <DIO_voidWritePin+0x17a>
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	0a 94       	dec	r0
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <DIO_voidWritePin+0x176>
    15ea:	80 95       	com	r24
    15ec:	84 23       	and	r24, r20
    15ee:	8c 93       	st	X, r24
    15f0:	4b c0       	rjmp	.+150    	; 0x1688 <DIO_voidWritePin+0x21c>
            break;
        case DIO_HIGH:
            SET_BIT(PORTC, Copy_u8Pin);
    15f2:	a5 e3       	ldi	r26, 0x35	; 53
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e5 e3       	ldi	r30, 0x35	; 53
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	48 2f       	mov	r20, r24
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	02 2e       	mov	r0, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <DIO_voidWritePin+0x1a4>
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	0a 94       	dec	r0
    1612:	e2 f7       	brpl	.-8      	; 0x160c <DIO_voidWritePin+0x1a0>
    1614:	84 2b       	or	r24, r20
    1616:	8c 93       	st	X, r24
    1618:	37 c0       	rjmp	.+110    	; 0x1688 <DIO_voidWritePin+0x21c>
        default:
            break;
        }
        break;
    case DIO_PORTD:
        switch (Copy_u8PinStatus)
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	3d 83       	std	Y+5, r19	; 0x05
    1622:	2c 83       	std	Y+4, r18	; 0x04
    1624:	8c 81       	ldd	r24, Y+4	; 0x04
    1626:	9d 81       	ldd	r25, Y+5	; 0x05
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	31 f0       	breq	.+12     	; 0x1638 <DIO_voidWritePin+0x1cc>
    162c:	2c 81       	ldd	r18, Y+4	; 0x04
    162e:	3d 81       	ldd	r19, Y+5	; 0x05
    1630:	21 30       	cpi	r18, 0x01	; 1
    1632:	31 05       	cpc	r19, r1
    1634:	b1 f0       	breq	.+44     	; 0x1662 <DIO_voidWritePin+0x1f6>
    1636:	28 c0       	rjmp	.+80     	; 0x1688 <DIO_voidWritePin+0x21c>
        {
        case DIO_LOW:
            CLR_BIT(PORTD, Copy_u8Pin);
    1638:	a2 e3       	ldi	r26, 0x32	; 50
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e2 e3       	ldi	r30, 0x32	; 50
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	48 2f       	mov	r20, r24
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	02 2e       	mov	r0, r18
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <DIO_voidWritePin+0x1ea>
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	0a 94       	dec	r0
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <DIO_voidWritePin+0x1e6>
    165a:	80 95       	com	r24
    165c:	84 23       	and	r24, r20
    165e:	8c 93       	st	X, r24
    1660:	13 c0       	rjmp	.+38     	; 0x1688 <DIO_voidWritePin+0x21c>
            break;
        case DIO_HIGH:
            SET_BIT(PORTD, Copy_u8Pin);
    1662:	a2 e3       	ldi	r26, 0x32	; 50
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e2 e3       	ldi	r30, 0x32	; 50
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	48 2f       	mov	r20, r24
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	02 2e       	mov	r0, r18
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <DIO_voidWritePin+0x214>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	0a 94       	dec	r0
    1682:	e2 f7       	brpl	.-8      	; 0x167c <DIO_voidWritePin+0x210>
    1684:	84 2b       	or	r24, r20
    1686:	8c 93       	st	X, r24
        break;
    
    default:
        break;
    }
}
    1688:	2d 96       	adiw	r28, 0x0d	; 13
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	cd bf       	out	0x3d, r28	; 61
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <DIO_u8ReadPin>:

u8      DIO_u8ReadPin(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <DIO_u8ReadPin+0x6>
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <DIO_u8ReadPin+0x8>
    16a2:	0f 92       	push	r0
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	8a 83       	std	Y+2, r24	; 0x02
    16aa:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8PinStatus;
    
    switch (Copy_u8Port)
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	3d 83       	std	Y+5, r19	; 0x05
    16b4:	2c 83       	std	Y+4, r18	; 0x04
    16b6:	4c 81       	ldd	r20, Y+4	; 0x04
    16b8:	5d 81       	ldd	r21, Y+5	; 0x05
    16ba:	41 30       	cpi	r20, 0x01	; 1
    16bc:	51 05       	cpc	r21, r1
    16be:	41 f1       	breq	.+80     	; 0x1710 <DIO_u8ReadPin+0x76>
    16c0:	8c 81       	ldd	r24, Y+4	; 0x04
    16c2:	9d 81       	ldd	r25, Y+5	; 0x05
    16c4:	82 30       	cpi	r24, 0x02	; 2
    16c6:	91 05       	cpc	r25, r1
    16c8:	34 f4       	brge	.+12     	; 0x16d6 <DIO_u8ReadPin+0x3c>
    16ca:	2c 81       	ldd	r18, Y+4	; 0x04
    16cc:	3d 81       	ldd	r19, Y+5	; 0x05
    16ce:	21 15       	cp	r18, r1
    16d0:	31 05       	cpc	r19, r1
    16d2:	61 f0       	breq	.+24     	; 0x16ec <DIO_u8ReadPin+0x52>
    16d4:	52 c0       	rjmp	.+164    	; 0x177a <DIO_u8ReadPin+0xe0>
    16d6:	4c 81       	ldd	r20, Y+4	; 0x04
    16d8:	5d 81       	ldd	r21, Y+5	; 0x05
    16da:	42 30       	cpi	r20, 0x02	; 2
    16dc:	51 05       	cpc	r21, r1
    16de:	51 f1       	breq	.+84     	; 0x1734 <DIO_u8ReadPin+0x9a>
    16e0:	8c 81       	ldd	r24, Y+4	; 0x04
    16e2:	9d 81       	ldd	r25, Y+5	; 0x05
    16e4:	83 30       	cpi	r24, 0x03	; 3
    16e6:	91 05       	cpc	r25, r1
    16e8:	b9 f1       	breq	.+110    	; 0x1758 <DIO_u8ReadPin+0xbe>
    16ea:	47 c0       	rjmp	.+142    	; 0x177a <DIO_u8ReadPin+0xe0>
    {
    case DIO_PORTA:
        Local_u8PinStatus = GET_BIT(PINA, Copy_u8Pin);
    16ec:	e9 e3       	ldi	r30, 0x39	; 57
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	88 2f       	mov	r24, r24
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a9 01       	movw	r20, r18
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <DIO_u8ReadPin+0x6a>
    1700:	55 95       	asr	r21
    1702:	47 95       	ror	r20
    1704:	8a 95       	dec	r24
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <DIO_u8ReadPin+0x66>
    1708:	ca 01       	movw	r24, r20
    170a:	81 70       	andi	r24, 0x01	; 1
    170c:	89 83       	std	Y+1, r24	; 0x01
    170e:	35 c0       	rjmp	.+106    	; 0x177a <DIO_u8ReadPin+0xe0>
        break;
    case DIO_PORTB:
        Local_u8PinStatus = GET_BIT(PINB, Copy_u8Pin);
    1710:	e6 e3       	ldi	r30, 0x36	; 54
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	88 2f       	mov	r24, r24
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a9 01       	movw	r20, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <DIO_u8ReadPin+0x8e>
    1724:	55 95       	asr	r21
    1726:	47 95       	ror	r20
    1728:	8a 95       	dec	r24
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <DIO_u8ReadPin+0x8a>
    172c:	ca 01       	movw	r24, r20
    172e:	81 70       	andi	r24, 0x01	; 1
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	23 c0       	rjmp	.+70     	; 0x177a <DIO_u8ReadPin+0xe0>
        break;
    case DIO_PORTC:
        Local_u8PinStatus = GET_BIT(PINC, Copy_u8Pin);
    1734:	e3 e3       	ldi	r30, 0x33	; 51
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	88 2f       	mov	r24, r24
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	a9 01       	movw	r20, r18
    1746:	02 c0       	rjmp	.+4      	; 0x174c <DIO_u8ReadPin+0xb2>
    1748:	55 95       	asr	r21
    174a:	47 95       	ror	r20
    174c:	8a 95       	dec	r24
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <DIO_u8ReadPin+0xae>
    1750:	ca 01       	movw	r24, r20
    1752:	81 70       	andi	r24, 0x01	; 1
    1754:	89 83       	std	Y+1, r24	; 0x01
    1756:	11 c0       	rjmp	.+34     	; 0x177a <DIO_u8ReadPin+0xe0>
        break;
    case DIO_PORTD:
        Local_u8PinStatus = GET_BIT(PIND, Copy_u8Pin);
    1758:	e0 e3       	ldi	r30, 0x30	; 48
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	88 2f       	mov	r24, r24
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	a9 01       	movw	r20, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <DIO_u8ReadPin+0xd6>
    176c:	55 95       	asr	r21
    176e:	47 95       	ror	r20
    1770:	8a 95       	dec	r24
    1772:	e2 f7       	brpl	.-8      	; 0x176c <DIO_u8ReadPin+0xd2>
    1774:	ca 01       	movw	r24, r20
    1776:	81 70       	andi	r24, 0x01	; 1
    1778:	89 83       	std	Y+1, r24	; 0x01
    
    default:
        break;
    }

    return Local_u8PinStatus;
    177a:	89 81       	ldd	r24, Y+1	; 0x01
}
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	08 95       	ret

0000178c <DIO_voidTogglePin>:


void    DIO_voidTogglePin(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	00 d0       	rcall	.+0      	; 0x1792 <DIO_voidTogglePin+0x6>
    1792:	00 d0       	rcall	.+0      	; 0x1794 <DIO_voidTogglePin+0x8>
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	89 83       	std	Y+1, r24	; 0x01
    179a:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_u8Port)
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	3c 83       	std	Y+4, r19	; 0x04
    17a4:	2b 83       	std	Y+3, r18	; 0x03
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	9c 81       	ldd	r25, Y+4	; 0x04
    17aa:	81 30       	cpi	r24, 0x01	; 1
    17ac:	91 05       	cpc	r25, r1
    17ae:	49 f1       	breq	.+82     	; 0x1802 <DIO_voidTogglePin+0x76>
    17b0:	2b 81       	ldd	r18, Y+3	; 0x03
    17b2:	3c 81       	ldd	r19, Y+4	; 0x04
    17b4:	22 30       	cpi	r18, 0x02	; 2
    17b6:	31 05       	cpc	r19, r1
    17b8:	2c f4       	brge	.+10     	; 0x17c4 <DIO_voidTogglePin+0x38>
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	9c 81       	ldd	r25, Y+4	; 0x04
    17be:	00 97       	sbiw	r24, 0x00	; 0
    17c0:	61 f0       	breq	.+24     	; 0x17da <DIO_voidTogglePin+0x4e>
    17c2:	5a c0       	rjmp	.+180    	; 0x1878 <DIO_voidTogglePin+0xec>
    17c4:	2b 81       	ldd	r18, Y+3	; 0x03
    17c6:	3c 81       	ldd	r19, Y+4	; 0x04
    17c8:	22 30       	cpi	r18, 0x02	; 2
    17ca:	31 05       	cpc	r19, r1
    17cc:	71 f1       	breq	.+92     	; 0x182a <DIO_voidTogglePin+0x9e>
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	9c 81       	ldd	r25, Y+4	; 0x04
    17d2:	83 30       	cpi	r24, 0x03	; 3
    17d4:	91 05       	cpc	r25, r1
    17d6:	e9 f1       	breq	.+122    	; 0x1852 <DIO_voidTogglePin+0xc6>
    17d8:	4f c0       	rjmp	.+158    	; 0x1878 <DIO_voidTogglePin+0xec>
    {
    case DIO_PORTA:
        TGL_BIT(PORTA, Copy_u8Pin);
    17da:	ab e3       	ldi	r26, 0x3B	; 59
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	eb e3       	ldi	r30, 0x3B	; 59
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	48 2f       	mov	r20, r24
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	02 2e       	mov	r0, r18
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <DIO_voidTogglePin+0x6c>
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	0a 94       	dec	r0
    17fa:	e2 f7       	brpl	.-8      	; 0x17f4 <DIO_voidTogglePin+0x68>
    17fc:	84 27       	eor	r24, r20
    17fe:	8c 93       	st	X, r24
    1800:	3b c0       	rjmp	.+118    	; 0x1878 <DIO_voidTogglePin+0xec>
        break;
    case DIO_PORTB:
        TGL_BIT(PORTB, Copy_u8Pin);
    1802:	a8 e3       	ldi	r26, 0x38	; 56
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e8 e3       	ldi	r30, 0x38	; 56
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	48 2f       	mov	r20, r24
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	02 2e       	mov	r0, r18
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <DIO_voidTogglePin+0x94>
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	0a 94       	dec	r0
    1822:	e2 f7       	brpl	.-8      	; 0x181c <DIO_voidTogglePin+0x90>
    1824:	84 27       	eor	r24, r20
    1826:	8c 93       	st	X, r24
    1828:	27 c0       	rjmp	.+78     	; 0x1878 <DIO_voidTogglePin+0xec>
        break;
    case DIO_PORTC:
        TGL_BIT(PORTC, Copy_u8Pin);
    182a:	a5 e3       	ldi	r26, 0x35	; 53
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e5 e3       	ldi	r30, 0x35	; 53
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	48 2f       	mov	r20, r24
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	02 2e       	mov	r0, r18
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <DIO_voidTogglePin+0xbc>
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	0a 94       	dec	r0
    184a:	e2 f7       	brpl	.-8      	; 0x1844 <DIO_voidTogglePin+0xb8>
    184c:	84 27       	eor	r24, r20
    184e:	8c 93       	st	X, r24
    1850:	13 c0       	rjmp	.+38     	; 0x1878 <DIO_voidTogglePin+0xec>
        break;
    case DIO_PORTD:
        TGL_BIT(PORTD, Copy_u8Pin);
    1852:	a2 e3       	ldi	r26, 0x32	; 50
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e2 e3       	ldi	r30, 0x32	; 50
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	48 2f       	mov	r20, r24
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	02 2e       	mov	r0, r18
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <DIO_voidTogglePin+0xe4>
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	0a 94       	dec	r0
    1872:	e2 f7       	brpl	.-8      	; 0x186c <DIO_voidTogglePin+0xe0>
    1874:	84 27       	eor	r24, r20
    1876:	8c 93       	st	X, r24
        break;
    
    default:
        break;
    }
}
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <ADC_Init>:


volatile u8 ADC_u8Flag = 0;

void ADC_Init(void)
{
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    //Prebuild configs
    //Vlotage Reference
#if VREF == AREF
    CLR_BIT(ADMUX, ADMUX_REFS0);
    188e:	a7 e2       	ldi	r26, 0x27	; 39
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e7 e2       	ldi	r30, 0x27	; 39
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	8f 7b       	andi	r24, 0xBF	; 191
    189a:	8c 93       	st	X, r24
    CLR_BIT(ADMUX, ADMUX_REFS1);
    189c:	a7 e2       	ldi	r26, 0x27	; 39
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e7 e2       	ldi	r30, 0x27	; 39
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	8f 77       	andi	r24, 0x7F	; 127
    18a8:	8c 93       	st	X, r24
    #warning  VREF Configrations Error
#endif

    //Left Adjust
#if     LEFT_ADJUST_STATUS == LEFT_ADJUST_DISABLE
    CLR_BIT(ADMUX, ADMUX_ADLAR);
    18aa:	a7 e2       	ldi	r26, 0x27	; 39
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e7 e2       	ldi	r30, 0x27	; 39
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	8f 7d       	andi	r24, 0xDF	; 223
    18b6:	8c 93       	st	X, r24
    #warning LEFT_ADJUST_STATUS Config error

#endif

#if         AUTO_TRIGGER_STATUS == AUTO_TRIGGER_DISABLE
    CLR_BIT(ADCSRA, ADCSRA_ADATE);
    18b8:	a6 e2       	ldi	r26, 0x26	; 38
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e6 e2       	ldi	r30, 0x26	; 38
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	8f 7d       	andi	r24, 0xDF	; 223
    18c4:	8c 93       	st	X, r24
#else
    #warning AUTO_TRIGGER_STATUS Config error
#endif

#if         INTERRUPT_STATUS == INTERRUPT_DISABLE
    CLR_BIT(ADCSRA, ADCSRA_ADIE);
    18c6:	a6 e2       	ldi	r26, 0x26	; 38
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	e6 e2       	ldi	r30, 0x26	; 38
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	87 7f       	andi	r24, 0xF7	; 247
    18d2:	8c 93       	st	X, r24
#else 
    #warning INTERRUPT_STATUS Config error
#endif

    //Prescaler select
    CLR_BITS_REG(ADCSRA, 0x07);
    18d4:	a6 e2       	ldi	r26, 0x26	; 38
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e6 e2       	ldi	r30, 0x26	; 38
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	88 7f       	andi	r24, 0xF8	; 248
    18e0:	8c 93       	st	X, r24
    SET_BITS_REG(ADCSRA, PRESCALER_SELECT);
    18e2:	a6 e2       	ldi	r26, 0x26	; 38
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e6 e2       	ldi	r30, 0x26	; 38
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	87 60       	ori	r24, 0x07	; 7
    18ee:	8c 93       	st	X, r24

#if     ADC_STATUS == ADC_ENABLE
    SET_BIT(ADCSRA, ADCSRA_ADEN);
    18f0:	a6 e2       	ldi	r26, 0x26	; 38
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	e6 e2       	ldi	r30, 0x26	; 38
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	80 68       	ori	r24, 0x80	; 128
    18fc:	8c 93       	st	X, r24
    CLR_BIT(ADCSRA, ADCSRA_ADEN);
#else 
    #warning ADC_STATUS Config error
#endif

}
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	08 95       	ret

00001904 <ADC_u8ReadSynchronous>:


u8   ADC_u8ReadSynchronous(u8 Copy_u8ChannelNumber)
{
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	00 d0       	rcall	.+0      	; 0x190a <ADC_u8ReadSynchronous+0x6>
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
    190e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8ADCResult;
    //Select channel
    CLR_BITS_REG(ADMUX, CHANNEL_CLEAR_MASK);
    1910:	a7 e2       	ldi	r26, 0x27	; 39
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	e7 e2       	ldi	r30, 0x27	; 39
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	80 7e       	andi	r24, 0xE0	; 224
    191c:	8c 93       	st	X, r24
    SET_BITS_REG(ADMUX, Copy_u8ChannelNumber);
    191e:	a7 e2       	ldi	r26, 0x27	; 39
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	e7 e2       	ldi	r30, 0x27	; 39
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	90 81       	ld	r25, Z
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
    192a:	89 2b       	or	r24, r25
    192c:	8c 93       	st	X, r24

    //Start Coversion
    SET_BIT(ADCSRA, ADCSRA_ADSC);
    192e:	a6 e2       	ldi	r26, 0x26	; 38
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	e6 e2       	ldi	r30, 0x26	; 38
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	80 64       	ori	r24, 0x40	; 64
    193a:	8c 93       	st	X, r24

    //Wait untill conversion finish
    while(GET_BIT(ADCSRA, ADCSRA_ADIF) == 0);
    193c:	e6 e2       	ldi	r30, 0x26	; 38
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	82 95       	swap	r24
    1944:	8f 70       	andi	r24, 0x0F	; 15
    1946:	88 2f       	mov	r24, r24
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	81 70       	andi	r24, 0x01	; 1
    194c:	90 70       	andi	r25, 0x00	; 0
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	a9 f3       	breq	.-22     	; 0x193c <ADC_u8ReadSynchronous+0x38>

    //Clear Flag
    SET_BIT(ADCSRA, ADCSRA_ADIF);
    1952:	a6 e2       	ldi	r26, 0x26	; 38
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e6 e2       	ldi	r30, 0x26	; 38
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	80 61       	ori	r24, 0x10	; 16
    195e:	8c 93       	st	X, r24

#if     LEFT_ADJUST_STATUS == LEFT_ADJUST_DISABLE
    Local_u8ADCResult = ADCL;//ADCL
    1960:	e4 e2       	ldi	r30, 0x24	; 36
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	89 83       	std	Y+1, r24	; 0x01
#elif   LEFT_ADJUST_STATUS == LEFT_ADJUST_ENABLE
    Local_u8ADCResult = ADCH;
#endif

    return Local_u8ADCResult;
    1968:	89 81       	ldd	r24, Y+1	; 0x01
}
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	cf 91       	pop	r28
    1970:	df 91       	pop	r29
    1972:	08 95       	ret

00001974 <ADC_u16ReadSynchronous>:

u16  ADC_u16ReadSynchronous(u8 Copy_u8ChannelNumber)
{
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	00 d0       	rcall	.+0      	; 0x197a <ADC_u16ReadSynchronous+0x6>
    197a:	0f 92       	push	r0
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	8b 83       	std	Y+3, r24	; 0x03
    u16 Local_u16ADCResult;
    //Select channel
    CLR_BITS_REG(ADMUX, CHANNEL_CLEAR_MASK);
    1982:	a7 e2       	ldi	r26, 0x27	; 39
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e7 e2       	ldi	r30, 0x27	; 39
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	80 7e       	andi	r24, 0xE0	; 224
    198e:	8c 93       	st	X, r24
    SET_BITS_REG(ADMUX, Copy_u8ChannelNumber);
    1990:	a7 e2       	ldi	r26, 0x27	; 39
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e7 e2       	ldi	r30, 0x27	; 39
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	90 81       	ld	r25, Z
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	89 2b       	or	r24, r25
    199e:	8c 93       	st	X, r24

    //Start Coversion
    SET_BIT(ADCSRA, ADCSRA_ADSC);
    19a0:	a6 e2       	ldi	r26, 0x26	; 38
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e6 e2       	ldi	r30, 0x26	; 38
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	80 64       	ori	r24, 0x40	; 64
    19ac:	8c 93       	st	X, r24

    //Wait untill conversion finish
    while(GET_BIT(ADCSRA, ADCSRA_ADIF) == 0);
    19ae:	e6 e2       	ldi	r30, 0x26	; 38
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	82 95       	swap	r24
    19b6:	8f 70       	andi	r24, 0x0F	; 15
    19b8:	88 2f       	mov	r24, r24
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	81 70       	andi	r24, 0x01	; 1
    19be:	90 70       	andi	r25, 0x00	; 0
    19c0:	00 97       	sbiw	r24, 0x00	; 0
    19c2:	a9 f3       	breq	.-22     	; 0x19ae <ADC_u16ReadSynchronous+0x3a>

    //Clear Flag
    SET_BIT(ADCSRA, ADCSRA_ADIF);
    19c4:	a6 e2       	ldi	r26, 0x26	; 38
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e6 e2       	ldi	r30, 0x26	; 38
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	80 61       	ori	r24, 0x10	; 16
    19d0:	8c 93       	st	X, r24

    Local_u16ADCResult = ADC;
    19d2:	e4 e2       	ldi	r30, 0x24	; 36
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	91 81       	ldd	r25, Z+1	; 0x01
    19da:	9a 83       	std	Y+2, r25	; 0x02
    19dc:	89 83       	std	Y+1, r24	; 0x01

    return Local_u16ADCResult;
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	08 95       	ret

000019ee <ADC_u16ReadAsynchronous>:


u16  ADC_u16ReadAsynchronous(u8 Copy_u8ChannelNumber)
{
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	00 d0       	rcall	.+0      	; 0x19f4 <ADC_u16ReadAsynchronous+0x6>
    19f4:	0f 92       	push	r0
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	8b 83       	std	Y+3, r24	; 0x03
    static u8 Local_u8Flag = 0;
    u16 Local_u16ADCResult = RESULT_NOT_READY;
    19fc:	8f ef       	ldi	r24, 0xFF	; 255
    19fe:	9f ef       	ldi	r25, 0xFF	; 255
    1a00:	9a 83       	std	Y+2, r25	; 0x02
    1a02:	89 83       	std	Y+1, r24	; 0x01

    if(Local_u8Flag == 0)
    1a04:	80 91 6b 00 	lds	r24, 0x006B
    1a08:	88 23       	and	r24, r24
    1a0a:	c9 f4       	brne	.+50     	; 0x1a3e <ADC_u16ReadAsynchronous+0x50>
    {
        //Select channel
        CLR_BITS_REG(ADMUX, CHANNEL_CLEAR_MASK);
    1a0c:	a7 e2       	ldi	r26, 0x27	; 39
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	e7 e2       	ldi	r30, 0x27	; 39
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	80 7e       	andi	r24, 0xE0	; 224
    1a18:	8c 93       	st	X, r24
        SET_BITS_REG(ADMUX, Copy_u8ChannelNumber);
    1a1a:	a7 e2       	ldi	r26, 0x27	; 39
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e7 e2       	ldi	r30, 0x27	; 39
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	90 81       	ld	r25, Z
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	89 2b       	or	r24, r25
    1a28:	8c 93       	st	X, r24

        //Start Coversion
        SET_BIT(ADCSRA, ADCSRA_ADSC);
    1a2a:	a6 e2       	ldi	r26, 0x26	; 38
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e6 e2       	ldi	r30, 0x26	; 38
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	80 64       	ori	r24, 0x40	; 64
    1a36:	8c 93       	st	X, r24

        Local_u8Flag = 1;
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	80 93 6b 00 	sts	0x006B, r24
    }
    else{}//MISRA C

    if(ADC_u8Flag == 1)
    1a3e:	80 91 6a 00 	lds	r24, 0x006A
    1a42:	81 30       	cpi	r24, 0x01	; 1
    1a44:	51 f4       	brne	.+20     	; 0x1a5a <ADC_u16ReadAsynchronous+0x6c>
    {
        Local_u16ADCResult = ADC;
    1a46:	e4 e2       	ldi	r30, 0x24	; 36
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	91 81       	ldd	r25, Z+1	; 0x01
    1a4e:	9a 83       	std	Y+2, r25	; 0x02
    1a50:	89 83       	std	Y+1, r24	; 0x01
        ADC_u8Flag = 0;
    1a52:	10 92 6a 00 	sts	0x006A, r1
        Local_u8Flag = 0;
    1a56:	10 92 6b 00 	sts	0x006B, r1
    }
    else{}//MISRA C

    return Local_u16ADCResult;
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	08 95       	ret

00001a6a <ISR>:


ISR(ADC_vect)
{
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <ISR+0x6>
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <ISR+0x8>
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	9a 83       	std	Y+2, r25	; 0x02
    1a78:	89 83       	std	Y+1, r24	; 0x01
    ADC_u8Flag = 1;
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	80 93 6a 00 	sts	0x006A, r24
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	08 95       	ret

00001a8e <LCD_voidInit>:
#include "LCD_private.h"
#include "LCD_config.h"


void LCD_voidInit(void)
{
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	aa 97       	sbiw	r28, 0x2a	; 42
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	de bf       	out	0x3e, r29	; 62
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	cd bf       	out	0x3d, r28	; 61
    //Configure DIO Pins
    DIO_SetPortDirection(LCD_DATA_PORT, 0xFF);
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	6f ef       	ldi	r22, 0xFF	; 255
    1aa6:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_SetPortDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT, RS, DIO_OUTPUT);
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	60 e0       	ldi	r22, 0x00	; 0
    1aae:	41 e0       	ldi	r20, 0x01	; 1
    1ab0:	0e 94 2e 08 	call	0x105c	; 0x105c <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT, RW, DIO_OUTPUT);
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	61 e0       	ldi	r22, 0x01	; 1
    1ab8:	41 e0       	ldi	r20, 0x01	; 1
    1aba:	0e 94 2e 08 	call	0x105c	; 0x105c <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT, E, DIO_OUTPUT);
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	62 e0       	ldi	r22, 0x02	; 2
    1ac2:	41 e0       	ldi	r20, 0x01	; 1
    1ac4:	0e 94 2e 08 	call	0x105c	; 0x105c <DIO_voidSetPinDirection>
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	a8 e4       	ldi	r26, 0x48	; 72
    1ace:	b2 e4       	ldi	r27, 0x42	; 66
    1ad0:	8f a3       	std	Y+39, r24	; 0x27
    1ad2:	98 a7       	std	Y+40, r25	; 0x28
    1ad4:	a9 a7       	std	Y+41, r26	; 0x29
    1ad6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad8:	6f a1       	ldd	r22, Y+39	; 0x27
    1ada:	78 a5       	ldd	r23, Y+40	; 0x28
    1adc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ade:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	4a ef       	ldi	r20, 0xFA	; 250
    1ae6:	54 e4       	ldi	r21, 0x44	; 68
    1ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	8b a3       	std	Y+35, r24	; 0x23
    1af2:	9c a3       	std	Y+36, r25	; 0x24
    1af4:	ad a3       	std	Y+37, r26	; 0x25
    1af6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1af8:	6b a1       	ldd	r22, Y+35	; 0x23
    1afa:	7c a1       	ldd	r23, Y+36	; 0x24
    1afc:	8d a1       	ldd	r24, Y+37	; 0x25
    1afe:	9e a1       	ldd	r25, Y+38	; 0x26
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e8       	ldi	r20, 0x80	; 128
    1b06:	5f e3       	ldi	r21, 0x3F	; 63
    1b08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b0c:	88 23       	and	r24, r24
    1b0e:	2c f4       	brge	.+10     	; 0x1b1a <LCD_voidInit+0x8c>
		__ticks = 1;
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	9a a3       	std	Y+34, r25	; 0x22
    1b16:	89 a3       	std	Y+33, r24	; 0x21
    1b18:	3f c0       	rjmp	.+126    	; 0x1b98 <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    1b1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b20:	9e a1       	ldd	r25, Y+38	; 0x26
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	3f ef       	ldi	r19, 0xFF	; 255
    1b26:	4f e7       	ldi	r20, 0x7F	; 127
    1b28:	57 e4       	ldi	r21, 0x47	; 71
    1b2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b2e:	18 16       	cp	r1, r24
    1b30:	4c f5       	brge	.+82     	; 0x1b84 <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b32:	6f a1       	ldd	r22, Y+39	; 0x27
    1b34:	78 a5       	ldd	r23, Y+40	; 0x28
    1b36:	89 a5       	ldd	r24, Y+41	; 0x29
    1b38:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	40 e2       	ldi	r20, 0x20	; 32
    1b40:	51 e4       	ldi	r21, 0x41	; 65
    1b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	bc 01       	movw	r22, r24
    1b4c:	cd 01       	movw	r24, r26
    1b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	9a a3       	std	Y+34, r25	; 0x22
    1b58:	89 a3       	std	Y+33, r24	; 0x21
    1b5a:	0f c0       	rjmp	.+30     	; 0x1b7a <LCD_voidInit+0xec>
    1b5c:	88 ec       	ldi	r24, 0xC8	; 200
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	98 a3       	std	Y+32, r25	; 0x20
    1b62:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b64:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b66:	98 a1       	ldd	r25, Y+32	; 0x20
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	f1 f7       	brne	.-4      	; 0x1b68 <LCD_voidInit+0xda>
    1b6c:	98 a3       	std	Y+32, r25	; 0x20
    1b6e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b70:	89 a1       	ldd	r24, Y+33	; 0x21
    1b72:	9a a1       	ldd	r25, Y+34	; 0x22
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	9a a3       	std	Y+34, r25	; 0x22
    1b78:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b7e:	00 97       	sbiw	r24, 0x00	; 0
    1b80:	69 f7       	brne	.-38     	; 0x1b5c <LCD_voidInit+0xce>
    1b82:	14 c0       	rjmp	.+40     	; 0x1bac <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b84:	6b a1       	ldd	r22, Y+35	; 0x23
    1b86:	7c a1       	ldd	r23, Y+36	; 0x24
    1b88:	8d a1       	ldd	r24, Y+37	; 0x25
    1b8a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	9a a3       	std	Y+34, r25	; 0x22
    1b96:	89 a3       	std	Y+33, r24	; 0x21
    1b98:	89 a1       	ldd	r24, Y+33	; 0x21
    1b9a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b9c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b9e:	8d 8f       	std	Y+29, r24	; 0x1d
    1ba0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ba2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	f1 f7       	brne	.-4      	; 0x1ba4 <LCD_voidInit+0x116>
    1ba8:	9e 8f       	std	Y+30, r25	; 0x1e
    1baa:	8d 8f       	std	Y+29, r24	; 0x1d

    //wait 30ms
    _delay_ms(50);

    LCD_voidSendCommand(LCD_8BIT_2LINES);
    1bac:	88 e3       	ldi	r24, 0x38	; 56
    1bae:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <LCD_voidSendCommand>
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	a0 e8       	ldi	r26, 0x80	; 128
    1bb8:	bf e3       	ldi	r27, 0x3F	; 63
    1bba:	89 8f       	std	Y+25, r24	; 0x19
    1bbc:	9a 8f       	std	Y+26, r25	; 0x1a
    1bbe:	ab 8f       	std	Y+27, r26	; 0x1b
    1bc0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc2:	69 8d       	ldd	r22, Y+25	; 0x19
    1bc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	4a ef       	ldi	r20, 0xFA	; 250
    1bd0:	54 e4       	ldi	r21, 0x44	; 68
    1bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	8d 8b       	std	Y+21, r24	; 0x15
    1bdc:	9e 8b       	std	Y+22, r25	; 0x16
    1bde:	af 8b       	std	Y+23, r26	; 0x17
    1be0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1be2:	6d 89       	ldd	r22, Y+21	; 0x15
    1be4:	7e 89       	ldd	r23, Y+22	; 0x16
    1be6:	8f 89       	ldd	r24, Y+23	; 0x17
    1be8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 e8       	ldi	r20, 0x80	; 128
    1bf0:	5f e3       	ldi	r21, 0x3F	; 63
    1bf2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bf6:	88 23       	and	r24, r24
    1bf8:	2c f4       	brge	.+10     	; 0x1c04 <LCD_voidInit+0x176>
		__ticks = 1;
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	9c 8b       	std	Y+20, r25	; 0x14
    1c00:	8b 8b       	std	Y+19, r24	; 0x13
    1c02:	3f c0       	rjmp	.+126    	; 0x1c82 <LCD_voidInit+0x1f4>
	else if (__tmp > 65535)
    1c04:	6d 89       	ldd	r22, Y+21	; 0x15
    1c06:	7e 89       	ldd	r23, Y+22	; 0x16
    1c08:	8f 89       	ldd	r24, Y+23	; 0x17
    1c0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	3f ef       	ldi	r19, 0xFF	; 255
    1c10:	4f e7       	ldi	r20, 0x7F	; 127
    1c12:	57 e4       	ldi	r21, 0x47	; 71
    1c14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c18:	18 16       	cp	r1, r24
    1c1a:	4c f5       	brge	.+82     	; 0x1c6e <LCD_voidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c1c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	40 e2       	ldi	r20, 0x20	; 32
    1c2a:	51 e4       	ldi	r21, 0x41	; 65
    1c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	bc 01       	movw	r22, r24
    1c36:	cd 01       	movw	r24, r26
    1c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	9c 8b       	std	Y+20, r25	; 0x14
    1c42:	8b 8b       	std	Y+19, r24	; 0x13
    1c44:	0f c0       	rjmp	.+30     	; 0x1c64 <LCD_voidInit+0x1d6>
    1c46:	88 ec       	ldi	r24, 0xC8	; 200
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	9a 8b       	std	Y+18, r25	; 0x12
    1c4c:	89 8b       	std	Y+17, r24	; 0x11
    1c4e:	89 89       	ldd	r24, Y+17	; 0x11
    1c50:	9a 89       	ldd	r25, Y+18	; 0x12
    1c52:	01 97       	sbiw	r24, 0x01	; 1
    1c54:	f1 f7       	brne	.-4      	; 0x1c52 <LCD_voidInit+0x1c4>
    1c56:	9a 8b       	std	Y+18, r25	; 0x12
    1c58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c5e:	01 97       	sbiw	r24, 0x01	; 1
    1c60:	9c 8b       	std	Y+20, r25	; 0x14
    1c62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c64:	8b 89       	ldd	r24, Y+19	; 0x13
    1c66:	9c 89       	ldd	r25, Y+20	; 0x14
    1c68:	00 97       	sbiw	r24, 0x00	; 0
    1c6a:	69 f7       	brne	.-38     	; 0x1c46 <LCD_voidInit+0x1b8>
    1c6c:	14 c0       	rjmp	.+40     	; 0x1c96 <LCD_voidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c70:	7e 89       	ldd	r23, Y+22	; 0x16
    1c72:	8f 89       	ldd	r24, Y+23	; 0x17
    1c74:	98 8d       	ldd	r25, Y+24	; 0x18
    1c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	9c 8b       	std	Y+20, r25	; 0x14
    1c80:	8b 8b       	std	Y+19, r24	; 0x13
    1c82:	8b 89       	ldd	r24, Y+19	; 0x13
    1c84:	9c 89       	ldd	r25, Y+20	; 0x14
    1c86:	98 8b       	std	Y+16, r25	; 0x10
    1c88:	8f 87       	std	Y+15, r24	; 0x0f
    1c8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c8c:	98 89       	ldd	r25, Y+16	; 0x10
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <LCD_voidInit+0x200>
    1c92:	98 8b       	std	Y+16, r25	; 0x10
    1c94:	8f 87       	std	Y+15, r24	; 0x0f

    //Wait 1ms
    _delay_ms(1);

    LCD_voidSendCommand(LCD_ON_OFF_DISPLAY);
    1c96:	8c e0       	ldi	r24, 0x0C	; 12
    1c98:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <LCD_voidSendCommand>
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	a0 e8       	ldi	r26, 0x80	; 128
    1ca2:	bf e3       	ldi	r27, 0x3F	; 63
    1ca4:	8b 87       	std	Y+11, r24	; 0x0b
    1ca6:	9c 87       	std	Y+12, r25	; 0x0c
    1ca8:	ad 87       	std	Y+13, r26	; 0x0d
    1caa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	4a ef       	ldi	r20, 0xFA	; 250
    1cba:	54 e4       	ldi	r21, 0x44	; 68
    1cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	8f 83       	std	Y+7, r24	; 0x07
    1cc6:	98 87       	std	Y+8, r25	; 0x08
    1cc8:	a9 87       	std	Y+9, r26	; 0x09
    1cca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cce:	78 85       	ldd	r23, Y+8	; 0x08
    1cd0:	89 85       	ldd	r24, Y+9	; 0x09
    1cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	40 e8       	ldi	r20, 0x80	; 128
    1cda:	5f e3       	ldi	r21, 0x3F	; 63
    1cdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ce0:	88 23       	and	r24, r24
    1ce2:	2c f4       	brge	.+10     	; 0x1cee <LCD_voidInit+0x260>
		__ticks = 1;
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	9e 83       	std	Y+6, r25	; 0x06
    1cea:	8d 83       	std	Y+5, r24	; 0x05
    1cec:	3f c0       	rjmp	.+126    	; 0x1d6c <LCD_voidInit+0x2de>
	else if (__tmp > 65535)
    1cee:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf0:	78 85       	ldd	r23, Y+8	; 0x08
    1cf2:	89 85       	ldd	r24, Y+9	; 0x09
    1cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	3f ef       	ldi	r19, 0xFF	; 255
    1cfa:	4f e7       	ldi	r20, 0x7F	; 127
    1cfc:	57 e4       	ldi	r21, 0x47	; 71
    1cfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d02:	18 16       	cp	r1, r24
    1d04:	4c f5       	brge	.+82     	; 0x1d58 <LCD_voidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e2       	ldi	r20, 0x20	; 32
    1d14:	51 e4       	ldi	r21, 0x41	; 65
    1d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	bc 01       	movw	r22, r24
    1d20:	cd 01       	movw	r24, r26
    1d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	9e 83       	std	Y+6, r25	; 0x06
    1d2c:	8d 83       	std	Y+5, r24	; 0x05
    1d2e:	0f c0       	rjmp	.+30     	; 0x1d4e <LCD_voidInit+0x2c0>
    1d30:	88 ec       	ldi	r24, 0xC8	; 200
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	9c 83       	std	Y+4, r25	; 0x04
    1d36:	8b 83       	std	Y+3, r24	; 0x03
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	f1 f7       	brne	.-4      	; 0x1d3c <LCD_voidInit+0x2ae>
    1d40:	9c 83       	std	Y+4, r25	; 0x04
    1d42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d44:	8d 81       	ldd	r24, Y+5	; 0x05
    1d46:	9e 81       	ldd	r25, Y+6	; 0x06
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	9e 83       	std	Y+6, r25	; 0x06
    1d4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d50:	9e 81       	ldd	r25, Y+6	; 0x06
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	69 f7       	brne	.-38     	; 0x1d30 <LCD_voidInit+0x2a2>
    1d56:	14 c0       	rjmp	.+40     	; 0x1d80 <LCD_voidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d58:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5a:	78 85       	ldd	r23, Y+8	; 0x08
    1d5c:	89 85       	ldd	r24, Y+9	; 0x09
    1d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	9e 83       	std	Y+6, r25	; 0x06
    1d6a:	8d 83       	std	Y+5, r24	; 0x05
    1d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d70:	9a 83       	std	Y+2, r25	; 0x02
    1d72:	89 83       	std	Y+1, r24	; 0x01
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	9a 81       	ldd	r25, Y+2	; 0x02
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <LCD_voidInit+0x2ea>
    1d7c:	9a 83       	std	Y+2, r25	; 0x02
    1d7e:	89 83       	std	Y+1, r24	; 0x01

    //Wait 1ms
    _delay_ms(1);

    LCD_voidSendCommand(LCD_ON_OFF_DISPLAY);
    1d80:	8c e0       	ldi	r24, 0x0C	; 12
    1d82:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <LCD_voidSendCommand>
}
    1d86:	aa 96       	adiw	r28, 0x2a	; 42
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	cf 91       	pop	r28
    1d94:	df 91       	pop	r29
    1d96:	08 95       	ret

00001d98 <LCD_voidSendCommand>:


static void LCD_voidSendCommand(u8 Copy_u8Command)
{
    1d98:	df 93       	push	r29
    1d9a:	cf 93       	push	r28
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	2f 97       	sbiw	r28, 0x0f	; 15
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	de bf       	out	0x3e, r29	; 62
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	cd bf       	out	0x3d, r28	; 61
    1dac:	8f 87       	std	Y+15, r24	; 0x0f
    //RS
    DIO_voidWritePin(LCD_CONTROL_PORT, RS, DIO_LOW);
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	60 e0       	ldi	r22, 0x00	; 0
    1db2:	40 e0       	ldi	r20, 0x00	; 0
    1db4:	0e 94 36 0a 	call	0x146c	; 0x146c <DIO_voidWritePin>
    //R/W
    DIO_voidWritePin(LCD_CONTROL_PORT, RW, DIO_LOW);
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	61 e0       	ldi	r22, 0x01	; 1
    1dbc:	40 e0       	ldi	r20, 0x00	; 0
    1dbe:	0e 94 36 0a 	call	0x146c	; 0x146c <DIO_voidWritePin>

    //D7 .. D0 
    DIO_voidSetPortValue(LCD_DATA_PORT, Copy_u8Command);
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	6f 85       	ldd	r22, Y+15	; 0x0f
    1dc6:	0e 94 f5 09 	call	0x13ea	; 0x13ea <DIO_voidSetPortValue>

    //Enable Pulse
    DIO_voidWritePin(LCD_CONTROL_PORT, E, DIO_HIGH);
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	62 e0       	ldi	r22, 0x02	; 2
    1dce:	41 e0       	ldi	r20, 0x01	; 1
    1dd0:	0e 94 36 0a 	call	0x146c	; 0x146c <DIO_voidWritePin>
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	a0 e0       	ldi	r26, 0x00	; 0
    1dda:	b0 e4       	ldi	r27, 0x40	; 64
    1ddc:	8b 87       	std	Y+11, r24	; 0x0b
    1dde:	9c 87       	std	Y+12, r25	; 0x0c
    1de0:	ad 87       	std	Y+13, r26	; 0x0d
    1de2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	4a ef       	ldi	r20, 0xFA	; 250
    1df2:	54 e4       	ldi	r21, 0x44	; 68
    1df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	8f 83       	std	Y+7, r24	; 0x07
    1dfe:	98 87       	std	Y+8, r25	; 0x08
    1e00:	a9 87       	std	Y+9, r26	; 0x09
    1e02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e04:	6f 81       	ldd	r22, Y+7	; 0x07
    1e06:	78 85       	ldd	r23, Y+8	; 0x08
    1e08:	89 85       	ldd	r24, Y+9	; 0x09
    1e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e8       	ldi	r20, 0x80	; 128
    1e12:	5f e3       	ldi	r21, 0x3F	; 63
    1e14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e18:	88 23       	and	r24, r24
    1e1a:	2c f4       	brge	.+10     	; 0x1e26 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	9e 83       	std	Y+6, r25	; 0x06
    1e22:	8d 83       	std	Y+5, r24	; 0x05
    1e24:	3f c0       	rjmp	.+126    	; 0x1ea4 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1e26:	6f 81       	ldd	r22, Y+7	; 0x07
    1e28:	78 85       	ldd	r23, Y+8	; 0x08
    1e2a:	89 85       	ldd	r24, Y+9	; 0x09
    1e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	3f ef       	ldi	r19, 0xFF	; 255
    1e32:	4f e7       	ldi	r20, 0x7F	; 127
    1e34:	57 e4       	ldi	r21, 0x47	; 71
    1e36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e3a:	18 16       	cp	r1, r24
    1e3c:	4c f5       	brge	.+82     	; 0x1e90 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e2       	ldi	r20, 0x20	; 32
    1e4c:	51 e4       	ldi	r21, 0x41	; 65
    1e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	bc 01       	movw	r22, r24
    1e58:	cd 01       	movw	r24, r26
    1e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	9e 83       	std	Y+6, r25	; 0x06
    1e64:	8d 83       	std	Y+5, r24	; 0x05
    1e66:	0f c0       	rjmp	.+30     	; 0x1e86 <LCD_voidSendCommand+0xee>
    1e68:	88 ec       	ldi	r24, 0xC8	; 200
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	9c 83       	std	Y+4, r25	; 0x04
    1e6e:	8b 83       	std	Y+3, r24	; 0x03
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	9c 81       	ldd	r25, Y+4	; 0x04
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	f1 f7       	brne	.-4      	; 0x1e74 <LCD_voidSendCommand+0xdc>
    1e78:	9c 83       	std	Y+4, r25	; 0x04
    1e7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	9e 83       	std	Y+6, r25	; 0x06
    1e84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e86:	8d 81       	ldd	r24, Y+5	; 0x05
    1e88:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	69 f7       	brne	.-38     	; 0x1e68 <LCD_voidSendCommand+0xd0>
    1e8e:	14 c0       	rjmp	.+40     	; 0x1eb8 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e90:	6f 81       	ldd	r22, Y+7	; 0x07
    1e92:	78 85       	ldd	r23, Y+8	; 0x08
    1e94:	89 85       	ldd	r24, Y+9	; 0x09
    1e96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	9e 83       	std	Y+6, r25	; 0x06
    1ea2:	8d 83       	std	Y+5, r24	; 0x05
    1ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea8:	9a 83       	std	Y+2, r25	; 0x02
    1eaa:	89 83       	std	Y+1, r24	; 0x01
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	f1 f7       	brne	.-4      	; 0x1eb0 <LCD_voidSendCommand+0x118>
    1eb4:	9a 83       	std	Y+2, r25	; 0x02
    1eb6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_voidWritePin(LCD_CONTROL_PORT, E, DIO_LOW);
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	62 e0       	ldi	r22, 0x02	; 2
    1ebc:	40 e0       	ldi	r20, 0x00	; 0
    1ebe:	0e 94 36 0a 	call	0x146c	; 0x146c <DIO_voidWritePin>
}
    1ec2:	2f 96       	adiw	r28, 0x0f	; 15
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	de bf       	out	0x3e, r29	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	cd bf       	out	0x3d, r28	; 61
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	2f 97       	sbiw	r28, 0x0f	; 15
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	cd bf       	out	0x3d, r28	; 61
    1ee8:	8f 87       	std	Y+15, r24	; 0x0f
     //RS
    DIO_voidWritePin(LCD_CONTROL_PORT, RS, DIO_HIGH);
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	60 e0       	ldi	r22, 0x00	; 0
    1eee:	41 e0       	ldi	r20, 0x01	; 1
    1ef0:	0e 94 36 0a 	call	0x146c	; 0x146c <DIO_voidWritePin>
    //R/W
    DIO_voidWritePin(LCD_CONTROL_PORT, RW, DIO_LOW);
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	61 e0       	ldi	r22, 0x01	; 1
    1ef8:	40 e0       	ldi	r20, 0x00	; 0
    1efa:	0e 94 36 0a 	call	0x146c	; 0x146c <DIO_voidWritePin>

    //D7 .. D0 
    DIO_voidSetPortValue(LCD_DATA_PORT, Copy_u8Char);
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f02:	0e 94 f5 09 	call	0x13ea	; 0x13ea <DIO_voidSetPortValue>

    //Enable Pulse
    DIO_voidWritePin(LCD_CONTROL_PORT, E, DIO_HIGH);
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	62 e0       	ldi	r22, 0x02	; 2
    1f0a:	41 e0       	ldi	r20, 0x01	; 1
    1f0c:	0e 94 36 0a 	call	0x146c	; 0x146c <DIO_voidWritePin>
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	a0 e0       	ldi	r26, 0x00	; 0
    1f16:	b0 e4       	ldi	r27, 0x40	; 64
    1f18:	8b 87       	std	Y+11, r24	; 0x0b
    1f1a:	9c 87       	std	Y+12, r25	; 0x0c
    1f1c:	ad 87       	std	Y+13, r26	; 0x0d
    1f1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	4a ef       	ldi	r20, 0xFA	; 250
    1f2e:	54 e4       	ldi	r21, 0x44	; 68
    1f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	8f 83       	std	Y+7, r24	; 0x07
    1f3a:	98 87       	std	Y+8, r25	; 0x08
    1f3c:	a9 87       	std	Y+9, r26	; 0x09
    1f3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f40:	6f 81       	ldd	r22, Y+7	; 0x07
    1f42:	78 85       	ldd	r23, Y+8	; 0x08
    1f44:	89 85       	ldd	r24, Y+9	; 0x09
    1f46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	40 e8       	ldi	r20, 0x80	; 128
    1f4e:	5f e3       	ldi	r21, 0x3F	; 63
    1f50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f54:	88 23       	and	r24, r24
    1f56:	2c f4       	brge	.+10     	; 0x1f62 <LCD_voidSendChar+0x8e>
		__ticks = 1;
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	9e 83       	std	Y+6, r25	; 0x06
    1f5e:	8d 83       	std	Y+5, r24	; 0x05
    1f60:	3f c0       	rjmp	.+126    	; 0x1fe0 <LCD_voidSendChar+0x10c>
	else if (__tmp > 65535)
    1f62:	6f 81       	ldd	r22, Y+7	; 0x07
    1f64:	78 85       	ldd	r23, Y+8	; 0x08
    1f66:	89 85       	ldd	r24, Y+9	; 0x09
    1f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	3f ef       	ldi	r19, 0xFF	; 255
    1f6e:	4f e7       	ldi	r20, 0x7F	; 127
    1f70:	57 e4       	ldi	r21, 0x47	; 71
    1f72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f76:	18 16       	cp	r1, r24
    1f78:	4c f5       	brge	.+82     	; 0x1fcc <LCD_voidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e2       	ldi	r20, 0x20	; 32
    1f88:	51 e4       	ldi	r21, 0x41	; 65
    1f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	bc 01       	movw	r22, r24
    1f94:	cd 01       	movw	r24, r26
    1f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	9e 83       	std	Y+6, r25	; 0x06
    1fa0:	8d 83       	std	Y+5, r24	; 0x05
    1fa2:	0f c0       	rjmp	.+30     	; 0x1fc2 <LCD_voidSendChar+0xee>
    1fa4:	88 ec       	ldi	r24, 0xC8	; 200
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	9c 83       	std	Y+4, r25	; 0x04
    1faa:	8b 83       	std	Y+3, r24	; 0x03
    1fac:	8b 81       	ldd	r24, Y+3	; 0x03
    1fae:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	f1 f7       	brne	.-4      	; 0x1fb0 <LCD_voidSendChar+0xdc>
    1fb4:	9c 83       	std	Y+4, r25	; 0x04
    1fb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fba:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	9e 83       	std	Y+6, r25	; 0x06
    1fc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc6:	00 97       	sbiw	r24, 0x00	; 0
    1fc8:	69 f7       	brne	.-38     	; 0x1fa4 <LCD_voidSendChar+0xd0>
    1fca:	14 c0       	rjmp	.+40     	; 0x1ff4 <LCD_voidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1fce:	78 85       	ldd	r23, Y+8	; 0x08
    1fd0:	89 85       	ldd	r24, Y+9	; 0x09
    1fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	9e 83       	std	Y+6, r25	; 0x06
    1fde:	8d 83       	std	Y+5, r24	; 0x05
    1fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe4:	9a 83       	std	Y+2, r25	; 0x02
    1fe6:	89 83       	std	Y+1, r24	; 0x01
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	9a 81       	ldd	r25, Y+2	; 0x02
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <LCD_voidSendChar+0x118>
    1ff0:	9a 83       	std	Y+2, r25	; 0x02
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_voidWritePin(LCD_CONTROL_PORT, E, DIO_LOW);
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	62 e0       	ldi	r22, 0x02	; 2
    1ff8:	40 e0       	ldi	r20, 0x00	; 0
    1ffa:	0e 94 36 0a 	call	0x146c	; 0x146c <DIO_voidWritePin>
}
    1ffe:	2f 96       	adiw	r28, 0x0f	; 15
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	de bf       	out	0x3e, r29	; 62
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	cd bf       	out	0x3d, r28	; 61
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	08 95       	ret

00002010 <LCD_voidClearDispaly>:

void LCD_voidClearDispaly(void)
{
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    LCD_voidSendCommand(LCD_CLEAR_DISPLAY);
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <LCD_voidSendCommand>
}
    201e:	cf 91       	pop	r28
    2020:	df 91       	pop	r29
    2022:	08 95       	ret

00002024 <LCD_voidSetPosition>:

//DDRAM
void LCD_voidSetPosition(u8 Copy_u8PosX, u8 Copy_u8PosY)
{
    2024:	df 93       	push	r29
    2026:	cf 93       	push	r28
    2028:	00 d0       	rcall	.+0      	; 0x202a <LCD_voidSetPosition+0x6>
    202a:	0f 92       	push	r0
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	8a 83       	std	Y+2, r24	; 0x02
    2032:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Address = 0x80;
    2034:	80 e8       	ldi	r24, 0x80	; 128
    2036:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8PosX == 0)
    2038:	8a 81       	ldd	r24, Y+2	; 0x02
    203a:	88 23       	and	r24, r24
    203c:	41 f4       	brne	.+16     	; 0x204e <LCD_voidSetPosition+0x2a>
    {
        Local_u8Address += Copy_u8PosY;
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	9b 81       	ldd	r25, Y+3	; 0x03
    2042:	89 0f       	add	r24, r25
    2044:	89 83       	std	Y+1, r24	; 0x01
        LCD_voidSendCommand(Local_u8Address);
    2046:	89 81       	ldd	r24, Y+1	; 0x01
    2048:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <LCD_voidSendCommand>
    204c:	0b c0       	rjmp	.+22     	; 0x2064 <LCD_voidSetPosition+0x40>
    }
    else if(Copy_u8PosX == 1)
    204e:	8a 81       	ldd	r24, Y+2	; 0x02
    2050:	81 30       	cpi	r24, 0x01	; 1
    2052:	41 f4       	brne	.+16     	; 0x2064 <LCD_voidSetPosition+0x40>
    {
        Local_u8Address += (64 + Copy_u8PosY);
    2054:	9b 81       	ldd	r25, Y+3	; 0x03
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	89 0f       	add	r24, r25
    205a:	80 5c       	subi	r24, 0xC0	; 192
    205c:	89 83       	std	Y+1, r24	; 0x01
        LCD_voidSendCommand(Local_u8Address);
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <LCD_voidSendCommand>
    }
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	cf 91       	pop	r28
    206c:	df 91       	pop	r29
    206e:	08 95       	ret

00002070 <main>:

#define F_CPU		8000000UL
#include <util/delay.h>

void main(void)
{
    2070:	df 93       	push	r29
    2072:	cf 93       	push	r28
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	6c 97       	sbiw	r28, 0x1c	; 28
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	f8 94       	cli
    207e:	de bf       	out	0x3e, r29	; 62
    2080:	0f be       	out	0x3f, r0	; 63
    2082:	cd bf       	out	0x3d, r28	; 61

	LCD_voidInit();
    2084:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <LCD_voidInit>
	//LCD_voidInit(&LCD2);


	while(1)
	{
		LCD_voidSetPosition(0, 0);
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	60 e0       	ldi	r22, 0x00	; 0
    208c:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSetPosition>
		LCD_voidSendChar('H');
    2090:	88 e4       	ldi	r24, 0x48	; 72
    2092:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <LCD_voidSendChar>
		LCD_voidSetPosition(1, 2);
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	62 e0       	ldi	r22, 0x02	; 2
    209a:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSetPosition>
		LCD_voidSendChar('O');
    209e:	8f e4       	ldi	r24, 0x4F	; 79
    20a0:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <LCD_voidSendChar>
		LCD_voidSetPosition(0, 4);
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	64 e0       	ldi	r22, 0x04	; 4
    20a8:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSetPosition>
		LCD_voidSendChar('S');
    20ac:	83 e5       	ldi	r24, 0x53	; 83
    20ae:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <LCD_voidSendChar>
		LCD_voidSetPosition(1, 6);
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	66 e0       	ldi	r22, 0x06	; 6
    20b6:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSetPosition>
		LCD_voidSendChar('S');
    20ba:	83 e5       	ldi	r24, 0x53	; 83
    20bc:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <LCD_voidSendChar>
		LCD_voidSetPosition(0, 8);
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	68 e0       	ldi	r22, 0x08	; 8
    20c4:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSetPosition>
		LCD_voidSendChar('A');
    20c8:	81 e4       	ldi	r24, 0x41	; 65
    20ca:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <LCD_voidSendChar>
		LCD_voidSetPosition(1, 10);
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	6a e0       	ldi	r22, 0x0A	; 10
    20d2:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSetPosition>
		LCD_voidSendChar('M');
    20d6:	8d e4       	ldi	r24, 0x4D	; 77
    20d8:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <LCD_voidSendChar>
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	a8 e4       	ldi	r26, 0x48	; 72
    20e2:	b3 e4       	ldi	r27, 0x43	; 67
    20e4:	89 8f       	std	Y+25, r24	; 0x19
    20e6:	9a 8f       	std	Y+26, r25	; 0x1a
    20e8:	ab 8f       	std	Y+27, r26	; 0x1b
    20ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ec:	69 8d       	ldd	r22, Y+25	; 0x19
    20ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	4a ef       	ldi	r20, 0xFA	; 250
    20fa:	54 e4       	ldi	r21, 0x44	; 68
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	8d 8b       	std	Y+21, r24	; 0x15
    2106:	9e 8b       	std	Y+22, r25	; 0x16
    2108:	af 8b       	std	Y+23, r26	; 0x17
    210a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    210c:	6d 89       	ldd	r22, Y+21	; 0x15
    210e:	7e 89       	ldd	r23, Y+22	; 0x16
    2110:	8f 89       	ldd	r24, Y+23	; 0x17
    2112:	98 8d       	ldd	r25, Y+24	; 0x18
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e8       	ldi	r20, 0x80	; 128
    211a:	5f e3       	ldi	r21, 0x3F	; 63
    211c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2120:	88 23       	and	r24, r24
    2122:	2c f4       	brge	.+10     	; 0x212e <main+0xbe>
		__ticks = 1;
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	9c 8b       	std	Y+20, r25	; 0x14
    212a:	8b 8b       	std	Y+19, r24	; 0x13
    212c:	3f c0       	rjmp	.+126    	; 0x21ac <main+0x13c>
	else if (__tmp > 65535)
    212e:	6d 89       	ldd	r22, Y+21	; 0x15
    2130:	7e 89       	ldd	r23, Y+22	; 0x16
    2132:	8f 89       	ldd	r24, Y+23	; 0x17
    2134:	98 8d       	ldd	r25, Y+24	; 0x18
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	3f ef       	ldi	r19, 0xFF	; 255
    213a:	4f e7       	ldi	r20, 0x7F	; 127
    213c:	57 e4       	ldi	r21, 0x47	; 71
    213e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2142:	18 16       	cp	r1, r24
    2144:	4c f5       	brge	.+82     	; 0x2198 <main+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2146:	69 8d       	ldd	r22, Y+25	; 0x19
    2148:	7a 8d       	ldd	r23, Y+26	; 0x1a
    214a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    214c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e2       	ldi	r20, 0x20	; 32
    2154:	51 e4       	ldi	r21, 0x41	; 65
    2156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	bc 01       	movw	r22, r24
    2160:	cd 01       	movw	r24, r26
    2162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	9c 8b       	std	Y+20, r25	; 0x14
    216c:	8b 8b       	std	Y+19, r24	; 0x13
    216e:	0f c0       	rjmp	.+30     	; 0x218e <main+0x11e>
    2170:	88 ec       	ldi	r24, 0xC8	; 200
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	9a 8b       	std	Y+18, r25	; 0x12
    2176:	89 8b       	std	Y+17, r24	; 0x11
    2178:	89 89       	ldd	r24, Y+17	; 0x11
    217a:	9a 89       	ldd	r25, Y+18	; 0x12
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	f1 f7       	brne	.-4      	; 0x217c <main+0x10c>
    2180:	9a 8b       	std	Y+18, r25	; 0x12
    2182:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2184:	8b 89       	ldd	r24, Y+19	; 0x13
    2186:	9c 89       	ldd	r25, Y+20	; 0x14
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	9c 8b       	std	Y+20, r25	; 0x14
    218c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218e:	8b 89       	ldd	r24, Y+19	; 0x13
    2190:	9c 89       	ldd	r25, Y+20	; 0x14
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	69 f7       	brne	.-38     	; 0x2170 <main+0x100>
    2196:	14 c0       	rjmp	.+40     	; 0x21c0 <main+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2198:	6d 89       	ldd	r22, Y+21	; 0x15
    219a:	7e 89       	ldd	r23, Y+22	; 0x16
    219c:	8f 89       	ldd	r24, Y+23	; 0x17
    219e:	98 8d       	ldd	r25, Y+24	; 0x18
    21a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	9c 8b       	std	Y+20, r25	; 0x14
    21aa:	8b 8b       	std	Y+19, r24	; 0x13
    21ac:	8b 89       	ldd	r24, Y+19	; 0x13
    21ae:	9c 89       	ldd	r25, Y+20	; 0x14
    21b0:	98 8b       	std	Y+16, r25	; 0x10
    21b2:	8f 87       	std	Y+15, r24	; 0x0f
    21b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    21b6:	98 89       	ldd	r25, Y+16	; 0x10
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	f1 f7       	brne	.-4      	; 0x21b8 <main+0x148>
    21bc:	98 8b       	std	Y+16, r25	; 0x10
    21be:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		LCD_voidClearDispaly();
    21c0:	0e 94 08 10 	call	0x2010	; 0x2010 <LCD_voidClearDispaly>
		LCD_voidSetPosition(1, 0);
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	60 e0       	ldi	r22, 0x00	; 0
    21c8:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSetPosition>
		LCD_voidSendChar('H');
    21cc:	88 e4       	ldi	r24, 0x48	; 72
    21ce:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <LCD_voidSendChar>
		LCD_voidSetPosition(0, 2);
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	62 e0       	ldi	r22, 0x02	; 2
    21d6:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSetPosition>
		LCD_voidSendChar('O');
    21da:	8f e4       	ldi	r24, 0x4F	; 79
    21dc:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <LCD_voidSendChar>
		LCD_voidSetPosition(1, 4);
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	64 e0       	ldi	r22, 0x04	; 4
    21e4:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSetPosition>
		LCD_voidSendChar('S');
    21e8:	83 e5       	ldi	r24, 0x53	; 83
    21ea:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <LCD_voidSendChar>
		LCD_voidSetPosition(0, 6);
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	66 e0       	ldi	r22, 0x06	; 6
    21f2:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSetPosition>
		LCD_voidSendChar('S');
    21f6:	83 e5       	ldi	r24, 0x53	; 83
    21f8:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <LCD_voidSendChar>
		LCD_voidSetPosition(1, 8);
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	68 e0       	ldi	r22, 0x08	; 8
    2200:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSetPosition>
		LCD_voidSendChar('A');
    2204:	81 e4       	ldi	r24, 0x41	; 65
    2206:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <LCD_voidSendChar>
		LCD_voidSetPosition(0, 10);
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	6a e0       	ldi	r22, 0x0A	; 10
    220e:	0e 94 12 10 	call	0x2024	; 0x2024 <LCD_voidSetPosition>
		LCD_voidSendChar('M');
    2212:	8d e4       	ldi	r24, 0x4D	; 77
    2214:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <LCD_voidSendChar>
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	a8 e4       	ldi	r26, 0x48	; 72
    221e:	b3 e4       	ldi	r27, 0x43	; 67
    2220:	8b 87       	std	Y+11, r24	; 0x0b
    2222:	9c 87       	std	Y+12, r25	; 0x0c
    2224:	ad 87       	std	Y+13, r26	; 0x0d
    2226:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2228:	6b 85       	ldd	r22, Y+11	; 0x0b
    222a:	7c 85       	ldd	r23, Y+12	; 0x0c
    222c:	8d 85       	ldd	r24, Y+13	; 0x0d
    222e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	4a ef       	ldi	r20, 0xFA	; 250
    2236:	54 e4       	ldi	r21, 0x44	; 68
    2238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	8f 83       	std	Y+7, r24	; 0x07
    2242:	98 87       	std	Y+8, r25	; 0x08
    2244:	a9 87       	std	Y+9, r26	; 0x09
    2246:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2248:	6f 81       	ldd	r22, Y+7	; 0x07
    224a:	78 85       	ldd	r23, Y+8	; 0x08
    224c:	89 85       	ldd	r24, Y+9	; 0x09
    224e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	40 e8       	ldi	r20, 0x80	; 128
    2256:	5f e3       	ldi	r21, 0x3F	; 63
    2258:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    225c:	88 23       	and	r24, r24
    225e:	2c f4       	brge	.+10     	; 0x226a <main+0x1fa>
		__ticks = 1;
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	9e 83       	std	Y+6, r25	; 0x06
    2266:	8d 83       	std	Y+5, r24	; 0x05
    2268:	3f c0       	rjmp	.+126    	; 0x22e8 <main+0x278>
	else if (__tmp > 65535)
    226a:	6f 81       	ldd	r22, Y+7	; 0x07
    226c:	78 85       	ldd	r23, Y+8	; 0x08
    226e:	89 85       	ldd	r24, Y+9	; 0x09
    2270:	9a 85       	ldd	r25, Y+10	; 0x0a
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	3f ef       	ldi	r19, 0xFF	; 255
    2276:	4f e7       	ldi	r20, 0x7F	; 127
    2278:	57 e4       	ldi	r21, 0x47	; 71
    227a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    227e:	18 16       	cp	r1, r24
    2280:	4c f5       	brge	.+82     	; 0x22d4 <main+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2282:	6b 85       	ldd	r22, Y+11	; 0x0b
    2284:	7c 85       	ldd	r23, Y+12	; 0x0c
    2286:	8d 85       	ldd	r24, Y+13	; 0x0d
    2288:	9e 85       	ldd	r25, Y+14	; 0x0e
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	40 e2       	ldi	r20, 0x20	; 32
    2290:	51 e4       	ldi	r21, 0x41	; 65
    2292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	bc 01       	movw	r22, r24
    229c:	cd 01       	movw	r24, r26
    229e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	9e 83       	std	Y+6, r25	; 0x06
    22a8:	8d 83       	std	Y+5, r24	; 0x05
    22aa:	0f c0       	rjmp	.+30     	; 0x22ca <main+0x25a>
    22ac:	88 ec       	ldi	r24, 0xC8	; 200
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	9c 83       	std	Y+4, r25	; 0x04
    22b2:	8b 83       	std	Y+3, r24	; 0x03
    22b4:	8b 81       	ldd	r24, Y+3	; 0x03
    22b6:	9c 81       	ldd	r25, Y+4	; 0x04
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	f1 f7       	brne	.-4      	; 0x22b8 <main+0x248>
    22bc:	9c 83       	std	Y+4, r25	; 0x04
    22be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c0:	8d 81       	ldd	r24, Y+5	; 0x05
    22c2:	9e 81       	ldd	r25, Y+6	; 0x06
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	9e 83       	std	Y+6, r25	; 0x06
    22c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ca:	8d 81       	ldd	r24, Y+5	; 0x05
    22cc:	9e 81       	ldd	r25, Y+6	; 0x06
    22ce:	00 97       	sbiw	r24, 0x00	; 0
    22d0:	69 f7       	brne	.-38     	; 0x22ac <main+0x23c>
    22d2:	14 c0       	rjmp	.+40     	; 0x22fc <main+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d4:	6f 81       	ldd	r22, Y+7	; 0x07
    22d6:	78 85       	ldd	r23, Y+8	; 0x08
    22d8:	89 85       	ldd	r24, Y+9	; 0x09
    22da:	9a 85       	ldd	r25, Y+10	; 0x0a
    22dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	9e 83       	std	Y+6, r25	; 0x06
    22e6:	8d 83       	std	Y+5, r24	; 0x05
    22e8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ea:	9e 81       	ldd	r25, Y+6	; 0x06
    22ec:	9a 83       	std	Y+2, r25	; 0x02
    22ee:	89 83       	std	Y+1, r24	; 0x01
    22f0:	89 81       	ldd	r24, Y+1	; 0x01
    22f2:	9a 81       	ldd	r25, Y+2	; 0x02
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	f1 f7       	brne	.-4      	; 0x22f4 <main+0x284>
    22f8:	9a 83       	std	Y+2, r25	; 0x02
    22fa:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		LCD_voidClearDispaly();
    22fc:	0e 94 08 10 	call	0x2010	; 0x2010 <LCD_voidClearDispaly>
    2300:	c3 ce       	rjmp	.-634    	; 0x2088 <main+0x18>

00002302 <__prologue_saves__>:
    2302:	2f 92       	push	r2
    2304:	3f 92       	push	r3
    2306:	4f 92       	push	r4
    2308:	5f 92       	push	r5
    230a:	6f 92       	push	r6
    230c:	7f 92       	push	r7
    230e:	8f 92       	push	r8
    2310:	9f 92       	push	r9
    2312:	af 92       	push	r10
    2314:	bf 92       	push	r11
    2316:	cf 92       	push	r12
    2318:	df 92       	push	r13
    231a:	ef 92       	push	r14
    231c:	ff 92       	push	r15
    231e:	0f 93       	push	r16
    2320:	1f 93       	push	r17
    2322:	cf 93       	push	r28
    2324:	df 93       	push	r29
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	ca 1b       	sub	r28, r26
    232c:	db 0b       	sbc	r29, r27
    232e:	0f b6       	in	r0, 0x3f	; 63
    2330:	f8 94       	cli
    2332:	de bf       	out	0x3e, r29	; 62
    2334:	0f be       	out	0x3f, r0	; 63
    2336:	cd bf       	out	0x3d, r28	; 61
    2338:	09 94       	ijmp

0000233a <__epilogue_restores__>:
    233a:	2a 88       	ldd	r2, Y+18	; 0x12
    233c:	39 88       	ldd	r3, Y+17	; 0x11
    233e:	48 88       	ldd	r4, Y+16	; 0x10
    2340:	5f 84       	ldd	r5, Y+15	; 0x0f
    2342:	6e 84       	ldd	r6, Y+14	; 0x0e
    2344:	7d 84       	ldd	r7, Y+13	; 0x0d
    2346:	8c 84       	ldd	r8, Y+12	; 0x0c
    2348:	9b 84       	ldd	r9, Y+11	; 0x0b
    234a:	aa 84       	ldd	r10, Y+10	; 0x0a
    234c:	b9 84       	ldd	r11, Y+9	; 0x09
    234e:	c8 84       	ldd	r12, Y+8	; 0x08
    2350:	df 80       	ldd	r13, Y+7	; 0x07
    2352:	ee 80       	ldd	r14, Y+6	; 0x06
    2354:	fd 80       	ldd	r15, Y+5	; 0x05
    2356:	0c 81       	ldd	r16, Y+4	; 0x04
    2358:	1b 81       	ldd	r17, Y+3	; 0x03
    235a:	aa 81       	ldd	r26, Y+2	; 0x02
    235c:	b9 81       	ldd	r27, Y+1	; 0x01
    235e:	ce 0f       	add	r28, r30
    2360:	d1 1d       	adc	r29, r1
    2362:	0f b6       	in	r0, 0x3f	; 63
    2364:	f8 94       	cli
    2366:	de bf       	out	0x3e, r29	; 62
    2368:	0f be       	out	0x3f, r0	; 63
    236a:	cd bf       	out	0x3d, r28	; 61
    236c:	ed 01       	movw	r28, r26
    236e:	08 95       	ret

00002370 <_exit>:
    2370:	f8 94       	cli

00002372 <__stop_program>:
    2372:	ff cf       	rjmp	.-2      	; 0x2372 <__stop_program>
