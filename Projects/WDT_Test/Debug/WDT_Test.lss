
WDT_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002caa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002caa  00002d3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800068  00800068  00002d46  2**0
                  ALLOC
  3 .stab         000029a0  00000000  00000000  00002d48  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015aa  00000000  00000000  000056e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006c92  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00006f81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a0c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b04c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b1cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b48e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bd1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 7a 11 	jmp	0x22f4	; 0x22f4 <__vector_1>
       8:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__vector_2>
       c:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 66 0e 	jmp	0x1ccc	; 0x1ccc <__vector_7>
      20:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <__vector_8>
      24:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__vector_9>
      28:	0c 94 64 0f 	jmp	0x1ec8	; 0x1ec8 <__vector_10>
      2c:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 37       	cpi	r26, 0x7E	; 126
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea ea       	ldi	r30, 0xAA	; 170
      78:	fc e2       	ldi	r31, 0x2C	; 44
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 4f 06 	call	0xc9e	; 0xc9e <main>
      8a:	0c 94 53 16 	jmp	0x2ca6	; 0x2ca6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 38 16 	jmp	0x2c70	; 0x2c70 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 28 16 	jmp	0x2c50	; 0x2c50 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 44 16 	jmp	0x2c88	; 0x2c88 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 28 16 	jmp	0x2c50	; 0x2c50 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 44 16 	jmp	0x2c88	; 0x2c88 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 38 16 	jmp	0x2c70	; 0x2c70 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 24 16 	jmp	0x2c48	; 0x2c48 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 40 16 	jmp	0x2c80	; 0x2c80 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 28 16 	jmp	0x2c50	; 0x2c50 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 44 16 	jmp	0x2c88	; 0x2c88 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 28 16 	jmp	0x2c50	; 0x2c50 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 44 16 	jmp	0x2c88	; 0x2c88 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 28 16 	jmp	0x2c50	; 0x2c50 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 44 16 	jmp	0x2c88	; 0x2c88 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 2c 16 	jmp	0x2c58	; 0x2c58 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 48 16 	jmp	0x2c90	; 0x2c90 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <main>:
#include "../02-MCAL/01-DIO/DIO.h"



void main(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	2e 97       	sbiw	r28, 0x0e	; 14
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinDirection(DIO_PORTA, DIO_PIN0, DIO_OUTPUT);
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	41 e0       	ldi	r20, 0x01	; 1
     cb8:	0e 94 13 12 	call	0x2426	; 0x2426 <DIO_voidSetPinDirection>

	WDT_voidSleep(WDT_SLEEP_0_52_S);
     cbc:	85 e0       	ldi	r24, 0x05	; 5
     cbe:	0e 94 37 0c 	call	0x186e	; 0x186e <WDT_voidSleep>
	WDT_voidEnable();
     cc2:	0e 94 29 0c 	call	0x1852	; 0x1852 <WDT_voidEnable>
	DIO_voidSetPinValue(DIO_PORTA, DIO_PIN0, DIO_HIGH);
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	41 e0       	ldi	r20, 0x01	; 1
     ccc:	0e 94 13 13 	call	0x2626	; 0x2626 <DIO_voidSetPinValue>
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	a8 e4       	ldi	r26, 0x48	; 72
     cd6:	b3 e4       	ldi	r27, 0x43	; 67
     cd8:	8b 87       	std	Y+11, r24	; 0x0b
     cda:	9c 87       	std	Y+12, r25	; 0x0c
     cdc:	ad 87       	std	Y+13, r26	; 0x0d
     cde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ce0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ce2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ce4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ce6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	4a ef       	ldi	r20, 0xFA	; 250
     cee:	54 e4       	ldi	r21, 0x44	; 68
     cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cf4:	dc 01       	movw	r26, r24
     cf6:	cb 01       	movw	r24, r22
     cf8:	8f 83       	std	Y+7, r24	; 0x07
     cfa:	98 87       	std	Y+8, r25	; 0x08
     cfc:	a9 87       	std	Y+9, r26	; 0x09
     cfe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d00:	6f 81       	ldd	r22, Y+7	; 0x07
     d02:	78 85       	ldd	r23, Y+8	; 0x08
     d04:	89 85       	ldd	r24, Y+9	; 0x09
     d06:	9a 85       	ldd	r25, Y+10	; 0x0a
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	40 e8       	ldi	r20, 0x80	; 128
     d0e:	5f e3       	ldi	r21, 0x3F	; 63
     d10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d14:	88 23       	and	r24, r24
     d16:	2c f4       	brge	.+10     	; 0xd22 <main+0x84>
		__ticks = 1;
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	9e 83       	std	Y+6, r25	; 0x06
     d1e:	8d 83       	std	Y+5, r24	; 0x05
     d20:	3f c0       	rjmp	.+126    	; 0xda0 <main+0x102>
	else if (__tmp > 65535)
     d22:	6f 81       	ldd	r22, Y+7	; 0x07
     d24:	78 85       	ldd	r23, Y+8	; 0x08
     d26:	89 85       	ldd	r24, Y+9	; 0x09
     d28:	9a 85       	ldd	r25, Y+10	; 0x0a
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	3f ef       	ldi	r19, 0xFF	; 255
     d2e:	4f e7       	ldi	r20, 0x7F	; 127
     d30:	57 e4       	ldi	r21, 0x47	; 71
     d32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d36:	18 16       	cp	r1, r24
     d38:	4c f5       	brge	.+82     	; 0xd8c <main+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d3a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d3c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d3e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d40:	9e 85       	ldd	r25, Y+14	; 0x0e
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	40 e2       	ldi	r20, 0x20	; 32
     d48:	51 e4       	ldi	r21, 0x41	; 65
     d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d4e:	dc 01       	movw	r26, r24
     d50:	cb 01       	movw	r24, r22
     d52:	bc 01       	movw	r22, r24
     d54:	cd 01       	movw	r24, r26
     d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d5a:	dc 01       	movw	r26, r24
     d5c:	cb 01       	movw	r24, r22
     d5e:	9e 83       	std	Y+6, r25	; 0x06
     d60:	8d 83       	std	Y+5, r24	; 0x05
     d62:	0f c0       	rjmp	.+30     	; 0xd82 <main+0xe4>
     d64:	88 ec       	ldi	r24, 0xC8	; 200
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	9c 83       	std	Y+4, r25	; 0x04
     d6a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	9c 81       	ldd	r25, Y+4	; 0x04
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	f1 f7       	brne	.-4      	; 0xd70 <main+0xd2>
     d74:	9c 83       	std	Y+4, r25	; 0x04
     d76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d78:	8d 81       	ldd	r24, Y+5	; 0x05
     d7a:	9e 81       	ldd	r25, Y+6	; 0x06
     d7c:	01 97       	sbiw	r24, 0x01	; 1
     d7e:	9e 83       	std	Y+6, r25	; 0x06
     d80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d82:	8d 81       	ldd	r24, Y+5	; 0x05
     d84:	9e 81       	ldd	r25, Y+6	; 0x06
     d86:	00 97       	sbiw	r24, 0x00	; 0
     d88:	69 f7       	brne	.-38     	; 0xd64 <main+0xc6>
     d8a:	14 c0       	rjmp	.+40     	; 0xdb4 <main+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d8c:	6f 81       	ldd	r22, Y+7	; 0x07
     d8e:	78 85       	ldd	r23, Y+8	; 0x08
     d90:	89 85       	ldd	r24, Y+9	; 0x09
     d92:	9a 85       	ldd	r25, Y+10	; 0x0a
     d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	9e 83       	std	Y+6, r25	; 0x06
     d9e:	8d 83       	std	Y+5, r24	; 0x05
     da0:	8d 81       	ldd	r24, Y+5	; 0x05
     da2:	9e 81       	ldd	r25, Y+6	; 0x06
     da4:	9a 83       	std	Y+2, r25	; 0x02
     da6:	89 83       	std	Y+1, r24	; 0x01
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	9a 81       	ldd	r25, Y+2	; 0x02
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	f1 f7       	brne	.-4      	; 0xdac <main+0x10e>
     db0:	9a 83       	std	Y+2, r25	; 0x02
     db2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	DIO_voidSetPinValue(DIO_PORTA, DIO_PIN0, DIO_LOW);
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	40 e0       	ldi	r20, 0x00	; 0
     dba:	0e 94 13 13 	call	0x2626	; 0x2626 <DIO_voidSetPinValue>
	WDT_voidDisable();
     dbe:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <WDT_voidDisable>
     dc2:	ff cf       	rjmp	.-2      	; 0xdc2 <main+0x124>

00000dc4 <LCD_voidSendCommand>:
#include "LCD.h"

#include <util/delay.h>

void LCD_voidSendCommand (u8 Copy_U8Command)
{
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	2f 97       	sbiw	r28, 0x0f	; 15
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue	(LCD_CONTROL_PORT , RS , DIO_LOW);
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	40 e0       	ldi	r20, 0x00	; 0
     de0:	0e 94 13 13 	call	0x2626	; 0x2626 <DIO_voidSetPinValue>
	DIO_voidSetPinValue	(LCD_CONTROL_PORT , RW , DIO_LOW);
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	61 e0       	ldi	r22, 0x01	; 1
     de8:	40 e0       	ldi	r20, 0x00	; 0
     dea:	0e 94 13 13 	call	0x2626	; 0x2626 <DIO_voidSetPinValue>
	DIO_voidSetPortValue	(LCD_DATA_PORT , Copy_U8Command);
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	6f 85       	ldd	r22, Y+15	; 0x0f
     df2:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <DIO_voidSetPortValue>
	DIO_voidSetPinValue	(LCD_CONTROL_PORT , EN , DIO_HIGH);
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	62 e0       	ldi	r22, 0x02	; 2
     dfa:	41 e0       	ldi	r20, 0x01	; 1
     dfc:	0e 94 13 13 	call	0x2626	; 0x2626 <DIO_voidSetPinValue>
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	a0 e0       	ldi	r26, 0x00	; 0
     e06:	b0 e4       	ldi	r27, 0x40	; 64
     e08:	8b 87       	std	Y+11, r24	; 0x0b
     e0a:	9c 87       	std	Y+12, r25	; 0x0c
     e0c:	ad 87       	std	Y+13, r26	; 0x0d
     e0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e10:	6b 85       	ldd	r22, Y+11	; 0x0b
     e12:	7c 85       	ldd	r23, Y+12	; 0x0c
     e14:	8d 85       	ldd	r24, Y+13	; 0x0d
     e16:	9e 85       	ldd	r25, Y+14	; 0x0e
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	4a ef       	ldi	r20, 0xFA	; 250
     e1e:	54 e4       	ldi	r21, 0x44	; 68
     e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	8f 83       	std	Y+7, r24	; 0x07
     e2a:	98 87       	std	Y+8, r25	; 0x08
     e2c:	a9 87       	std	Y+9, r26	; 0x09
     e2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e30:	6f 81       	ldd	r22, Y+7	; 0x07
     e32:	78 85       	ldd	r23, Y+8	; 0x08
     e34:	89 85       	ldd	r24, Y+9	; 0x09
     e36:	9a 85       	ldd	r25, Y+10	; 0x0a
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e8       	ldi	r20, 0x80	; 128
     e3e:	5f e3       	ldi	r21, 0x3F	; 63
     e40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e44:	88 23       	and	r24, r24
     e46:	2c f4       	brge	.+10     	; 0xe52 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9e 83       	std	Y+6, r25	; 0x06
     e4e:	8d 83       	std	Y+5, r24	; 0x05
     e50:	3f c0       	rjmp	.+126    	; 0xed0 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     e52:	6f 81       	ldd	r22, Y+7	; 0x07
     e54:	78 85       	ldd	r23, Y+8	; 0x08
     e56:	89 85       	ldd	r24, Y+9	; 0x09
     e58:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	3f ef       	ldi	r19, 0xFF	; 255
     e5e:	4f e7       	ldi	r20, 0x7F	; 127
     e60:	57 e4       	ldi	r21, 0x47	; 71
     e62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e66:	18 16       	cp	r1, r24
     e68:	4c f5       	brge	.+82     	; 0xebc <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e70:	9e 85       	ldd	r25, Y+14	; 0x0e
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e2       	ldi	r20, 0x20	; 32
     e78:	51 e4       	ldi	r21, 0x41	; 65
     e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	bc 01       	movw	r22, r24
     e84:	cd 01       	movw	r24, r26
     e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	9e 83       	std	Y+6, r25	; 0x06
     e90:	8d 83       	std	Y+5, r24	; 0x05
     e92:	0f c0       	rjmp	.+30     	; 0xeb2 <LCD_voidSendCommand+0xee>
     e94:	88 ec       	ldi	r24, 0xC8	; 200
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	9c 83       	std	Y+4, r25	; 0x04
     e9a:	8b 83       	std	Y+3, r24	; 0x03
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <LCD_voidSendCommand+0xdc>
     ea4:	9c 83       	std	Y+4, r25	; 0x04
     ea6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	9e 81       	ldd	r25, Y+6	; 0x06
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	9e 83       	std	Y+6, r25	; 0x06
     eb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	69 f7       	brne	.-38     	; 0xe94 <LCD_voidSendCommand+0xd0>
     eba:	14 c0       	rjmp	.+40     	; 0xee4 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ebc:	6f 81       	ldd	r22, Y+7	; 0x07
     ebe:	78 85       	ldd	r23, Y+8	; 0x08
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	9e 83       	std	Y+6, r25	; 0x06
     ece:	8d 83       	std	Y+5, r24	; 0x05
     ed0:	8d 81       	ldd	r24, Y+5	; 0x05
     ed2:	9e 81       	ldd	r25, Y+6	; 0x06
     ed4:	9a 83       	std	Y+2, r25	; 0x02
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <LCD_voidSendCommand+0x118>
     ee0:	9a 83       	std	Y+2, r25	; 0x02
     ee2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue	(LCD_CONTROL_PORT , EN , DIO_LOW);
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	62 e0       	ldi	r22, 0x02	; 2
     ee8:	40 e0       	ldi	r20, 0x00	; 0
     eea:	0e 94 13 13 	call	0x2626	; 0x2626 <DIO_voidSetPinValue>
}
     eee:	2f 96       	adiw	r28, 0x0f	; 15
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <LCD_voidSendChar>:


void LCD_voidSendChar    (u8 Copy_U8Char)
{
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	2f 97       	sbiw	r28, 0x0f	; 15
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	cd bf       	out	0x3d, r28	; 61
     f14:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT , RS , DIO_HIGH);
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	60 e0       	ldi	r22, 0x00	; 0
     f1a:	41 e0       	ldi	r20, 0x01	; 1
     f1c:	0e 94 13 13 	call	0x2626	; 0x2626 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT , RW , DIO_LOW);
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	61 e0       	ldi	r22, 0x01	; 1
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	0e 94 13 13 	call	0x2626	; 0x2626 <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DATA_PORT , Copy_U8Char);
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	6f 85       	ldd	r22, Y+15	; 0x0f
     f2e:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <DIO_voidSetPortValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT , EN , DIO_HIGH);
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	62 e0       	ldi	r22, 0x02	; 2
     f36:	41 e0       	ldi	r20, 0x01	; 1
     f38:	0e 94 13 13 	call	0x2626	; 0x2626 <DIO_voidSetPinValue>
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	a0 e0       	ldi	r26, 0x00	; 0
     f42:	b0 e4       	ldi	r27, 0x40	; 64
     f44:	8b 87       	std	Y+11, r24	; 0x0b
     f46:	9c 87       	std	Y+12, r25	; 0x0c
     f48:	ad 87       	std	Y+13, r26	; 0x0d
     f4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f50:	8d 85       	ldd	r24, Y+13	; 0x0d
     f52:	9e 85       	ldd	r25, Y+14	; 0x0e
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	4a ef       	ldi	r20, 0xFA	; 250
     f5a:	54 e4       	ldi	r21, 0x44	; 68
     f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f60:	dc 01       	movw	r26, r24
     f62:	cb 01       	movw	r24, r22
     f64:	8f 83       	std	Y+7, r24	; 0x07
     f66:	98 87       	std	Y+8, r25	; 0x08
     f68:	a9 87       	std	Y+9, r26	; 0x09
     f6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f6c:	6f 81       	ldd	r22, Y+7	; 0x07
     f6e:	78 85       	ldd	r23, Y+8	; 0x08
     f70:	89 85       	ldd	r24, Y+9	; 0x09
     f72:	9a 85       	ldd	r25, Y+10	; 0x0a
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	40 e8       	ldi	r20, 0x80	; 128
     f7a:	5f e3       	ldi	r21, 0x3F	; 63
     f7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f80:	88 23       	and	r24, r24
     f82:	2c f4       	brge	.+10     	; 0xf8e <LCD_voidSendChar+0x8e>
		__ticks = 1;
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	9e 83       	std	Y+6, r25	; 0x06
     f8a:	8d 83       	std	Y+5, r24	; 0x05
     f8c:	3f c0       	rjmp	.+126    	; 0x100c <LCD_voidSendChar+0x10c>
	else if (__tmp > 65535)
     f8e:	6f 81       	ldd	r22, Y+7	; 0x07
     f90:	78 85       	ldd	r23, Y+8	; 0x08
     f92:	89 85       	ldd	r24, Y+9	; 0x09
     f94:	9a 85       	ldd	r25, Y+10	; 0x0a
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	3f ef       	ldi	r19, 0xFF	; 255
     f9a:	4f e7       	ldi	r20, 0x7F	; 127
     f9c:	57 e4       	ldi	r21, 0x47	; 71
     f9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fa2:	18 16       	cp	r1, r24
     fa4:	4c f5       	brge	.+82     	; 0xff8 <LCD_voidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa6:	6b 85       	ldd	r22, Y+11	; 0x0b
     fa8:	7c 85       	ldd	r23, Y+12	; 0x0c
     faa:	8d 85       	ldd	r24, Y+13	; 0x0d
     fac:	9e 85       	ldd	r25, Y+14	; 0x0e
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	40 e2       	ldi	r20, 0x20	; 32
     fb4:	51 e4       	ldi	r21, 0x41	; 65
     fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	bc 01       	movw	r22, r24
     fc0:	cd 01       	movw	r24, r26
     fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	9e 83       	std	Y+6, r25	; 0x06
     fcc:	8d 83       	std	Y+5, r24	; 0x05
     fce:	0f c0       	rjmp	.+30     	; 0xfee <LCD_voidSendChar+0xee>
     fd0:	88 ec       	ldi	r24, 0xC8	; 200
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	9c 83       	std	Y+4, r25	; 0x04
     fd6:	8b 83       	std	Y+3, r24	; 0x03
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	9c 81       	ldd	r25, Y+4	; 0x04
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	f1 f7       	brne	.-4      	; 0xfdc <LCD_voidSendChar+0xdc>
     fe0:	9c 83       	std	Y+4, r25	; 0x04
     fe2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe4:	8d 81       	ldd	r24, Y+5	; 0x05
     fe6:	9e 81       	ldd	r25, Y+6	; 0x06
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	9e 83       	std	Y+6, r25	; 0x06
     fec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fee:	8d 81       	ldd	r24, Y+5	; 0x05
     ff0:	9e 81       	ldd	r25, Y+6	; 0x06
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	69 f7       	brne	.-38     	; 0xfd0 <LCD_voidSendChar+0xd0>
     ff6:	14 c0       	rjmp	.+40     	; 0x1020 <LCD_voidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ff8:	6f 81       	ldd	r22, Y+7	; 0x07
     ffa:	78 85       	ldd	r23, Y+8	; 0x08
     ffc:	89 85       	ldd	r24, Y+9	; 0x09
     ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	9e 83       	std	Y+6, r25	; 0x06
    100a:	8d 83       	std	Y+5, r24	; 0x05
    100c:	8d 81       	ldd	r24, Y+5	; 0x05
    100e:	9e 81       	ldd	r25, Y+6	; 0x06
    1010:	9a 83       	std	Y+2, r25	; 0x02
    1012:	89 83       	std	Y+1, r24	; 0x01
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	9a 81       	ldd	r25, Y+2	; 0x02
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	f1 f7       	brne	.-4      	; 0x1018 <LCD_voidSendChar+0x118>
    101c:	9a 83       	std	Y+2, r25	; 0x02
    101e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT , EN , DIO_LOW);
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	62 e0       	ldi	r22, 0x02	; 2
    1024:	40 e0       	ldi	r20, 0x00	; 0
    1026:	0e 94 13 13 	call	0x2626	; 0x2626 <DIO_voidSetPinValue>
}
    102a:	2f 96       	adiw	r28, 0x0f	; 15
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <LCD_voidSendString>:

void LCD_voidSendString  (u8 *Copy_U8String)
{
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	00 d0       	rcall	.+0      	; 0x1042 <LCD_voidSendString+0x6>
    1042:	0f 92       	push	r0
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	9b 83       	std	Y+3, r25	; 0x03
    104a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8Counter ;
	for (Local_U8Counter = 0 ; Copy_U8String[Local_U8Counter] != '\0' ; Local_U8Counter++)
    104c:	19 82       	std	Y+1, r1	; 0x01
    104e:	0e c0       	rjmp	.+28     	; 0x106c <LCD_voidSendString+0x30>
		LCD_voidSendChar(Copy_U8String[Local_U8Counter]);
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	9b 81       	ldd	r25, Y+3	; 0x03
    105a:	fc 01       	movw	r30, r24
    105c:	e2 0f       	add	r30, r18
    105e:	f3 1f       	adc	r31, r19
    1060:	80 81       	ld	r24, Z
    1062:	0e 94 80 07 	call	0xf00	; 0xf00 <LCD_voidSendChar>
}

void LCD_voidSendString  (u8 *Copy_U8String)
{
	u8 Local_U8Counter ;
	for (Local_U8Counter = 0 ; Copy_U8String[Local_U8Counter] != '\0' ; Local_U8Counter++)
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	8f 5f       	subi	r24, 0xFF	; 255
    106a:	89 83       	std	Y+1, r24	; 0x01
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	9b 81       	ldd	r25, Y+3	; 0x03
    1076:	fc 01       	movw	r30, r24
    1078:	e2 0f       	add	r30, r18
    107a:	f3 1f       	adc	r31, r19
    107c:	80 81       	ld	r24, Z
    107e:	88 23       	and	r24, r24
    1080:	39 f7       	brne	.-50     	; 0x1050 <LCD_voidSendString+0x14>
		LCD_voidSendChar(Copy_U8String[Local_U8Counter]);
}
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <LCD_voidSendNumber>:

void LCD_voidSendNumber(s32 Copy_s32Number)
{
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	29 97       	sbiw	r28, 0x09	; 9
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	de bf       	out	0x3e, r29	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	cd bf       	out	0x3d, r28	; 61
    10a2:	6e 83       	std	Y+6, r22	; 0x06
    10a4:	7f 83       	std	Y+7, r23	; 0x07
    10a6:	88 87       	std	Y+8, r24	; 0x08
    10a8:	99 87       	std	Y+9, r25	; 0x09
	u32 Local_u32Counter=1 ;
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a0 e0       	ldi	r26, 0x00	; 0
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	8a 83       	std	Y+2, r24	; 0x02
    10b4:	9b 83       	std	Y+3, r25	; 0x03
    10b6:	ac 83       	std	Y+4, r26	; 0x04
    10b8:	bd 83       	std	Y+5, r27	; 0x05
	u8 Local_u32Digit=0 ;
    10ba:	19 82       	std	Y+1, r1	; 0x01

	/* print (-) if the number is negative */
	if(Copy_s32Number < 0)
    10bc:	8e 81       	ldd	r24, Y+6	; 0x06
    10be:	9f 81       	ldd	r25, Y+7	; 0x07
    10c0:	a8 85       	ldd	r26, Y+8	; 0x08
    10c2:	b9 85       	ldd	r27, Y+9	; 0x09
    10c4:	bb 23       	and	r27, r27
    10c6:	94 f4       	brge	.+36     	; 0x10ec <LCD_voidSendNumber+0x5e>
	{
		LCD_voidSendChar('-');
    10c8:	8d e2       	ldi	r24, 0x2D	; 45
    10ca:	0e 94 80 07 	call	0xf00	; 0xf00 <LCD_voidSendChar>
		/* return the number to positive */
		Copy_s32Number = -Copy_s32Number;
    10ce:	8e 81       	ldd	r24, Y+6	; 0x06
    10d0:	9f 81       	ldd	r25, Y+7	; 0x07
    10d2:	a8 85       	ldd	r26, Y+8	; 0x08
    10d4:	b9 85       	ldd	r27, Y+9	; 0x09
    10d6:	b0 95       	com	r27
    10d8:	a0 95       	com	r26
    10da:	90 95       	com	r25
    10dc:	81 95       	neg	r24
    10de:	9f 4f       	sbci	r25, 0xFF	; 255
    10e0:	af 4f       	sbci	r26, 0xFF	; 255
    10e2:	bf 4f       	sbci	r27, 0xFF	; 255
    10e4:	8e 83       	std	Y+6, r24	; 0x06
    10e6:	9f 83       	std	Y+7, r25	; 0x07
    10e8:	a8 87       	std	Y+8, r26	; 0x08
    10ea:	b9 87       	std	Y+9, r27	; 0x09
	}
	if (Copy_s32Number == 0)
    10ec:	8e 81       	ldd	r24, Y+6	; 0x06
    10ee:	9f 81       	ldd	r25, Y+7	; 0x07
    10f0:	a8 85       	ldd	r26, Y+8	; 0x08
    10f2:	b9 85       	ldd	r27, Y+9	; 0x09
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	a1 05       	cpc	r26, r1
    10f8:	b1 05       	cpc	r27, r1
    10fa:	b1 f4       	brne	.+44     	; 0x1128 <LCD_voidSendNumber+0x9a>
		LCD_voidSendChar('0');
    10fc:	80 e3       	ldi	r24, 0x30	; 48
    10fe:	0e 94 80 07 	call	0xf00	; 0xf00 <LCD_voidSendChar>
    1102:	76 c0       	rjmp	.+236    	; 0x11f0 <LCD_voidSendNumber+0x162>
	else
	{
		while (Copy_s32Number/Local_u32Counter != 0)
		{
			Local_u32Counter *= 10;
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	9b 81       	ldd	r25, Y+3	; 0x03
    1108:	ac 81       	ldd	r26, Y+4	; 0x04
    110a:	bd 81       	ldd	r27, Y+5	; 0x05
    110c:	2a e0       	ldi	r18, 0x0A	; 10
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	40 e0       	ldi	r20, 0x00	; 0
    1112:	50 e0       	ldi	r21, 0x00	; 0
    1114:	bc 01       	movw	r22, r24
    1116:	cd 01       	movw	r24, r26
    1118:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <__mulsi3>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	8a 83       	std	Y+2, r24	; 0x02
    1122:	9b 83       	std	Y+3, r25	; 0x03
    1124:	ac 83       	std	Y+4, r26	; 0x04
    1126:	bd 83       	std	Y+5, r27	; 0x05
	}
	if (Copy_s32Number == 0)
		LCD_voidSendChar('0');
	else
	{
		while (Copy_s32Number/Local_u32Counter != 0)
    1128:	8e 81       	ldd	r24, Y+6	; 0x06
    112a:	9f 81       	ldd	r25, Y+7	; 0x07
    112c:	a8 85       	ldd	r26, Y+8	; 0x08
    112e:	b9 85       	ldd	r27, Y+9	; 0x09
    1130:	2a 81       	ldd	r18, Y+2	; 0x02
    1132:	3b 81       	ldd	r19, Y+3	; 0x03
    1134:	4c 81       	ldd	r20, Y+4	; 0x04
    1136:	5d 81       	ldd	r21, Y+5	; 0x05
    1138:	bc 01       	movw	r22, r24
    113a:	cd 01       	movw	r24, r26
    113c:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__udivmodsi4>
    1140:	da 01       	movw	r26, r20
    1142:	c9 01       	movw	r24, r18
    1144:	00 97       	sbiw	r24, 0x00	; 0
    1146:	a1 05       	cpc	r26, r1
    1148:	b1 05       	cpc	r27, r1
    114a:	e1 f6       	brne	.-72     	; 0x1104 <LCD_voidSendNumber+0x76>
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	9b 81       	ldd	r25, Y+3	; 0x03
    1150:	ac 81       	ldd	r26, Y+4	; 0x04
    1152:	bd 81       	ldd	r27, Y+5	; 0x05
    1154:	2a e0       	ldi	r18, 0x0A	; 10
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e0       	ldi	r20, 0x00	; 0
    115a:	50 e0       	ldi	r21, 0x00	; 0
    115c:	bc 01       	movw	r22, r24
    115e:	cd 01       	movw	r24, r26
    1160:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__udivmodsi4>
    1164:	da 01       	movw	r26, r20
    1166:	c9 01       	movw	r24, r18
    1168:	8a 83       	std	Y+2, r24	; 0x02
    116a:	9b 83       	std	Y+3, r25	; 0x03
    116c:	ac 83       	std	Y+4, r26	; 0x04
    116e:	bd 83       	std	Y+5, r27	; 0x05
    1170:	37 c0       	rjmp	.+110    	; 0x11e0 <LCD_voidSendNumber+0x152>

		while (Local_u32Counter != 0)
		{
			Local_u32Digit = Copy_s32Number/Local_u32Counter;
    1172:	8e 81       	ldd	r24, Y+6	; 0x06
    1174:	9f 81       	ldd	r25, Y+7	; 0x07
    1176:	a8 85       	ldd	r26, Y+8	; 0x08
    1178:	b9 85       	ldd	r27, Y+9	; 0x09
    117a:	2a 81       	ldd	r18, Y+2	; 0x02
    117c:	3b 81       	ldd	r19, Y+3	; 0x03
    117e:	4c 81       	ldd	r20, Y+4	; 0x04
    1180:	5d 81       	ldd	r21, Y+5	; 0x05
    1182:	bc 01       	movw	r22, r24
    1184:	cd 01       	movw	r24, r26
    1186:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__udivmodsi4>
    118a:	da 01       	movw	r26, r20
    118c:	c9 01       	movw	r24, r18
    118e:	89 83       	std	Y+1, r24	; 0x01

			LCD_voidSendChar(Local_u32Digit + '0');
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	80 5d       	subi	r24, 0xD0	; 208
    1194:	0e 94 80 07 	call	0xf00	; 0xf00 <LCD_voidSendChar>

			Copy_s32Number = Copy_s32Number%Local_u32Counter;
    1198:	8e 81       	ldd	r24, Y+6	; 0x06
    119a:	9f 81       	ldd	r25, Y+7	; 0x07
    119c:	a8 85       	ldd	r26, Y+8	; 0x08
    119e:	b9 85       	ldd	r27, Y+9	; 0x09
    11a0:	2a 81       	ldd	r18, Y+2	; 0x02
    11a2:	3b 81       	ldd	r19, Y+3	; 0x03
    11a4:	4c 81       	ldd	r20, Y+4	; 0x04
    11a6:	5d 81       	ldd	r21, Y+5	; 0x05
    11a8:	bc 01       	movw	r22, r24
    11aa:	cd 01       	movw	r24, r26
    11ac:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__udivmodsi4>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	8e 83       	std	Y+6, r24	; 0x06
    11b6:	9f 83       	std	Y+7, r25	; 0x07
    11b8:	a8 87       	std	Y+8, r26	; 0x08
    11ba:	b9 87       	std	Y+9, r27	; 0x09

			Local_u32Counter /= 10;
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	9b 81       	ldd	r25, Y+3	; 0x03
    11c0:	ac 81       	ldd	r26, Y+4	; 0x04
    11c2:	bd 81       	ldd	r27, Y+5	; 0x05
    11c4:	2a e0       	ldi	r18, 0x0A	; 10
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e0       	ldi	r20, 0x00	; 0
    11ca:	50 e0       	ldi	r21, 0x00	; 0
    11cc:	bc 01       	movw	r22, r24
    11ce:	cd 01       	movw	r24, r26
    11d0:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__udivmodsi4>
    11d4:	da 01       	movw	r26, r20
    11d6:	c9 01       	movw	r24, r18
    11d8:	8a 83       	std	Y+2, r24	; 0x02
    11da:	9b 83       	std	Y+3, r25	; 0x03
    11dc:	ac 83       	std	Y+4, r26	; 0x04
    11de:	bd 83       	std	Y+5, r27	; 0x05
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;

		while (Local_u32Counter != 0)
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	9b 81       	ldd	r25, Y+3	; 0x03
    11e4:	ac 81       	ldd	r26, Y+4	; 0x04
    11e6:	bd 81       	ldd	r27, Y+5	; 0x05
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	a1 05       	cpc	r26, r1
    11ec:	b1 05       	cpc	r27, r1
    11ee:	09 f6       	brne	.-126    	; 0x1172 <LCD_voidSendNumber+0xe4>
			Copy_s32Number = Copy_s32Number%Local_u32Counter;

			Local_u32Counter /= 10;
		}
	}
}
    11f0:	29 96       	adiw	r28, 0x09	; 9
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <LCD_voidSetLocation>:

void LCD_voidSetLocation (u8 Copy_U8LineNum , u8 Copy_U8CharNum)
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	00 d0       	rcall	.+0      	; 0x1208 <LCD_voidSetLocation+0x6>
    1208:	00 d0       	rcall	.+0      	; 0x120a <LCD_voidSetLocation+0x8>
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_U8LineNum)
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	3c 83       	std	Y+4, r19	; 0x04
    121a:	2b 83       	std	Y+3, r18	; 0x03
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	9c 81       	ldd	r25, Y+4	; 0x04
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	91 05       	cpc	r25, r1
    1224:	31 f0       	breq	.+12     	; 0x1232 <LCD_voidSetLocation+0x30>
    1226:	2b 81       	ldd	r18, Y+3	; 0x03
    1228:	3c 81       	ldd	r19, Y+4	; 0x04
    122a:	22 30       	cpi	r18, 0x02	; 2
    122c:	31 05       	cpc	r19, r1
    122e:	31 f0       	breq	.+12     	; 0x123c <LCD_voidSetLocation+0x3a>
    1230:	09 c0       	rjmp	.+18     	; 0x1244 <LCD_voidSetLocation+0x42>
	{
		case LCD_U8_LINE1 : LCD_voidSendCommand (0x80+Copy_U8CharNum) ; break ;
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	80 58       	subi	r24, 0x80	; 128
    1236:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <LCD_voidSendCommand>
    123a:	04 c0       	rjmp	.+8      	; 0x1244 <LCD_voidSetLocation+0x42>
		
		case LCD_U8_LINE2 : LCD_voidSendCommand (0xc0+Copy_U8CharNum) ; break ;
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	80 54       	subi	r24, 0x40	; 64
    1240:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <LCD_voidSendCommand>
	}
}
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <LCD_voidInit>:

void LCD_voidInit (void )
{
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	e8 97       	sbiw	r28, 0x38	; 56
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	de bf       	out	0x3e, r29	; 62
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	cd bf       	out	0x3d, r28	; 61
	/*Set Data Port Output*/
	DIO_voidSetPortDirection(LCD_DATA_PORT , 0xff);
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	6f ef       	ldi	r22, 0xFF	; 255
    126a:	0e 94 12 15 	call	0x2a24	; 0x2a24 <DIO_voidSetPortDirection>
	
	/*Set Pins of Control Port Output*/
	DIO_voidSetPinDirection(LCD_CONTROL_PORT , RS , DIO_OUTPUT);
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	60 e0       	ldi	r22, 0x00	; 0
    1272:	41 e0       	ldi	r20, 0x01	; 1
    1274:	0e 94 13 12 	call	0x2426	; 0x2426 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT , RW , DIO_OUTPUT);
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	61 e0       	ldi	r22, 0x01	; 1
    127c:	41 e0       	ldi	r20, 0x01	; 1
    127e:	0e 94 13 12 	call	0x2426	; 0x2426 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT , EN , DIO_OUTPUT);
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	62 e0       	ldi	r22, 0x02	; 2
    1286:	41 e0       	ldi	r20, 0x01	; 1
    1288:	0e 94 13 12 	call	0x2426	; 0x2426 <DIO_voidSetPinDirection>
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	ac e0       	ldi	r26, 0x0C	; 12
    1292:	b2 e4       	ldi	r27, 0x42	; 66
    1294:	8d ab       	std	Y+53, r24	; 0x35
    1296:	9e ab       	std	Y+54, r25	; 0x36
    1298:	af ab       	std	Y+55, r26	; 0x37
    129a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    129c:	6d a9       	ldd	r22, Y+53	; 0x35
    129e:	7e a9       	ldd	r23, Y+54	; 0x36
    12a0:	8f a9       	ldd	r24, Y+55	; 0x37
    12a2:	98 ad       	ldd	r25, Y+56	; 0x38
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	4a ef       	ldi	r20, 0xFA	; 250
    12aa:	54 e4       	ldi	r21, 0x44	; 68
    12ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b0:	dc 01       	movw	r26, r24
    12b2:	cb 01       	movw	r24, r22
    12b4:	89 ab       	std	Y+49, r24	; 0x31
    12b6:	9a ab       	std	Y+50, r25	; 0x32
    12b8:	ab ab       	std	Y+51, r26	; 0x33
    12ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12bc:	69 a9       	ldd	r22, Y+49	; 0x31
    12be:	7a a9       	ldd	r23, Y+50	; 0x32
    12c0:	8b a9       	ldd	r24, Y+51	; 0x33
    12c2:	9c a9       	ldd	r25, Y+52	; 0x34
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	40 e8       	ldi	r20, 0x80	; 128
    12ca:	5f e3       	ldi	r21, 0x3F	; 63
    12cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12d0:	88 23       	and	r24, r24
    12d2:	2c f4       	brge	.+10     	; 0x12de <LCD_voidInit+0x8c>
		__ticks = 1;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	98 ab       	std	Y+48, r25	; 0x30
    12da:	8f a7       	std	Y+47, r24	; 0x2f
    12dc:	3f c0       	rjmp	.+126    	; 0x135c <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    12de:	69 a9       	ldd	r22, Y+49	; 0x31
    12e0:	7a a9       	ldd	r23, Y+50	; 0x32
    12e2:	8b a9       	ldd	r24, Y+51	; 0x33
    12e4:	9c a9       	ldd	r25, Y+52	; 0x34
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	3f ef       	ldi	r19, 0xFF	; 255
    12ea:	4f e7       	ldi	r20, 0x7F	; 127
    12ec:	57 e4       	ldi	r21, 0x47	; 71
    12ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12f2:	18 16       	cp	r1, r24
    12f4:	4c f5       	brge	.+82     	; 0x1348 <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f6:	6d a9       	ldd	r22, Y+53	; 0x35
    12f8:	7e a9       	ldd	r23, Y+54	; 0x36
    12fa:	8f a9       	ldd	r24, Y+55	; 0x37
    12fc:	98 ad       	ldd	r25, Y+56	; 0x38
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	40 e2       	ldi	r20, 0x20	; 32
    1304:	51 e4       	ldi	r21, 0x41	; 65
    1306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	bc 01       	movw	r22, r24
    1310:	cd 01       	movw	r24, r26
    1312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	98 ab       	std	Y+48, r25	; 0x30
    131c:	8f a7       	std	Y+47, r24	; 0x2f
    131e:	0f c0       	rjmp	.+30     	; 0x133e <LCD_voidInit+0xec>
    1320:	88 ec       	ldi	r24, 0xC8	; 200
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	9e a7       	std	Y+46, r25	; 0x2e
    1326:	8d a7       	std	Y+45, r24	; 0x2d
    1328:	8d a5       	ldd	r24, Y+45	; 0x2d
    132a:	9e a5       	ldd	r25, Y+46	; 0x2e
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	f1 f7       	brne	.-4      	; 0x132c <LCD_voidInit+0xda>
    1330:	9e a7       	std	Y+46, r25	; 0x2e
    1332:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1334:	8f a5       	ldd	r24, Y+47	; 0x2f
    1336:	98 a9       	ldd	r25, Y+48	; 0x30
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	98 ab       	std	Y+48, r25	; 0x30
    133c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    133e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1340:	98 a9       	ldd	r25, Y+48	; 0x30
    1342:	00 97       	sbiw	r24, 0x00	; 0
    1344:	69 f7       	brne	.-38     	; 0x1320 <LCD_voidInit+0xce>
    1346:	14 c0       	rjmp	.+40     	; 0x1370 <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1348:	69 a9       	ldd	r22, Y+49	; 0x31
    134a:	7a a9       	ldd	r23, Y+50	; 0x32
    134c:	8b a9       	ldd	r24, Y+51	; 0x33
    134e:	9c a9       	ldd	r25, Y+52	; 0x34
    1350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	98 ab       	std	Y+48, r25	; 0x30
    135a:	8f a7       	std	Y+47, r24	; 0x2f
    135c:	8f a5       	ldd	r24, Y+47	; 0x2f
    135e:	98 a9       	ldd	r25, Y+48	; 0x30
    1360:	9c a7       	std	Y+44, r25	; 0x2c
    1362:	8b a7       	std	Y+43, r24	; 0x2b
    1364:	8b a5       	ldd	r24, Y+43	; 0x2b
    1366:	9c a5       	ldd	r25, Y+44	; 0x2c
    1368:	01 97       	sbiw	r24, 0x01	; 1
    136a:	f1 f7       	brne	.-4      	; 0x1368 <LCD_voidInit+0x116>
    136c:	9c a7       	std	Y+44, r25	; 0x2c
    136e:	8b a7       	std	Y+43, r24	; 0x2b
	
	/*Waiting after VDD rises to 4.5V*/
	_delay_ms(35);

	/*Function  Set*/
	LCD_voidSendCommand (LCD_FUNC_SET) ;
    1370:	88 e3       	ldi	r24, 0x38	; 56
    1372:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <LCD_voidSendCommand>
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	a0 e8       	ldi	r26, 0x80	; 128
    137c:	bf e3       	ldi	r27, 0x3F	; 63
    137e:	8f a3       	std	Y+39, r24	; 0x27
    1380:	98 a7       	std	Y+40, r25	; 0x28
    1382:	a9 a7       	std	Y+41, r26	; 0x29
    1384:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1386:	6f a1       	ldd	r22, Y+39	; 0x27
    1388:	78 a5       	ldd	r23, Y+40	; 0x28
    138a:	89 a5       	ldd	r24, Y+41	; 0x29
    138c:	9a a5       	ldd	r25, Y+42	; 0x2a
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	4a ef       	ldi	r20, 0xFA	; 250
    1394:	54 e4       	ldi	r21, 0x44	; 68
    1396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	8b a3       	std	Y+35, r24	; 0x23
    13a0:	9c a3       	std	Y+36, r25	; 0x24
    13a2:	ad a3       	std	Y+37, r26	; 0x25
    13a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13a6:	6b a1       	ldd	r22, Y+35	; 0x23
    13a8:	7c a1       	ldd	r23, Y+36	; 0x24
    13aa:	8d a1       	ldd	r24, Y+37	; 0x25
    13ac:	9e a1       	ldd	r25, Y+38	; 0x26
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	40 e8       	ldi	r20, 0x80	; 128
    13b4:	5f e3       	ldi	r21, 0x3F	; 63
    13b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13ba:	88 23       	and	r24, r24
    13bc:	2c f4       	brge	.+10     	; 0x13c8 <LCD_voidInit+0x176>
		__ticks = 1;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	9a a3       	std	Y+34, r25	; 0x22
    13c4:	89 a3       	std	Y+33, r24	; 0x21
    13c6:	3f c0       	rjmp	.+126    	; 0x1446 <LCD_voidInit+0x1f4>
	else if (__tmp > 65535)
    13c8:	6b a1       	ldd	r22, Y+35	; 0x23
    13ca:	7c a1       	ldd	r23, Y+36	; 0x24
    13cc:	8d a1       	ldd	r24, Y+37	; 0x25
    13ce:	9e a1       	ldd	r25, Y+38	; 0x26
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	3f ef       	ldi	r19, 0xFF	; 255
    13d4:	4f e7       	ldi	r20, 0x7F	; 127
    13d6:	57 e4       	ldi	r21, 0x47	; 71
    13d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13dc:	18 16       	cp	r1, r24
    13de:	4c f5       	brge	.+82     	; 0x1432 <LCD_voidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e0:	6f a1       	ldd	r22, Y+39	; 0x27
    13e2:	78 a5       	ldd	r23, Y+40	; 0x28
    13e4:	89 a5       	ldd	r24, Y+41	; 0x29
    13e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	40 e2       	ldi	r20, 0x20	; 32
    13ee:	51 e4       	ldi	r21, 0x41	; 65
    13f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	bc 01       	movw	r22, r24
    13fa:	cd 01       	movw	r24, r26
    13fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	9a a3       	std	Y+34, r25	; 0x22
    1406:	89 a3       	std	Y+33, r24	; 0x21
    1408:	0f c0       	rjmp	.+30     	; 0x1428 <LCD_voidInit+0x1d6>
    140a:	88 ec       	ldi	r24, 0xC8	; 200
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	98 a3       	std	Y+32, r25	; 0x20
    1410:	8f 8f       	std	Y+31, r24	; 0x1f
    1412:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1414:	98 a1       	ldd	r25, Y+32	; 0x20
    1416:	01 97       	sbiw	r24, 0x01	; 1
    1418:	f1 f7       	brne	.-4      	; 0x1416 <LCD_voidInit+0x1c4>
    141a:	98 a3       	std	Y+32, r25	; 0x20
    141c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    141e:	89 a1       	ldd	r24, Y+33	; 0x21
    1420:	9a a1       	ldd	r25, Y+34	; 0x22
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	9a a3       	std	Y+34, r25	; 0x22
    1426:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1428:	89 a1       	ldd	r24, Y+33	; 0x21
    142a:	9a a1       	ldd	r25, Y+34	; 0x22
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	69 f7       	brne	.-38     	; 0x140a <LCD_voidInit+0x1b8>
    1430:	14 c0       	rjmp	.+40     	; 0x145a <LCD_voidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1432:	6b a1       	ldd	r22, Y+35	; 0x23
    1434:	7c a1       	ldd	r23, Y+36	; 0x24
    1436:	8d a1       	ldd	r24, Y+37	; 0x25
    1438:	9e a1       	ldd	r25, Y+38	; 0x26
    143a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	9a a3       	std	Y+34, r25	; 0x22
    1444:	89 a3       	std	Y+33, r24	; 0x21
    1446:	89 a1       	ldd	r24, Y+33	; 0x21
    1448:	9a a1       	ldd	r25, Y+34	; 0x22
    144a:	9e 8f       	std	Y+30, r25	; 0x1e
    144c:	8d 8f       	std	Y+29, r24	; 0x1d
    144e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1450:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	f1 f7       	brne	.-4      	; 0x1452 <LCD_voidInit+0x200>
    1456:	9e 8f       	std	Y+30, r25	; 0x1e
    1458:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	
	/*ON/OFF Control*/
	LCD_voidSendCommand (LCD_ONOF);
    145a:	8c e0       	ldi	r24, 0x0C	; 12
    145c:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <LCD_voidSendCommand>
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	a0 e8       	ldi	r26, 0x80	; 128
    1466:	bf e3       	ldi	r27, 0x3F	; 63
    1468:	89 8f       	std	Y+25, r24	; 0x19
    146a:	9a 8f       	std	Y+26, r25	; 0x1a
    146c:	ab 8f       	std	Y+27, r26	; 0x1b
    146e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1470:	69 8d       	ldd	r22, Y+25	; 0x19
    1472:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1474:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1476:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	4a ef       	ldi	r20, 0xFA	; 250
    147e:	54 e4       	ldi	r21, 0x44	; 68
    1480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	8d 8b       	std	Y+21, r24	; 0x15
    148a:	9e 8b       	std	Y+22, r25	; 0x16
    148c:	af 8b       	std	Y+23, r26	; 0x17
    148e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1490:	6d 89       	ldd	r22, Y+21	; 0x15
    1492:	7e 89       	ldd	r23, Y+22	; 0x16
    1494:	8f 89       	ldd	r24, Y+23	; 0x17
    1496:	98 8d       	ldd	r25, Y+24	; 0x18
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e8       	ldi	r20, 0x80	; 128
    149e:	5f e3       	ldi	r21, 0x3F	; 63
    14a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14a4:	88 23       	and	r24, r24
    14a6:	2c f4       	brge	.+10     	; 0x14b2 <LCD_voidInit+0x260>
		__ticks = 1;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	9c 8b       	std	Y+20, r25	; 0x14
    14ae:	8b 8b       	std	Y+19, r24	; 0x13
    14b0:	3f c0       	rjmp	.+126    	; 0x1530 <LCD_voidInit+0x2de>
	else if (__tmp > 65535)
    14b2:	6d 89       	ldd	r22, Y+21	; 0x15
    14b4:	7e 89       	ldd	r23, Y+22	; 0x16
    14b6:	8f 89       	ldd	r24, Y+23	; 0x17
    14b8:	98 8d       	ldd	r25, Y+24	; 0x18
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	3f ef       	ldi	r19, 0xFF	; 255
    14be:	4f e7       	ldi	r20, 0x7F	; 127
    14c0:	57 e4       	ldi	r21, 0x47	; 71
    14c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14c6:	18 16       	cp	r1, r24
    14c8:	4c f5       	brge	.+82     	; 0x151c <LCD_voidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ca:	69 8d       	ldd	r22, Y+25	; 0x19
    14cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 e2       	ldi	r20, 0x20	; 32
    14d8:	51 e4       	ldi	r21, 0x41	; 65
    14da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	bc 01       	movw	r22, r24
    14e4:	cd 01       	movw	r24, r26
    14e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	9c 8b       	std	Y+20, r25	; 0x14
    14f0:	8b 8b       	std	Y+19, r24	; 0x13
    14f2:	0f c0       	rjmp	.+30     	; 0x1512 <LCD_voidInit+0x2c0>
    14f4:	88 ec       	ldi	r24, 0xC8	; 200
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	9a 8b       	std	Y+18, r25	; 0x12
    14fa:	89 8b       	std	Y+17, r24	; 0x11
    14fc:	89 89       	ldd	r24, Y+17	; 0x11
    14fe:	9a 89       	ldd	r25, Y+18	; 0x12
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <LCD_voidInit+0x2ae>
    1504:	9a 8b       	std	Y+18, r25	; 0x12
    1506:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1508:	8b 89       	ldd	r24, Y+19	; 0x13
    150a:	9c 89       	ldd	r25, Y+20	; 0x14
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	9c 8b       	std	Y+20, r25	; 0x14
    1510:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1512:	8b 89       	ldd	r24, Y+19	; 0x13
    1514:	9c 89       	ldd	r25, Y+20	; 0x14
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	69 f7       	brne	.-38     	; 0x14f4 <LCD_voidInit+0x2a2>
    151a:	14 c0       	rjmp	.+40     	; 0x1544 <LCD_voidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151c:	6d 89       	ldd	r22, Y+21	; 0x15
    151e:	7e 89       	ldd	r23, Y+22	; 0x16
    1520:	8f 89       	ldd	r24, Y+23	; 0x17
    1522:	98 8d       	ldd	r25, Y+24	; 0x18
    1524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	9c 8b       	std	Y+20, r25	; 0x14
    152e:	8b 8b       	std	Y+19, r24	; 0x13
    1530:	8b 89       	ldd	r24, Y+19	; 0x13
    1532:	9c 89       	ldd	r25, Y+20	; 0x14
    1534:	98 8b       	std	Y+16, r25	; 0x10
    1536:	8f 87       	std	Y+15, r24	; 0x0f
    1538:	8f 85       	ldd	r24, Y+15	; 0x0f
    153a:	98 89       	ldd	r25, Y+16	; 0x10
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <LCD_voidInit+0x2ea>
    1540:	98 8b       	std	Y+16, r25	; 0x10
    1542:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/*Function Clear*/
	LCD_voidSendCommand (LCD_CLEAR);
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <LCD_voidSendCommand>
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	a0 e8       	ldi	r26, 0x80	; 128
    1550:	bf e3       	ldi	r27, 0x3F	; 63
    1552:	8b 87       	std	Y+11, r24	; 0x0b
    1554:	9c 87       	std	Y+12, r25	; 0x0c
    1556:	ad 87       	std	Y+13, r26	; 0x0d
    1558:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    155a:	6b 85       	ldd	r22, Y+11	; 0x0b
    155c:	7c 85       	ldd	r23, Y+12	; 0x0c
    155e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1560:	9e 85       	ldd	r25, Y+14	; 0x0e
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	4a ef       	ldi	r20, 0xFA	; 250
    1568:	54 e4       	ldi	r21, 0x44	; 68
    156a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	8f 83       	std	Y+7, r24	; 0x07
    1574:	98 87       	std	Y+8, r25	; 0x08
    1576:	a9 87       	std	Y+9, r26	; 0x09
    1578:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    157a:	6f 81       	ldd	r22, Y+7	; 0x07
    157c:	78 85       	ldd	r23, Y+8	; 0x08
    157e:	89 85       	ldd	r24, Y+9	; 0x09
    1580:	9a 85       	ldd	r25, Y+10	; 0x0a
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e8       	ldi	r20, 0x80	; 128
    1588:	5f e3       	ldi	r21, 0x3F	; 63
    158a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    158e:	88 23       	and	r24, r24
    1590:	2c f4       	brge	.+10     	; 0x159c <LCD_voidInit+0x34a>
		__ticks = 1;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	9e 83       	std	Y+6, r25	; 0x06
    1598:	8d 83       	std	Y+5, r24	; 0x05
    159a:	3f c0       	rjmp	.+126    	; 0x161a <LCD_voidInit+0x3c8>
	else if (__tmp > 65535)
    159c:	6f 81       	ldd	r22, Y+7	; 0x07
    159e:	78 85       	ldd	r23, Y+8	; 0x08
    15a0:	89 85       	ldd	r24, Y+9	; 0x09
    15a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	3f ef       	ldi	r19, 0xFF	; 255
    15a8:	4f e7       	ldi	r20, 0x7F	; 127
    15aa:	57 e4       	ldi	r21, 0x47	; 71
    15ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15b0:	18 16       	cp	r1, r24
    15b2:	4c f5       	brge	.+82     	; 0x1606 <LCD_voidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e2       	ldi	r20, 0x20	; 32
    15c2:	51 e4       	ldi	r21, 0x41	; 65
    15c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	bc 01       	movw	r22, r24
    15ce:	cd 01       	movw	r24, r26
    15d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	9e 83       	std	Y+6, r25	; 0x06
    15da:	8d 83       	std	Y+5, r24	; 0x05
    15dc:	0f c0       	rjmp	.+30     	; 0x15fc <LCD_voidInit+0x3aa>
    15de:	88 ec       	ldi	r24, 0xC8	; 200
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	9c 83       	std	Y+4, r25	; 0x04
    15e4:	8b 83       	std	Y+3, r24	; 0x03
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	f1 f7       	brne	.-4      	; 0x15ea <LCD_voidInit+0x398>
    15ee:	9c 83       	std	Y+4, r25	; 0x04
    15f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f2:	8d 81       	ldd	r24, Y+5	; 0x05
    15f4:	9e 81       	ldd	r25, Y+6	; 0x06
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	9e 83       	std	Y+6, r25	; 0x06
    15fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fc:	8d 81       	ldd	r24, Y+5	; 0x05
    15fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	69 f7       	brne	.-38     	; 0x15de <LCD_voidInit+0x38c>
    1604:	14 c0       	rjmp	.+40     	; 0x162e <LCD_voidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1606:	6f 81       	ldd	r22, Y+7	; 0x07
    1608:	78 85       	ldd	r23, Y+8	; 0x08
    160a:	89 85       	ldd	r24, Y+9	; 0x09
    160c:	9a 85       	ldd	r25, Y+10	; 0x0a
    160e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	9e 83       	std	Y+6, r25	; 0x06
    1618:	8d 83       	std	Y+5, r24	; 0x05
    161a:	8d 81       	ldd	r24, Y+5	; 0x05
    161c:	9e 81       	ldd	r25, Y+6	; 0x06
    161e:	9a 83       	std	Y+2, r25	; 0x02
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	9a 81       	ldd	r25, Y+2	; 0x02
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	f1 f7       	brne	.-4      	; 0x1626 <LCD_voidInit+0x3d4>
    162a:	9a 83       	std	Y+2, r25	; 0x02
    162c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    162e:	e8 96       	adiw	r28, 0x38	; 56
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	08 95       	ret

00001640 <LCD_voidDrawSpecialChar>:

void LCD_voidDrawSpecialChar (u8 Copy_U8CharAddress , u8 *Copy_U8SpecialChar)
{
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    1648:	6c 97       	sbiw	r28, 0x1c	; 28
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	de bf       	out	0x3e, r29	; 62
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	cd bf       	out	0x3d, r28	; 61
    1654:	8a 8f       	std	Y+26, r24	; 0x1a
    1656:	7c 8f       	std	Y+28, r23	; 0x1c
    1658:	6b 8f       	std	Y+27, r22	; 0x1b
	LCD_voidSendCommand(0b01000000+(Copy_U8CharAddress * 8));
    165a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    165c:	88 2f       	mov	r24, r24
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	08 96       	adiw	r24, 0x08	; 8
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <LCD_voidSendCommand>
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	a0 e2       	ldi	r26, 0x20	; 32
    1678:	b2 e4       	ldi	r27, 0x42	; 66
    167a:	8d 8b       	std	Y+21, r24	; 0x15
    167c:	9e 8b       	std	Y+22, r25	; 0x16
    167e:	af 8b       	std	Y+23, r26	; 0x17
    1680:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1682:	6d 89       	ldd	r22, Y+21	; 0x15
    1684:	7e 89       	ldd	r23, Y+22	; 0x16
    1686:	8f 89       	ldd	r24, Y+23	; 0x17
    1688:	98 8d       	ldd	r25, Y+24	; 0x18
    168a:	2b ea       	ldi	r18, 0xAB	; 171
    168c:	3a ea       	ldi	r19, 0xAA	; 170
    168e:	4a e2       	ldi	r20, 0x2A	; 42
    1690:	50 e4       	ldi	r21, 0x40	; 64
    1692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	89 8b       	std	Y+17, r24	; 0x11
    169c:	9a 8b       	std	Y+18, r25	; 0x12
    169e:	ab 8b       	std	Y+19, r26	; 0x13
    16a0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    16a2:	69 89       	ldd	r22, Y+17	; 0x11
    16a4:	7a 89       	ldd	r23, Y+18	; 0x12
    16a6:	8b 89       	ldd	r24, Y+19	; 0x13
    16a8:	9c 89       	ldd	r25, Y+20	; 0x14
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	40 e8       	ldi	r20, 0x80	; 128
    16b0:	5f e3       	ldi	r21, 0x3F	; 63
    16b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16b6:	88 23       	and	r24, r24
    16b8:	1c f4       	brge	.+6      	; 0x16c0 <LCD_voidDrawSpecialChar+0x80>
		__ticks = 1;
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	88 8b       	std	Y+16, r24	; 0x10
    16be:	91 c0       	rjmp	.+290    	; 0x17e2 <LCD_voidDrawSpecialChar+0x1a2>
	else if (__tmp > 255)
    16c0:	69 89       	ldd	r22, Y+17	; 0x11
    16c2:	7a 89       	ldd	r23, Y+18	; 0x12
    16c4:	8b 89       	ldd	r24, Y+19	; 0x13
    16c6:	9c 89       	ldd	r25, Y+20	; 0x14
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	4f e7       	ldi	r20, 0x7F	; 127
    16ce:	53 e4       	ldi	r21, 0x43	; 67
    16d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16d4:	18 16       	cp	r1, r24
    16d6:	0c f0       	brlt	.+2      	; 0x16da <LCD_voidDrawSpecialChar+0x9a>
    16d8:	7b c0       	rjmp	.+246    	; 0x17d0 <LCD_voidDrawSpecialChar+0x190>
	{
		_delay_ms(__us / 1000.0);
    16da:	6d 89       	ldd	r22, Y+21	; 0x15
    16dc:	7e 89       	ldd	r23, Y+22	; 0x16
    16de:	8f 89       	ldd	r24, Y+23	; 0x17
    16e0:	98 8d       	ldd	r25, Y+24	; 0x18
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	4a e7       	ldi	r20, 0x7A	; 122
    16e8:	54 e4       	ldi	r21, 0x44	; 68
    16ea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	8c 87       	std	Y+12, r24	; 0x0c
    16f4:	9d 87       	std	Y+13, r25	; 0x0d
    16f6:	ae 87       	std	Y+14, r26	; 0x0e
    16f8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    16fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    16fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1700:	9f 85       	ldd	r25, Y+15	; 0x0f
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	4a ef       	ldi	r20, 0xFA	; 250
    1708:	54 e4       	ldi	r21, 0x44	; 68
    170a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	88 87       	std	Y+8, r24	; 0x08
    1714:	99 87       	std	Y+9, r25	; 0x09
    1716:	aa 87       	std	Y+10, r26	; 0x0a
    1718:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    171a:	68 85       	ldd	r22, Y+8	; 0x08
    171c:	79 85       	ldd	r23, Y+9	; 0x09
    171e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1720:	9b 85       	ldd	r25, Y+11	; 0x0b
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	40 e8       	ldi	r20, 0x80	; 128
    1728:	5f e3       	ldi	r21, 0x3F	; 63
    172a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    172e:	88 23       	and	r24, r24
    1730:	2c f4       	brge	.+10     	; 0x173c <LCD_voidDrawSpecialChar+0xfc>
		__ticks = 1;
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	9f 83       	std	Y+7, r25	; 0x07
    1738:	8e 83       	std	Y+6, r24	; 0x06
    173a:	3f c0       	rjmp	.+126    	; 0x17ba <LCD_voidDrawSpecialChar+0x17a>
	else if (__tmp > 65535)
    173c:	68 85       	ldd	r22, Y+8	; 0x08
    173e:	79 85       	ldd	r23, Y+9	; 0x09
    1740:	8a 85       	ldd	r24, Y+10	; 0x0a
    1742:	9b 85       	ldd	r25, Y+11	; 0x0b
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	3f ef       	ldi	r19, 0xFF	; 255
    1748:	4f e7       	ldi	r20, 0x7F	; 127
    174a:	57 e4       	ldi	r21, 0x47	; 71
    174c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1750:	18 16       	cp	r1, r24
    1752:	4c f5       	brge	.+82     	; 0x17a6 <LCD_voidDrawSpecialChar+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1754:	6c 85       	ldd	r22, Y+12	; 0x0c
    1756:	7d 85       	ldd	r23, Y+13	; 0x0d
    1758:	8e 85       	ldd	r24, Y+14	; 0x0e
    175a:	9f 85       	ldd	r25, Y+15	; 0x0f
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	40 e2       	ldi	r20, 0x20	; 32
    1762:	51 e4       	ldi	r21, 0x41	; 65
    1764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	bc 01       	movw	r22, r24
    176e:	cd 01       	movw	r24, r26
    1770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	9f 83       	std	Y+7, r25	; 0x07
    177a:	8e 83       	std	Y+6, r24	; 0x06
    177c:	0f c0       	rjmp	.+30     	; 0x179c <LCD_voidDrawSpecialChar+0x15c>
    177e:	88 ec       	ldi	r24, 0xC8	; 200
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	9d 83       	std	Y+5, r25	; 0x05
    1784:	8c 83       	std	Y+4, r24	; 0x04
    1786:	8c 81       	ldd	r24, Y+4	; 0x04
    1788:	9d 81       	ldd	r25, Y+5	; 0x05
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	f1 f7       	brne	.-4      	; 0x178a <LCD_voidDrawSpecialChar+0x14a>
    178e:	9d 83       	std	Y+5, r25	; 0x05
    1790:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1792:	8e 81       	ldd	r24, Y+6	; 0x06
    1794:	9f 81       	ldd	r25, Y+7	; 0x07
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	9f 83       	std	Y+7, r25	; 0x07
    179a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    179c:	8e 81       	ldd	r24, Y+6	; 0x06
    179e:	9f 81       	ldd	r25, Y+7	; 0x07
    17a0:	00 97       	sbiw	r24, 0x00	; 0
    17a2:	69 f7       	brne	.-38     	; 0x177e <LCD_voidDrawSpecialChar+0x13e>
    17a4:	24 c0       	rjmp	.+72     	; 0x17ee <LCD_voidDrawSpecialChar+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a6:	68 85       	ldd	r22, Y+8	; 0x08
    17a8:	79 85       	ldd	r23, Y+9	; 0x09
    17aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    17ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    17ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	9f 83       	std	Y+7, r25	; 0x07
    17b8:	8e 83       	std	Y+6, r24	; 0x06
    17ba:	8e 81       	ldd	r24, Y+6	; 0x06
    17bc:	9f 81       	ldd	r25, Y+7	; 0x07
    17be:	9b 83       	std	Y+3, r25	; 0x03
    17c0:	8a 83       	std	Y+2, r24	; 0x02
    17c2:	8a 81       	ldd	r24, Y+2	; 0x02
    17c4:	9b 81       	ldd	r25, Y+3	; 0x03
    17c6:	01 97       	sbiw	r24, 0x01	; 1
    17c8:	f1 f7       	brne	.-4      	; 0x17c6 <LCD_voidDrawSpecialChar+0x186>
    17ca:	9b 83       	std	Y+3, r25	; 0x03
    17cc:	8a 83       	std	Y+2, r24	; 0x02
    17ce:	0f c0       	rjmp	.+30     	; 0x17ee <LCD_voidDrawSpecialChar+0x1ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17d0:	69 89       	ldd	r22, Y+17	; 0x11
    17d2:	7a 89       	ldd	r23, Y+18	; 0x12
    17d4:	8b 89       	ldd	r24, Y+19	; 0x13
    17d6:	9c 89       	ldd	r25, Y+20	; 0x14
    17d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	88 8b       	std	Y+16, r24	; 0x10
    17e2:	88 89       	ldd	r24, Y+16	; 0x10
    17e4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	8a 95       	dec	r24
    17ea:	f1 f7       	brne	.-4      	; 0x17e8 <LCD_voidDrawSpecialChar+0x1a8>
    17ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(40);
	u8 LCD_U8Counter ;
	for (LCD_U8Counter=0 ; LCD_U8Counter<8 ; LCD_U8Counter++)
    17ee:	19 8e       	std	Y+25, r1	; 0x19
    17f0:	0e c0       	rjmp	.+28     	; 0x180e <LCD_voidDrawSpecialChar+0x1ce>
	{
		LCD_voidSendChar(Copy_U8SpecialChar[LCD_U8Counter]);
    17f2:	89 8d       	ldd	r24, Y+25	; 0x19
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17fc:	fc 01       	movw	r30, r24
    17fe:	e2 0f       	add	r30, r18
    1800:	f3 1f       	adc	r31, r19
    1802:	80 81       	ld	r24, Z
    1804:	0e 94 80 07 	call	0xf00	; 0xf00 <LCD_voidSendChar>
void LCD_voidDrawSpecialChar (u8 Copy_U8CharAddress , u8 *Copy_U8SpecialChar)
{
	LCD_voidSendCommand(0b01000000+(Copy_U8CharAddress * 8));
	_delay_us(40);
	u8 LCD_U8Counter ;
	for (LCD_U8Counter=0 ; LCD_U8Counter<8 ; LCD_U8Counter++)
    1808:	89 8d       	ldd	r24, Y+25	; 0x19
    180a:	8f 5f       	subi	r24, 0xFF	; 255
    180c:	89 8f       	std	Y+25, r24	; 0x19
    180e:	89 8d       	ldd	r24, Y+25	; 0x19
    1810:	88 30       	cpi	r24, 0x08	; 8
    1812:	78 f3       	brcs	.-34     	; 0x17f2 <LCD_voidDrawSpecialChar+0x1b2>
	{
		LCD_voidSendChar(Copy_U8SpecialChar[LCD_U8Counter]);
	}
}
    1814:	6c 96       	adiw	r28, 0x1c	; 28
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	f8 94       	cli
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	cd bf       	out	0x3d, r28	; 61
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <LCD_voidSendSpecialChar>:

void LCD_voidSendSpecialChar(u8 Copy_U8CharAddress , u8 Copy_U8LineNum , u8 Copy_U8CharNum)
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	00 d0       	rcall	.+0      	; 0x182c <LCD_voidSendSpecialChar+0x6>
    182c:	0f 92       	push	r0
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	89 83       	std	Y+1, r24	; 0x01
    1834:	6a 83       	std	Y+2, r22	; 0x02
    1836:	4b 83       	std	Y+3, r20	; 0x03
	LCD_voidSetLocation(Copy_U8LineNum , Copy_U8CharNum);
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	6b 81       	ldd	r22, Y+3	; 0x03
    183c:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_voidSetLocation>
	LCD_voidSendChar(Copy_U8CharAddress);
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	0e 94 80 07 	call	0xf00	; 0xf00 <LCD_voidSendChar>
}
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	08 95       	ret

00001852 <WDT_voidEnable>:
#include "WDT.h"



void WDT_voidEnable(void)
{
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(WDTCR, WDE);
    185a:	a1 e4       	ldi	r26, 0x41	; 65
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e1 e4       	ldi	r30, 0x41	; 65
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	88 60       	ori	r24, 0x08	; 8
    1866:	8c 93       	st	X, r24
}
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <WDT_voidSleep>:

void WDT_voidSleep(u8 Copy_u8Time)
{
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	0f 92       	push	r0
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	89 83       	std	Y+1, r24	; 0x01
    CLR_BITS_IN_REG(WDTCR, CLR_PRESCALE_MASK);
    187a:	a1 e4       	ldi	r26, 0x41	; 65
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e1 e4       	ldi	r30, 0x41	; 65
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	88 7f       	andi	r24, 0xF8	; 248
    1886:	8c 93       	st	X, r24
    SET_BITS_IN_REG(WDTCR, Copy_u8Time);
    1888:	a1 e4       	ldi	r26, 0x41	; 65
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	e1 e4       	ldi	r30, 0x41	; 65
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	90 81       	ld	r25, Z
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	89 2b       	or	r24, r25
    1896:	8c 93       	st	X, r24
}
    1898:	0f 90       	pop	r0
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <WDT_voidDisable>:


void WDT_voidDisable(void)
{
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    WDTCR = DISABLE_MASK;
    18a8:	e1 e4       	ldi	r30, 0x41	; 65
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	88 e1       	ldi	r24, 0x18	; 24
    18ae:	80 83       	st	Z, r24
    WDTCR = ZERO;
    18b0:	e1 e4       	ldi	r30, 0x41	; 65
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	10 82       	st	Z, r1
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <Timer1_voidInit>:

static void (*Timer_ptrFunc[4])(void) = {NULL};


void Timer1_voidInit(u8 Copy_u8Mode, u8 Copy_u8Scaler, u8 Copy_u8OC1A, u8 Copy_u8OC1B)
{
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <Timer1_voidInit+0x6>
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <Timer1_voidInit+0x8>
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <Timer1_voidInit+0xa>
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	89 83       	std	Y+1, r24	; 0x01
    18cc:	6a 83       	std	Y+2, r22	; 0x02
    18ce:	4b 83       	std	Y+3, r20	; 0x03
    18d0:	2c 83       	std	Y+4, r18	; 0x04
    //Select Timer1 Mode
    switch (Copy_u8Mode)
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	28 2f       	mov	r18, r24
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	3e 83       	std	Y+6, r19	; 0x06
    18da:	2d 83       	std	Y+5, r18	; 0x05
    18dc:	8d 81       	ldd	r24, Y+5	; 0x05
    18de:	9e 81       	ldd	r25, Y+6	; 0x06
    18e0:	8b 30       	cpi	r24, 0x0B	; 11
    18e2:	91 05       	cpc	r25, r1
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <Timer1_voidInit+0x2c>
    18e6:	56 c0       	rjmp	.+172    	; 0x1994 <Timer1_voidInit+0xd8>
    18e8:	2d 81       	ldd	r18, Y+5	; 0x05
    18ea:	3e 81       	ldd	r19, Y+6	; 0x06
    18ec:	2c 30       	cpi	r18, 0x0C	; 12
    18ee:	31 05       	cpc	r19, r1
    18f0:	54 f4       	brge	.+20     	; 0x1906 <Timer1_voidInit+0x4a>
    18f2:	8d 81       	ldd	r24, Y+5	; 0x05
    18f4:	9e 81       	ldd	r25, Y+6	; 0x06
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	99 f0       	breq	.+38     	; 0x1920 <Timer1_voidInit+0x64>
    18fa:	2d 81       	ldd	r18, Y+5	; 0x05
    18fc:	3e 81       	ldd	r19, Y+6	; 0x06
    18fe:	24 30       	cpi	r18, 0x04	; 4
    1900:	31 05       	cpc	r19, r1
    1902:	59 f1       	breq	.+86     	; 0x195a <Timer1_voidInit+0x9e>
    1904:	9d c0       	rjmp	.+314    	; 0x1a40 <Timer1_voidInit+0x184>
    1906:	8d 81       	ldd	r24, Y+5	; 0x05
    1908:	9e 81       	ldd	r25, Y+6	; 0x06
    190a:	8e 30       	cpi	r24, 0x0E	; 14
    190c:	91 05       	cpc	r25, r1
    190e:	09 f4       	brne	.+2      	; 0x1912 <Timer1_voidInit+0x56>
    1910:	5e c0       	rjmp	.+188    	; 0x19ce <Timer1_voidInit+0x112>
    1912:	2d 81       	ldd	r18, Y+5	; 0x05
    1914:	3e 81       	ldd	r19, Y+6	; 0x06
    1916:	2f 30       	cpi	r18, 0x0F	; 15
    1918:	31 05       	cpc	r19, r1
    191a:	09 f4       	brne	.+2      	; 0x191e <Timer1_voidInit+0x62>
    191c:	75 c0       	rjmp	.+234    	; 0x1a08 <Timer1_voidInit+0x14c>
    191e:	90 c0       	rjmp	.+288    	; 0x1a40 <Timer1_voidInit+0x184>
    {
    case TIMER1_NORMAL_MODE:
        CLR_BIT(TCCR1A, WGM10);
    1920:	af e4       	ldi	r26, 0x4F	; 79
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	ef e4       	ldi	r30, 0x4F	; 79
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	8e 7f       	andi	r24, 0xFE	; 254
    192c:	8c 93       	st	X, r24
        CLR_BIT(TCCR1A, WGM11);
    192e:	af e4       	ldi	r26, 0x4F	; 79
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	ef e4       	ldi	r30, 0x4F	; 79
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	8d 7f       	andi	r24, 0xFD	; 253
    193a:	8c 93       	st	X, r24
        CLR_BIT(TCCR1B, WGM12);
    193c:	ae e4       	ldi	r26, 0x4E	; 78
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	ee e4       	ldi	r30, 0x4E	; 78
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	87 7f       	andi	r24, 0xF7	; 247
    1948:	8c 93       	st	X, r24
        CLR_BIT(TCCR1B, WGM13);
    194a:	ae e4       	ldi	r26, 0x4E	; 78
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	ee e4       	ldi	r30, 0x4E	; 78
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	8f 7e       	andi	r24, 0xEF	; 239
    1956:	8c 93       	st	X, r24
    1958:	73 c0       	rjmp	.+230    	; 0x1a40 <Timer1_voidInit+0x184>
        break;
    case TIMER1_CTC_MODE_TOP_OCR1A:
        CLR_BIT(TCCR1A, WGM10);
    195a:	af e4       	ldi	r26, 0x4F	; 79
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	ef e4       	ldi	r30, 0x4F	; 79
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	8e 7f       	andi	r24, 0xFE	; 254
    1966:	8c 93       	st	X, r24
        CLR_BIT(TCCR1A, WGM11);
    1968:	af e4       	ldi	r26, 0x4F	; 79
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	ef e4       	ldi	r30, 0x4F	; 79
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	8d 7f       	andi	r24, 0xFD	; 253
    1974:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM12);
    1976:	ae e4       	ldi	r26, 0x4E	; 78
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	ee e4       	ldi	r30, 0x4E	; 78
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	88 60       	ori	r24, 0x08	; 8
    1982:	8c 93       	st	X, r24
        CLR_BIT(TCCR1B, WGM13);
    1984:	ae e4       	ldi	r26, 0x4E	; 78
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	ee e4       	ldi	r30, 0x4E	; 78
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	8f 7e       	andi	r24, 0xEF	; 239
    1990:	8c 93       	st	X, r24
    1992:	56 c0       	rjmp	.+172    	; 0x1a40 <Timer1_voidInit+0x184>
        break;
    case TIMER1_PHASE_CORRECT_MODE_TOP_OCR1A:
        SET_BIT(TCCR1A, WGM10);
    1994:	af e4       	ldi	r26, 0x4F	; 79
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	ef e4       	ldi	r30, 0x4F	; 79
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	81 60       	ori	r24, 0x01	; 1
    19a0:	8c 93       	st	X, r24
        SET_BIT(TCCR1A, WGM11);
    19a2:	af e4       	ldi	r26, 0x4F	; 79
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	ef e4       	ldi	r30, 0x4F	; 79
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	82 60       	ori	r24, 0x02	; 2
    19ae:	8c 93       	st	X, r24
        CLR_BIT(TCCR1B, WGM12);
    19b0:	ae e4       	ldi	r26, 0x4E	; 78
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	ee e4       	ldi	r30, 0x4E	; 78
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	87 7f       	andi	r24, 0xF7	; 247
    19bc:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM13);
    19be:	ae e4       	ldi	r26, 0x4E	; 78
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	ee e4       	ldi	r30, 0x4E	; 78
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	80 61       	ori	r24, 0x10	; 16
    19ca:	8c 93       	st	X, r24
    19cc:	39 c0       	rjmp	.+114    	; 0x1a40 <Timer1_voidInit+0x184>
        break;
    case TIMER1_FAST_MODE_TOP_ICR1:
        CLR_BIT(TCCR1A, WGM10);
    19ce:	af e4       	ldi	r26, 0x4F	; 79
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	ef e4       	ldi	r30, 0x4F	; 79
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	8e 7f       	andi	r24, 0xFE	; 254
    19da:	8c 93       	st	X, r24
        SET_BIT(TCCR1A, WGM11);
    19dc:	af e4       	ldi	r26, 0x4F	; 79
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	ef e4       	ldi	r30, 0x4F	; 79
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	82 60       	ori	r24, 0x02	; 2
    19e8:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM12);
    19ea:	ae e4       	ldi	r26, 0x4E	; 78
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	ee e4       	ldi	r30, 0x4E	; 78
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	88 60       	ori	r24, 0x08	; 8
    19f6:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM13);
    19f8:	ae e4       	ldi	r26, 0x4E	; 78
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	ee e4       	ldi	r30, 0x4E	; 78
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	80 61       	ori	r24, 0x10	; 16
    1a04:	8c 93       	st	X, r24
    1a06:	1c c0       	rjmp	.+56     	; 0x1a40 <Timer1_voidInit+0x184>
        break;
    case TIMER1_FAST_MODE_TOP_OCR1A:
        SET_BIT(TCCR1A, WGM10);
    1a08:	af e4       	ldi	r26, 0x4F	; 79
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	ef e4       	ldi	r30, 0x4F	; 79
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	81 60       	ori	r24, 0x01	; 1
    1a14:	8c 93       	st	X, r24
        SET_BIT(TCCR1A, WGM11);
    1a16:	af e4       	ldi	r26, 0x4F	; 79
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	ef e4       	ldi	r30, 0x4F	; 79
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	82 60       	ori	r24, 0x02	; 2
    1a22:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM12);
    1a24:	ae e4       	ldi	r26, 0x4E	; 78
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	ee e4       	ldi	r30, 0x4E	; 78
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	88 60       	ori	r24, 0x08	; 8
    1a30:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM13);
    1a32:	ae e4       	ldi	r26, 0x4E	; 78
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	ee e4       	ldi	r30, 0x4E	; 78
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	80 61       	ori	r24, 0x10	; 16
    1a3e:	8c 93       	st	X, r24
        break;
    }
  
    
    //Config Action OC1A PIN
    CLR_BITS_IN_REG(TCCR1A, OC1A_CLR_MASK);
    1a40:	af e4       	ldi	r26, 0x4F	; 79
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	ef e4       	ldi	r30, 0x4F	; 79
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	8f 73       	andi	r24, 0x3F	; 63
    1a4c:	8c 93       	st	X, r24
    SET_BITS_IN_REG(TCCR1A, Copy_u8OC1A);
    1a4e:	af e4       	ldi	r26, 0x4F	; 79
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	ef e4       	ldi	r30, 0x4F	; 79
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	90 81       	ld	r25, Z
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	89 2b       	or	r24, r25
    1a5c:	8c 93       	st	X, r24

    //Config Action OC1B PIN
    CLR_BITS_IN_REG(TCCR1A, OC1B_CLR_MASK);
    1a5e:	af e4       	ldi	r26, 0x4F	; 79
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	ef e4       	ldi	r30, 0x4F	; 79
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	8f 7c       	andi	r24, 0xCF	; 207
    1a6a:	8c 93       	st	X, r24
    SET_BITS_IN_REG(TCCR1A, Copy_u8OC1B);
    1a6c:	af e4       	ldi	r26, 0x4F	; 79
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	ef e4       	ldi	r30, 0x4F	; 79
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	90 81       	ld	r25, Z
    1a76:	8c 81       	ldd	r24, Y+4	; 0x04
    1a78:	89 2b       	or	r24, r25
    1a7a:	8c 93       	st	X, r24

    //Select Clock Source
    //Clear CS12:10
    CLR_BITS_IN_REG(TCCR1B, CLK_SRC_CLR_MASK);
    1a7c:	ae e4       	ldi	r26, 0x4E	; 78
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	ee e4       	ldi	r30, 0x4E	; 78
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	88 7f       	andi	r24, 0xF8	; 248
    1a88:	8c 93       	st	X, r24
    //Set Clock source
    SET_BITS_IN_REG(TCCR1B, Copy_u8Scaler);
    1a8a:	ae e4       	ldi	r26, 0x4E	; 78
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	ee e4       	ldi	r30, 0x4E	; 78
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	90 81       	ld	r25, Z
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	89 2b       	or	r24, r25
    1a98:	8c 93       	st	X, r24
 
}
    1a9a:	26 96       	adiw	r28, 0x06	; 6
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	de bf       	out	0x3e, r29	; 62
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	cd bf       	out	0x3d, r28	; 61
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	08 95       	ret

00001aac <Timer1_voidSetPreloadValue>:



void Timer1_voidSetPreloadValue(u16 Copy_u16Value)
{
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <Timer1_voidSetPreloadValue+0x6>
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
    1ab6:	9a 83       	std	Y+2, r25	; 0x02
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    TCNT1 = Copy_u16Value;
    1aba:	ec e4       	ldi	r30, 0x4C	; 76
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac2:	91 83       	std	Z+1, r25	; 0x01
    1ac4:	80 83       	st	Z, r24
}
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	08 95       	ret

00001ad0 <Timer1_u16ReadValue>:


u16  Timer1_u16ReadValue(void)
{
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    return TCNT1;
    1ad8:	ec e4       	ldi	r30, 0x4C	; 76
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	91 81       	ldd	r25, Z+1	; 0x01
}
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <Timer1_voidSetOCR1AValue>:

void Timer1_voidSetOCR1AValue(u16 Copy_u16Value)
{
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	00 d0       	rcall	.+0      	; 0x1aec <Timer1_voidSetOCR1AValue+0x6>
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
    1af0:	9a 83       	std	Y+2, r25	; 0x02
    1af2:	89 83       	std	Y+1, r24	; 0x01
    OCR1A = Copy_u16Value;
    1af4:	ea e4       	ldi	r30, 0x4A	; 74
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	9a 81       	ldd	r25, Y+2	; 0x02
    1afc:	91 83       	std	Z+1, r25	; 0x01
    1afe:	80 83       	st	Z, r24
}
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	cf 91       	pop	r28
    1b06:	df 91       	pop	r29
    1b08:	08 95       	ret

00001b0a <Timer1_voidSetOCR1BValue>:

void Timer1_voidSetOCR1BValue(u16 Copy_u16Value)
{
    1b0a:	df 93       	push	r29
    1b0c:	cf 93       	push	r28
    1b0e:	00 d0       	rcall	.+0      	; 0x1b10 <Timer1_voidSetOCR1BValue+0x6>
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
    1b14:	9a 83       	std	Y+2, r25	; 0x02
    1b16:	89 83       	std	Y+1, r24	; 0x01
    OCR1B = Copy_u16Value;
    1b18:	e8 e4       	ldi	r30, 0x48	; 72
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b20:	91 83       	std	Z+1, r25	; 0x01
    1b22:	80 83       	st	Z, r24
}
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <Timer1_voidSetICR1Value>:

void Timer1_voidSetICR1Value(u16 Copy_u16Value)
{
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <Timer1_voidSetICR1Value+0x6>
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    1b38:	9a 83       	std	Y+2, r25	; 0x02
    1b3a:	89 83       	std	Y+1, r24	; 0x01
    ICR1 = Copy_u16Value;
    1b3c:	e6 e4       	ldi	r30, 0x46	; 70
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	9a 81       	ldd	r25, Y+2	; 0x02
    1b44:	91 83       	std	Z+1, r25	; 0x01
    1b46:	80 83       	st	Z, r24
}
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <Timer1_voidOVFInterruptEnable>:

void Timer1_voidOVFInterruptEnable(void)
{
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TOIE1);
    1b5a:	a9 e5       	ldi	r26, 0x59	; 89
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	e9 e5       	ldi	r30, 0x59	; 89
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	84 60       	ori	r24, 0x04	; 4
    1b66:	8c 93       	st	X, r24
}
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	08 95       	ret

00001b6e <Timer1_voidOVFInterruptDisable>:

void Timer1_voidOVFInterruptDisable(void)
{
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, TOIE1);
    1b76:	a9 e5       	ldi	r26, 0x59	; 89
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e9 e5       	ldi	r30, 0x59	; 89
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	8b 7f       	andi	r24, 0xFB	; 251
    1b82:	8c 93       	st	X, r24
}
    1b84:	cf 91       	pop	r28
    1b86:	df 91       	pop	r29
    1b88:	08 95       	ret

00001b8a <Timer1_voidOC1AInterruptEnable>:

void Timer1_voidOC1AInterruptEnable(void)
{
    1b8a:	df 93       	push	r29
    1b8c:	cf 93       	push	r28
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE1A);
    1b92:	a9 e5       	ldi	r26, 0x59	; 89
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	e9 e5       	ldi	r30, 0x59	; 89
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	80 61       	ori	r24, 0x10	; 16
    1b9e:	8c 93       	st	X, r24
}
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <Timer1_voidOC1AInterruptDisable>:

void Timer1_voidOC1AInterruptDisable(void)
{
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, OCIE1A);
    1bae:	a9 e5       	ldi	r26, 0x59	; 89
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	e9 e5       	ldi	r30, 0x59	; 89
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	8f 7e       	andi	r24, 0xEF	; 239
    1bba:	8c 93       	st	X, r24
}
    1bbc:	cf 91       	pop	r28
    1bbe:	df 91       	pop	r29
    1bc0:	08 95       	ret

00001bc2 <Timer1_voidOC1BInterruptEnable>:

void Timer1_voidOC1BInterruptEnable(void)
{
    1bc2:	df 93       	push	r29
    1bc4:	cf 93       	push	r28
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE1B);
    1bca:	a9 e5       	ldi	r26, 0x59	; 89
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e9 e5       	ldi	r30, 0x59	; 89
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	88 60       	ori	r24, 0x08	; 8
    1bd6:	8c 93       	st	X, r24
}
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <Timer1_voidOC1BInterruptDisable>:

void Timer1_voidOC1BInterruptDisable(void)
{
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, OCIE1B);
    1be6:	a9 e5       	ldi	r26, 0x59	; 89
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e9 e5       	ldi	r30, 0x59	; 89
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	87 7f       	andi	r24, 0xF7	; 247
    1bf2:	8c 93       	st	X, r24
}
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <Timer1_voidOVFSetCallBack>:



void Timer1_voidOVFSetCallBack(void (*Copy_pfNotification)(void))
{
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <Timer1_voidOVFSetCallBack+0x6>
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
    1c04:	9a 83       	std	Y+2, r25	; 0x02
    1c06:	89 83       	std	Y+1, r24	; 0x01
    Timer_ptrFunc[0] = Copy_pfNotification;
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0c:	90 93 69 00 	sts	0x0069, r25
    1c10:	80 93 68 00 	sts	0x0068, r24
}
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <Timer1_voidOC1ASetCallBack>:

void Timer1_voidOC1ASetCallBack(void (*Copy_pfNotification)(void))
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	00 d0       	rcall	.+0      	; 0x1c24 <Timer1_voidOC1ASetCallBack+0x6>
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	9a 83       	std	Y+2, r25	; 0x02
    1c2a:	89 83       	std	Y+1, r24	; 0x01
    Timer_ptrFunc[1] = Copy_pfNotification;
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c30:	90 93 6b 00 	sts	0x006B, r25
    1c34:	80 93 6a 00 	sts	0x006A, r24
}
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	08 95       	ret

00001c42 <Timer1_voidOC1BSetCallBack>:

void Timer1_voidOC1BSetCallBack(void (*Copy_pfNotification)(void))
{
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <Timer1_voidOC1BSetCallBack+0x6>
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    1c4c:	9a 83       	std	Y+2, r25	; 0x02
    1c4e:	89 83       	std	Y+1, r24	; 0x01
    Timer_ptrFunc[2] = Copy_pfNotification;
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
    1c52:	9a 81       	ldd	r25, Y+2	; 0x02
    1c54:	90 93 6d 00 	sts	0x006D, r25
    1c58:	80 93 6c 00 	sts	0x006C, r24
}
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	cf 91       	pop	r28
    1c62:	df 91       	pop	r29
    1c64:	08 95       	ret

00001c66 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1c66:	1f 92       	push	r1
    1c68:	0f 92       	push	r0
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	0f 92       	push	r0
    1c6e:	11 24       	eor	r1, r1
    1c70:	2f 93       	push	r18
    1c72:	3f 93       	push	r19
    1c74:	4f 93       	push	r20
    1c76:	5f 93       	push	r21
    1c78:	6f 93       	push	r22
    1c7a:	7f 93       	push	r23
    1c7c:	8f 93       	push	r24
    1c7e:	9f 93       	push	r25
    1c80:	af 93       	push	r26
    1c82:	bf 93       	push	r27
    1c84:	ef 93       	push	r30
    1c86:	ff 93       	push	r31
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    if(Timer_ptrFunc[0] != NULL)
    1c90:	80 91 68 00 	lds	r24, 0x0068
    1c94:	90 91 69 00 	lds	r25, 0x0069
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	29 f0       	breq	.+10     	; 0x1ca6 <__vector_9+0x40>
    {
        Timer_ptrFunc[0]();
    1c9c:	e0 91 68 00 	lds	r30, 0x0068
    1ca0:	f0 91 69 00 	lds	r31, 0x0069
    1ca4:	09 95       	icall
    }
}
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	ff 91       	pop	r31
    1cac:	ef 91       	pop	r30
    1cae:	bf 91       	pop	r27
    1cb0:	af 91       	pop	r26
    1cb2:	9f 91       	pop	r25
    1cb4:	8f 91       	pop	r24
    1cb6:	7f 91       	pop	r23
    1cb8:	6f 91       	pop	r22
    1cba:	5f 91       	pop	r21
    1cbc:	4f 91       	pop	r20
    1cbe:	3f 91       	pop	r19
    1cc0:	2f 91       	pop	r18
    1cc2:	0f 90       	pop	r0
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	0f 90       	pop	r0
    1cc8:	1f 90       	pop	r1
    1cca:	18 95       	reti

00001ccc <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1ccc:	1f 92       	push	r1
    1cce:	0f 92       	push	r0
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	0f 92       	push	r0
    1cd4:	11 24       	eor	r1, r1
    1cd6:	2f 93       	push	r18
    1cd8:	3f 93       	push	r19
    1cda:	4f 93       	push	r20
    1cdc:	5f 93       	push	r21
    1cde:	6f 93       	push	r22
    1ce0:	7f 93       	push	r23
    1ce2:	8f 93       	push	r24
    1ce4:	9f 93       	push	r25
    1ce6:	af 93       	push	r26
    1ce8:	bf 93       	push	r27
    1cea:	ef 93       	push	r30
    1cec:	ff 93       	push	r31
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    if(Timer_ptrFunc[1] != NULL)
    1cf6:	80 91 6a 00 	lds	r24, 0x006A
    1cfa:	90 91 6b 00 	lds	r25, 0x006B
    1cfe:	00 97       	sbiw	r24, 0x00	; 0
    1d00:	29 f0       	breq	.+10     	; 0x1d0c <__vector_7+0x40>
    {
        Timer_ptrFunc[1]();
    1d02:	e0 91 6a 00 	lds	r30, 0x006A
    1d06:	f0 91 6b 00 	lds	r31, 0x006B
    1d0a:	09 95       	icall
    }
}
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	ff 91       	pop	r31
    1d12:	ef 91       	pop	r30
    1d14:	bf 91       	pop	r27
    1d16:	af 91       	pop	r26
    1d18:	9f 91       	pop	r25
    1d1a:	8f 91       	pop	r24
    1d1c:	7f 91       	pop	r23
    1d1e:	6f 91       	pop	r22
    1d20:	5f 91       	pop	r21
    1d22:	4f 91       	pop	r20
    1d24:	3f 91       	pop	r19
    1d26:	2f 91       	pop	r18
    1d28:	0f 90       	pop	r0
    1d2a:	0f be       	out	0x3f, r0	; 63
    1d2c:	0f 90       	pop	r0
    1d2e:	1f 90       	pop	r1
    1d30:	18 95       	reti

00001d32 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
    1d32:	1f 92       	push	r1
    1d34:	0f 92       	push	r0
    1d36:	0f b6       	in	r0, 0x3f	; 63
    1d38:	0f 92       	push	r0
    1d3a:	11 24       	eor	r1, r1
    1d3c:	2f 93       	push	r18
    1d3e:	3f 93       	push	r19
    1d40:	4f 93       	push	r20
    1d42:	5f 93       	push	r21
    1d44:	6f 93       	push	r22
    1d46:	7f 93       	push	r23
    1d48:	8f 93       	push	r24
    1d4a:	9f 93       	push	r25
    1d4c:	af 93       	push	r26
    1d4e:	bf 93       	push	r27
    1d50:	ef 93       	push	r30
    1d52:	ff 93       	push	r31
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    if(Timer_ptrFunc[2] != NULL)
    1d5c:	80 91 6c 00 	lds	r24, 0x006C
    1d60:	90 91 6d 00 	lds	r25, 0x006D
    1d64:	00 97       	sbiw	r24, 0x00	; 0
    1d66:	29 f0       	breq	.+10     	; 0x1d72 <__vector_8+0x40>
    {
        Timer_ptrFunc[2]();
    1d68:	e0 91 6c 00 	lds	r30, 0x006C
    1d6c:	f0 91 6d 00 	lds	r31, 0x006D
    1d70:	09 95       	icall
    }
}
    1d72:	cf 91       	pop	r28
    1d74:	df 91       	pop	r29
    1d76:	ff 91       	pop	r31
    1d78:	ef 91       	pop	r30
    1d7a:	bf 91       	pop	r27
    1d7c:	af 91       	pop	r26
    1d7e:	9f 91       	pop	r25
    1d80:	8f 91       	pop	r24
    1d82:	7f 91       	pop	r23
    1d84:	6f 91       	pop	r22
    1d86:	5f 91       	pop	r21
    1d88:	4f 91       	pop	r20
    1d8a:	3f 91       	pop	r19
    1d8c:	2f 91       	pop	r18
    1d8e:	0f 90       	pop	r0
    1d90:	0f be       	out	0x3f, r0	; 63
    1d92:	0f 90       	pop	r0
    1d94:	1f 90       	pop	r1
    1d96:	18 95       	reti

00001d98 <TIMER0_voidInit>:

void (*TIMER0_PFvoidOVFCall) (void) = ((void *)0);
void (*TIMER0_PFvoidCTCCall) (void) = ((void *)0);

void TIMER0_voidInit (void)
{
    1d98:	df 93       	push	r29
    1d9a:	cf 93       	push	r28
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
	/*4- Enable CTC Interrupt*/
	SET_BIT (TIMSK , OCIE0);

#elif	TIMER0_MODE == TIMER0_FPWM_MODE
	/*1- Select Timer0 Mode ==> Fast PWM Mode*/
	SET_BIT (TCCR0 , WGM00);
    1da0:	a3 e5       	ldi	r26, 0x53	; 83
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e3 e5       	ldi	r30, 0x53	; 83
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	80 64       	ori	r24, 0x40	; 64
    1dac:	8c 93       	st	X, r24
	SET_BIT (TCCR0 , WGM01);
    1dae:	a3 e5       	ldi	r26, 0x53	; 83
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	e3 e5       	ldi	r30, 0x53	; 83
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	88 60       	ori	r24, 0x08	; 8
    1dba:	8c 93       	st	X, r24
	/*2- Select OC0 Action */
	CLR_BIT (TCCR0 , COM00);
    1dbc:	a3 e5       	ldi	r26, 0x53	; 83
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	e3 e5       	ldi	r30, 0x53	; 83
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	8f 7e       	andi	r24, 0xEF	; 239
    1dc8:	8c 93       	st	X, r24
	SET_BIT (TCCR0 , COM01);
    1dca:	a3 e5       	ldi	r26, 0x53	; 83
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e3 e5       	ldi	r30, 0x53	; 83
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	80 62       	ori	r24, 0x20	; 32
    1dd6:	8c 93       	st	X, r24
	/*2- Select Prescaler ==> /8*/
	CLR_BIT (TCCR0 , CS00);
    1dd8:	a3 e5       	ldi	r26, 0x53	; 83
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e3 e5       	ldi	r30, 0x53	; 83
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	8e 7f       	andi	r24, 0xFE	; 254
    1de4:	8c 93       	st	X, r24
	SET_BIT (TCCR0 , CS01);
    1de6:	a3 e5       	ldi	r26, 0x53	; 83
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e3 e5       	ldi	r30, 0x53	; 83
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	82 60       	ori	r24, 0x02	; 2
    1df2:	8c 93       	st	X, r24
	CLR_BIT (TCCR0 , CS02);
    1df4:	a3 e5       	ldi	r26, 0x53	; 83
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e3 e5       	ldi	r30, 0x53	; 83
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	8b 7f       	andi	r24, 0xFB	; 251
    1e00:	8c 93       	st	X, r24
	SET_BIT (TCCR0 , CS01);
	CLR_BIT (TCCR0 , CS02);

#endif

}
    1e02:	cf 91       	pop	r28
    1e04:	df 91       	pop	r29
    1e06:	08 95       	ret

00001e08 <TIMER0_voidSetCallBack>:

void TIMER0_voidSetCallBack (void (*Copy_PFvoidName) (void))
{
    1e08:	df 93       	push	r29
    1e0a:	cf 93       	push	r28
    1e0c:	00 d0       	rcall	.+0      	; 0x1e0e <TIMER0_voidSetCallBack+0x6>
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
    1e12:	9a 83       	std	Y+2, r25	; 0x02
    1e14:	89 83       	std	Y+1, r24	; 0x01
#if TIMER0_MODE == TIMER0_OVF_MODE
	TIMER0_PFvoidOVFCall = Copy_PFvoidName ;
#elif TIMER0_MODE == TIMER0_CTC_MODE
	TIMER0_PFvoidCTCCall = Copy_PFvoidName ;
#endif
}
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	08 95       	ret

00001e20 <TIMER0_voidSetOCR0Value>:


void TIMER0_voidSetOCR0Value (u8 Copy_u8OCR0Value)
{
    1e20:	df 93       	push	r29
    1e22:	cf 93       	push	r28
    1e24:	0f 92       	push	r0
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8OCR0Value ;
    1e2c:	ec e5       	ldi	r30, 0x5C	; 92
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	80 83       	st	Z, r24
}
    1e34:	0f 90       	pop	r0
    1e36:	cf 91       	pop	r28
    1e38:	df 91       	pop	r29
    1e3a:	08 95       	ret

00001e3c <__vector_11>:


ISR(TIMER0_OVF_vect)
{
    1e3c:	1f 92       	push	r1
    1e3e:	0f 92       	push	r0
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	0f 92       	push	r0
    1e44:	11 24       	eor	r1, r1
    1e46:	2f 93       	push	r18
    1e48:	3f 93       	push	r19
    1e4a:	4f 93       	push	r20
    1e4c:	5f 93       	push	r21
    1e4e:	6f 93       	push	r22
    1e50:	7f 93       	push	r23
    1e52:	8f 93       	push	r24
    1e54:	9f 93       	push	r25
    1e56:	af 93       	push	r26
    1e58:	bf 93       	push	r27
    1e5a:	ef 93       	push	r30
    1e5c:	ff 93       	push	r31
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16OVFCounter = 0 ;
	Local_u16OVFCounter ++ ;
    1e66:	80 91 74 00 	lds	r24, 0x0074
    1e6a:	90 91 75 00 	lds	r25, 0x0075
    1e6e:	01 96       	adiw	r24, 0x01	; 1
    1e70:	90 93 75 00 	sts	0x0075, r25
    1e74:	80 93 74 00 	sts	0x0074, r24
	if (Local_u16OVFCounter == 3907)
    1e78:	80 91 74 00 	lds	r24, 0x0074
    1e7c:	90 91 75 00 	lds	r25, 0x0075
    1e80:	2f e0       	ldi	r18, 0x0F	; 15
    1e82:	83 34       	cpi	r24, 0x43	; 67
    1e84:	92 07       	cpc	r25, r18
    1e86:	69 f4       	brne	.+26     	; 0x1ea2 <__vector_11+0x66>
	{
		/*Set Preload Value ==> 192*/
		TCNT0 = 192 ;
    1e88:	e2 e5       	ldi	r30, 0x52	; 82
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 ec       	ldi	r24, 0xC0	; 192
    1e8e:	80 83       	st	Z, r24
		/*Clear Counter */ 
		Local_u16OVFCounter = 0 ;
    1e90:	10 92 75 00 	sts	0x0075, r1
    1e94:	10 92 74 00 	sts	0x0074, r1
		/*Action*/
		TIMER0_PFvoidOVFCall();
    1e98:	e0 91 70 00 	lds	r30, 0x0070
    1e9c:	f0 91 71 00 	lds	r31, 0x0071
    1ea0:	09 95       	icall
	}
}
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	ff 91       	pop	r31
    1ea8:	ef 91       	pop	r30
    1eaa:	bf 91       	pop	r27
    1eac:	af 91       	pop	r26
    1eae:	9f 91       	pop	r25
    1eb0:	8f 91       	pop	r24
    1eb2:	7f 91       	pop	r23
    1eb4:	6f 91       	pop	r22
    1eb6:	5f 91       	pop	r21
    1eb8:	4f 91       	pop	r20
    1eba:	3f 91       	pop	r19
    1ebc:	2f 91       	pop	r18
    1ebe:	0f 90       	pop	r0
    1ec0:	0f be       	out	0x3f, r0	; 63
    1ec2:	0f 90       	pop	r0
    1ec4:	1f 90       	pop	r1
    1ec6:	18 95       	reti

00001ec8 <__vector_10>:


ISR(TIMER0_COMP_vect)
{
    1ec8:	1f 92       	push	r1
    1eca:	0f 92       	push	r0
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	0f 92       	push	r0
    1ed0:	11 24       	eor	r1, r1
    1ed2:	2f 93       	push	r18
    1ed4:	3f 93       	push	r19
    1ed6:	4f 93       	push	r20
    1ed8:	5f 93       	push	r21
    1eda:	6f 93       	push	r22
    1edc:	7f 93       	push	r23
    1ede:	8f 93       	push	r24
    1ee0:	9f 93       	push	r25
    1ee2:	af 93       	push	r26
    1ee4:	bf 93       	push	r27
    1ee6:	ef 93       	push	r30
    1ee8:	ff 93       	push	r31
    1eea:	df 93       	push	r29
    1eec:	cf 93       	push	r28
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CTCCounter = 0 ;
	Local_u16CTCCounter ++ ;
    1ef2:	80 91 76 00 	lds	r24, 0x0076
    1ef6:	90 91 77 00 	lds	r25, 0x0077
    1efa:	01 96       	adiw	r24, 0x01	; 1
    1efc:	90 93 77 00 	sts	0x0077, r25
    1f00:	80 93 76 00 	sts	0x0076, r24
	if (Local_u16CTCCounter == 10000)
    1f04:	80 91 76 00 	lds	r24, 0x0076
    1f08:	90 91 77 00 	lds	r25, 0x0077
    1f0c:	27 e2       	ldi	r18, 0x27	; 39
    1f0e:	80 31       	cpi	r24, 0x10	; 16
    1f10:	92 07       	cpc	r25, r18
    1f12:	49 f4       	brne	.+18     	; 0x1f26 <__vector_10+0x5e>
	{
		/*Action*/
		TIMER0_PFvoidCTCCall();
    1f14:	e0 91 72 00 	lds	r30, 0x0072
    1f18:	f0 91 73 00 	lds	r31, 0x0073
    1f1c:	09 95       	icall
		/*Clear Counter*/
		Local_u16CTCCounter = 0 ;
    1f1e:	10 92 77 00 	sts	0x0077, r1
    1f22:	10 92 76 00 	sts	0x0076, r1
	}
}
    1f26:	cf 91       	pop	r28
    1f28:	df 91       	pop	r29
    1f2a:	ff 91       	pop	r31
    1f2c:	ef 91       	pop	r30
    1f2e:	bf 91       	pop	r27
    1f30:	af 91       	pop	r26
    1f32:	9f 91       	pop	r25
    1f34:	8f 91       	pop	r24
    1f36:	7f 91       	pop	r23
    1f38:	6f 91       	pop	r22
    1f3a:	5f 91       	pop	r21
    1f3c:	4f 91       	pop	r20
    1f3e:	3f 91       	pop	r19
    1f40:	2f 91       	pop	r18
    1f42:	0f 90       	pop	r0
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	0f 90       	pop	r0
    1f48:	1f 90       	pop	r1
    1f4a:	18 95       	reti

00001f4c <ADC_voidInit>:
#include "../01-DIO/DIO.h"
#include "ADC.h"


void ADC_voidInit (void)
{
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
	/*Enable ADC*/
	SET_BIT(ADCSRA , ADEN);
    1f54:	a6 e2       	ldi	r26, 0x26	; 38
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e6 e2       	ldi	r30, 0x26	; 38
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	80 68       	ori	r24, 0x80	; 128
    1f60:	8c 93       	st	X, r24
	
	/*Select V Rer ==> AVCC = 5V */
	SET_BIT (ADMUX , REFS0);
    1f62:	a7 e2       	ldi	r26, 0x27	; 39
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	e7 e2       	ldi	r30, 0x27	; 39
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	80 64       	ori	r24, 0x40	; 64
    1f6e:	8c 93       	st	X, r24
	CLR_BIT (ADMUX , REFS1);
    1f70:	a7 e2       	ldi	r26, 0x27	; 39
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	e7 e2       	ldi	r30, 0x27	; 39
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	8f 77       	andi	r24, 0x7F	; 127
    1f7c:	8c 93       	st	X, r24
	
	/*Right Adjust*/
	CLR_BIT (ADMUX , ADLAR);
    1f7e:	a7 e2       	ldi	r26, 0x27	; 39
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	e7 e2       	ldi	r30, 0x27	; 39
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	8f 7d       	andi	r24, 0xDF	; 223
    1f8a:	8c 93       	st	X, r24
	
	/*Disable Auto Trig*/
	CLR_BIT (ADCSRA , ADATE);
    1f8c:	a6 e2       	ldi	r26, 0x26	; 38
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e6 e2       	ldi	r30, 0x26	; 38
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	8f 7d       	andi	r24, 0xDF	; 223
    1f98:	8c 93       	st	X, r24
	
	/*Select Prescaler*/
	CLR_BIT (ADCSRA , ADPS0);
    1f9a:	a6 e2       	ldi	r26, 0x26	; 38
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	e6 e2       	ldi	r30, 0x26	; 38
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	8e 7f       	andi	r24, 0xFE	; 254
    1fa6:	8c 93       	st	X, r24
	SET_BIT (ADCSRA , ADPS1);
    1fa8:	a6 e2       	ldi	r26, 0x26	; 38
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e6 e2       	ldi	r30, 0x26	; 38
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	82 60       	ori	r24, 0x02	; 2
    1fb4:	8c 93       	st	X, r24
	SET_BIT (ADCSRA , ADPS2);
    1fb6:	a6 e2       	ldi	r26, 0x26	; 38
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	e6 e2       	ldi	r30, 0x26	; 38
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	84 60       	ori	r24, 0x04	; 4
    1fc2:	8c 93       	st	X, r24
}
    1fc4:	cf 91       	pop	r28
    1fc6:	df 91       	pop	r29
    1fc8:	08 95       	ret

00001fca <ADC_u16GetDigitalValue>:
u16  ADC_u16GetDigitalValue (u8 Copy_u8ChannelNum)
{
    1fca:	df 93       	push	r29
    1fcc:	cf 93       	push	r28
    1fce:	00 d0       	rcall	.+0      	; 0x1fd0 <ADC_u16GetDigitalValue+0x6>
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    1fd4:	89 83       	std	Y+1, r24	; 0x01
	/*Select Channel*/
	ADMUX &= ADC_CHANNEL_RESET ;
    1fd6:	a7 e2       	ldi	r26, 0x27	; 39
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e7 e2       	ldi	r30, 0x27	; 39
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	80 7e       	andi	r24, 0xE0	; 224
    1fe2:	8c 93       	st	X, r24
	ADMUX |= Copy_u8ChannelNum ;
    1fe4:	a7 e2       	ldi	r26, 0x27	; 39
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	e7 e2       	ldi	r30, 0x27	; 39
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	90 81       	ld	r25, Z
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	89 2b       	or	r24, r25
    1ff2:	8c 93       	st	X, r24
	
	/*Start Conversion*/
	SET_BIT (ADCSRA , ADSC);
    1ff4:	a6 e2       	ldi	r26, 0x26	; 38
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	e6 e2       	ldi	r30, 0x26	; 38
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	80 64       	ori	r24, 0x40	; 64
    2000:	8c 93       	st	X, r24
	
	/*wait flag = 1*/
	while (GET_BIT(ADCSRA , ADIF) == 0);
    2002:	e6 e2       	ldi	r30, 0x26	; 38
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
	
	/*Clear flag*/
	SET_BIT (ADCSRA , ADIF);
    2008:	a6 e2       	ldi	r26, 0x26	; 38
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	e6 e2       	ldi	r30, 0x26	; 38
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	80 81       	ld	r24, Z
    2012:	80 61       	ori	r24, 0x10	; 16
    2014:	8c 93       	st	X, r24
	
	/*Read the digital value*/
	return ADC_REG ;
    2016:	e4 e2       	ldi	r30, 0x24	; 36
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	91 81       	ldd	r25, Z+1	; 0x01
}
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <INT_voidEnable>:
#include "INT.h"

static void (*INT_voidPFCall[3]) (void) = {0} ;

void INT_voidEnable (u8 Copy_u8INTIndex , u8 Copy_u8Edge)
{
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	2a 97       	sbiw	r28, 0x0a	; 10
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	de bf       	out	0x3e, r29	; 62
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	cd bf       	out	0x3d, r28	; 61
    203c:	89 83       	std	Y+1, r24	; 0x01
    203e:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8INTIndex)
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	28 2f       	mov	r18, r24
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	3a 87       	std	Y+10, r19	; 0x0a
    2048:	29 87       	std	Y+9, r18	; 0x09
    204a:	89 85       	ldd	r24, Y+9	; 0x09
    204c:	9a 85       	ldd	r25, Y+10	; 0x0a
    204e:	81 30       	cpi	r24, 0x01	; 1
    2050:	91 05       	cpc	r25, r1
    2052:	09 f4       	brne	.+2      	; 0x2056 <INT_voidEnable+0x2e>
    2054:	6d c0       	rjmp	.+218    	; 0x2130 <INT_voidEnable+0x108>
    2056:	29 85       	ldd	r18, Y+9	; 0x09
    2058:	3a 85       	ldd	r19, Y+10	; 0x0a
    205a:	22 30       	cpi	r18, 0x02	; 2
    205c:	31 05       	cpc	r19, r1
    205e:	09 f4       	brne	.+2      	; 0x2062 <INT_voidEnable+0x3a>
    2060:	c9 c0       	rjmp	.+402    	; 0x21f4 <INT_voidEnable+0x1cc>
    2062:	89 85       	ldd	r24, Y+9	; 0x09
    2064:	9a 85       	ldd	r25, Y+10	; 0x0a
    2066:	00 97       	sbiw	r24, 0x00	; 0
    2068:	09 f0       	breq	.+2      	; 0x206c <INT_voidEnable+0x44>
    206a:	e9 c0       	rjmp	.+466    	; 0x223e <INT_voidEnable+0x216>
	{
		case EXT_INT0 :
			/*Edge Select*/
			switch (Copy_u8Edge)
    206c:	8a 81       	ldd	r24, Y+2	; 0x02
    206e:	28 2f       	mov	r18, r24
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	38 87       	std	Y+8, r19	; 0x08
    2074:	2f 83       	std	Y+7, r18	; 0x07
    2076:	8f 81       	ldd	r24, Y+7	; 0x07
    2078:	98 85       	ldd	r25, Y+8	; 0x08
    207a:	81 30       	cpi	r24, 0x01	; 1
    207c:	91 05       	cpc	r25, r1
    207e:	21 f1       	breq	.+72     	; 0x20c8 <INT_voidEnable+0xa0>
    2080:	2f 81       	ldd	r18, Y+7	; 0x07
    2082:	38 85       	ldd	r19, Y+8	; 0x08
    2084:	22 30       	cpi	r18, 0x02	; 2
    2086:	31 05       	cpc	r19, r1
    2088:	2c f4       	brge	.+10     	; 0x2094 <INT_voidEnable+0x6c>
    208a:	8f 81       	ldd	r24, Y+7	; 0x07
    208c:	98 85       	ldd	r25, Y+8	; 0x08
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	61 f0       	breq	.+24     	; 0x20aa <INT_voidEnable+0x82>
    2092:	46 c0       	rjmp	.+140    	; 0x2120 <INT_voidEnable+0xf8>
    2094:	2f 81       	ldd	r18, Y+7	; 0x07
    2096:	38 85       	ldd	r19, Y+8	; 0x08
    2098:	22 30       	cpi	r18, 0x02	; 2
    209a:	31 05       	cpc	r19, r1
    209c:	21 f1       	breq	.+72     	; 0x20e6 <INT_voidEnable+0xbe>
    209e:	8f 81       	ldd	r24, Y+7	; 0x07
    20a0:	98 85       	ldd	r25, Y+8	; 0x08
    20a2:	83 30       	cpi	r24, 0x03	; 3
    20a4:	91 05       	cpc	r25, r1
    20a6:	71 f1       	breq	.+92     	; 0x2104 <INT_voidEnable+0xdc>
    20a8:	3b c0       	rjmp	.+118    	; 0x2120 <INT_voidEnable+0xf8>
			{
				case INT_FALLING_EDGE 		: 
					CLR_BIT (MCUCR , ISC00);
    20aa:	a5 e5       	ldi	r26, 0x55	; 85
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	e5 e5       	ldi	r30, 0x55	; 85
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	8e 7f       	andi	r24, 0xFE	; 254
    20b6:	8c 93       	st	X, r24
					SET_BIT (MCUCR , ISC01);
    20b8:	a5 e5       	ldi	r26, 0x55	; 85
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	e5 e5       	ldi	r30, 0x55	; 85
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	82 60       	ori	r24, 0x02	; 2
    20c4:	8c 93       	st	X, r24
    20c6:	2c c0       	rjmp	.+88     	; 0x2120 <INT_voidEnable+0xf8>
					break ;
				case INT_RISING_EDGE  		:
					SET_BIT (MCUCR , ISC00);
    20c8:	a5 e5       	ldi	r26, 0x55	; 85
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	e5 e5       	ldi	r30, 0x55	; 85
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	81 60       	ori	r24, 0x01	; 1
    20d4:	8c 93       	st	X, r24
					SET_BIT (MCUCR , ISC01);
    20d6:	a5 e5       	ldi	r26, 0x55	; 85
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e5 e5       	ldi	r30, 0x55	; 85
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	82 60       	ori	r24, 0x02	; 2
    20e2:	8c 93       	st	X, r24
    20e4:	1d c0       	rjmp	.+58     	; 0x2120 <INT_voidEnable+0xf8>
					break ;
				case INT_ANY_LOGICAL_CHANGE :
					SET_BIT (MCUCR , ISC00);
    20e6:	a5 e5       	ldi	r26, 0x55	; 85
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	e5 e5       	ldi	r30, 0x55	; 85
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	81 60       	ori	r24, 0x01	; 1
    20f2:	8c 93       	st	X, r24
					CLR_BIT (MCUCR , ISC01);
    20f4:	a5 e5       	ldi	r26, 0x55	; 85
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	e5 e5       	ldi	r30, 0x55	; 85
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	8d 7f       	andi	r24, 0xFD	; 253
    2100:	8c 93       	st	X, r24
    2102:	0e c0       	rjmp	.+28     	; 0x2120 <INT_voidEnable+0xf8>
					break ;
				case INT_LOW_LEVEL 			:
					CLR_BIT (MCUCR , ISC00);
    2104:	a5 e5       	ldi	r26, 0x55	; 85
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	e5 e5       	ldi	r30, 0x55	; 85
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	8e 7f       	andi	r24, 0xFE	; 254
    2110:	8c 93       	st	X, r24
					CLR_BIT (MCUCR , ISC01);
    2112:	a5 e5       	ldi	r26, 0x55	; 85
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	e5 e5       	ldi	r30, 0x55	; 85
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	8d 7f       	andi	r24, 0xFD	; 253
    211e:	8c 93       	st	X, r24
					break ;
			}
			/*INT0 Enable*/
			SET_BIT (GICR , INT0);
    2120:	ab e5       	ldi	r26, 0x5B	; 91
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	eb e5       	ldi	r30, 0x5B	; 91
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	80 64       	ori	r24, 0x40	; 64
    212c:	8c 93       	st	X, r24
    212e:	87 c0       	rjmp	.+270    	; 0x223e <INT_voidEnable+0x216>
			break ;
		case EXT_INT1 :
			/*Edge Select*/
			switch (Copy_u8Edge)
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	28 2f       	mov	r18, r24
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	3e 83       	std	Y+6, r19	; 0x06
    2138:	2d 83       	std	Y+5, r18	; 0x05
    213a:	8d 81       	ldd	r24, Y+5	; 0x05
    213c:	9e 81       	ldd	r25, Y+6	; 0x06
    213e:	81 30       	cpi	r24, 0x01	; 1
    2140:	91 05       	cpc	r25, r1
    2142:	21 f1       	breq	.+72     	; 0x218c <INT_voidEnable+0x164>
    2144:	2d 81       	ldd	r18, Y+5	; 0x05
    2146:	3e 81       	ldd	r19, Y+6	; 0x06
    2148:	22 30       	cpi	r18, 0x02	; 2
    214a:	31 05       	cpc	r19, r1
    214c:	2c f4       	brge	.+10     	; 0x2158 <INT_voidEnable+0x130>
    214e:	8d 81       	ldd	r24, Y+5	; 0x05
    2150:	9e 81       	ldd	r25, Y+6	; 0x06
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	61 f0       	breq	.+24     	; 0x216e <INT_voidEnable+0x146>
    2156:	46 c0       	rjmp	.+140    	; 0x21e4 <INT_voidEnable+0x1bc>
    2158:	2d 81       	ldd	r18, Y+5	; 0x05
    215a:	3e 81       	ldd	r19, Y+6	; 0x06
    215c:	22 30       	cpi	r18, 0x02	; 2
    215e:	31 05       	cpc	r19, r1
    2160:	21 f1       	breq	.+72     	; 0x21aa <INT_voidEnable+0x182>
    2162:	8d 81       	ldd	r24, Y+5	; 0x05
    2164:	9e 81       	ldd	r25, Y+6	; 0x06
    2166:	83 30       	cpi	r24, 0x03	; 3
    2168:	91 05       	cpc	r25, r1
    216a:	71 f1       	breq	.+92     	; 0x21c8 <INT_voidEnable+0x1a0>
    216c:	3b c0       	rjmp	.+118    	; 0x21e4 <INT_voidEnable+0x1bc>
			{
				case INT_FALLING_EDGE 		: 
					CLR_BIT (MCUCR , ISC10);
    216e:	a5 e5       	ldi	r26, 0x55	; 85
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	e5 e5       	ldi	r30, 0x55	; 85
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	8b 7f       	andi	r24, 0xFB	; 251
    217a:	8c 93       	st	X, r24
					SET_BIT (MCUCR , ISC11);
    217c:	a5 e5       	ldi	r26, 0x55	; 85
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e5 e5       	ldi	r30, 0x55	; 85
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	88 60       	ori	r24, 0x08	; 8
    2188:	8c 93       	st	X, r24
    218a:	2c c0       	rjmp	.+88     	; 0x21e4 <INT_voidEnable+0x1bc>
					break ;
				case INT_RISING_EDGE  		:
					SET_BIT (MCUCR , ISC10);
    218c:	a5 e5       	ldi	r26, 0x55	; 85
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	e5 e5       	ldi	r30, 0x55	; 85
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	84 60       	ori	r24, 0x04	; 4
    2198:	8c 93       	st	X, r24
					SET_BIT (MCUCR , ISC11);
    219a:	a5 e5       	ldi	r26, 0x55	; 85
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	e5 e5       	ldi	r30, 0x55	; 85
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	88 60       	ori	r24, 0x08	; 8
    21a6:	8c 93       	st	X, r24
    21a8:	1d c0       	rjmp	.+58     	; 0x21e4 <INT_voidEnable+0x1bc>
					break ;
				case INT_ANY_LOGICAL_CHANGE :
					SET_BIT (MCUCR , ISC10);
    21aa:	a5 e5       	ldi	r26, 0x55	; 85
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	e5 e5       	ldi	r30, 0x55	; 85
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	84 60       	ori	r24, 0x04	; 4
    21b6:	8c 93       	st	X, r24
					CLR_BIT (MCUCR , ISC11);
    21b8:	a5 e5       	ldi	r26, 0x55	; 85
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	e5 e5       	ldi	r30, 0x55	; 85
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	87 7f       	andi	r24, 0xF7	; 247
    21c4:	8c 93       	st	X, r24
    21c6:	0e c0       	rjmp	.+28     	; 0x21e4 <INT_voidEnable+0x1bc>
					break ;
				case INT_LOW_LEVEL 			:
					CLR_BIT (MCUCR , ISC10);
    21c8:	a5 e5       	ldi	r26, 0x55	; 85
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	e5 e5       	ldi	r30, 0x55	; 85
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	8b 7f       	andi	r24, 0xFB	; 251
    21d4:	8c 93       	st	X, r24
					CLR_BIT (MCUCR , ISC11);
    21d6:	a5 e5       	ldi	r26, 0x55	; 85
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e5 e5       	ldi	r30, 0x55	; 85
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	87 7f       	andi	r24, 0xF7	; 247
    21e2:	8c 93       	st	X, r24
					break ;
			}
			/*INT1 Enable*/
			SET_BIT (GICR , INT1);
    21e4:	ab e5       	ldi	r26, 0x5B	; 91
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	eb e5       	ldi	r30, 0x5B	; 91
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	80 68       	ori	r24, 0x80	; 128
    21f0:	8c 93       	st	X, r24
    21f2:	25 c0       	rjmp	.+74     	; 0x223e <INT_voidEnable+0x216>
			break ;
		case EXT_INT2 :
			/*Edge Select*/
			switch (Copy_u8Edge)
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	28 2f       	mov	r18, r24
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	3c 83       	std	Y+4, r19	; 0x04
    21fc:	2b 83       	std	Y+3, r18	; 0x03
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	9c 81       	ldd	r25, Y+4	; 0x04
    2202:	00 97       	sbiw	r24, 0x00	; 0
    2204:	31 f0       	breq	.+12     	; 0x2212 <INT_voidEnable+0x1ea>
    2206:	2b 81       	ldd	r18, Y+3	; 0x03
    2208:	3c 81       	ldd	r19, Y+4	; 0x04
    220a:	21 30       	cpi	r18, 0x01	; 1
    220c:	31 05       	cpc	r19, r1
    220e:	49 f0       	breq	.+18     	; 0x2222 <INT_voidEnable+0x1fa>
    2210:	0f c0       	rjmp	.+30     	; 0x2230 <INT_voidEnable+0x208>
			{
			case INT_FALLING_EDGE 		: 
				CLR_BIT(MCUCSR , ISC2);
    2212:	a4 e5       	ldi	r26, 0x54	; 84
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e4 e5       	ldi	r30, 0x54	; 84
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	8f 7b       	andi	r24, 0xBF	; 191
    221e:	8c 93       	st	X, r24
    2220:	07 c0       	rjmp	.+14     	; 0x2230 <INT_voidEnable+0x208>
				break ;
			case INT_RISING_EDGE  		:
				SET_BIT(MCUCSR , ISC2);
    2222:	a4 e5       	ldi	r26, 0x54	; 84
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	e4 e5       	ldi	r30, 0x54	; 84
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	80 64       	ori	r24, 0x40	; 64
    222e:	8c 93       	st	X, r24
				break ;
			}
			/*INT2 Enable*/
			SET_BIT(GICR , INT2);
    2230:	ab e5       	ldi	r26, 0x5B	; 91
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	eb e5       	ldi	r30, 0x5B	; 91
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	80 62       	ori	r24, 0x20	; 32
    223c:	8c 93       	st	X, r24
			break ;
	}
}
    223e:	2a 96       	adiw	r28, 0x0a	; 10
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <INT_voidDisable>:


void INT_voidDisable (u8 Copy_u8INTIndex)
{
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	00 d0       	rcall	.+0      	; 0x2256 <INT_voidDisable+0x6>
    2256:	0f 92       	push	r0
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8INTIndex)
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	28 2f       	mov	r18, r24
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	3b 83       	std	Y+3, r19	; 0x03
    2266:	2a 83       	std	Y+2, r18	; 0x02
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	9b 81       	ldd	r25, Y+3	; 0x03
    226c:	81 30       	cpi	r24, 0x01	; 1
    226e:	91 05       	cpc	r25, r1
    2270:	89 f0       	breq	.+34     	; 0x2294 <INT_voidDisable+0x44>
    2272:	2a 81       	ldd	r18, Y+2	; 0x02
    2274:	3b 81       	ldd	r19, Y+3	; 0x03
    2276:	22 30       	cpi	r18, 0x02	; 2
    2278:	31 05       	cpc	r19, r1
    227a:	a1 f0       	breq	.+40     	; 0x22a4 <INT_voidDisable+0x54>
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	9b 81       	ldd	r25, Y+3	; 0x03
    2280:	00 97       	sbiw	r24, 0x00	; 0
    2282:	b9 f4       	brne	.+46     	; 0x22b2 <INT_voidDisable+0x62>
	{
		case EXT_INT0 :  CLR_BIT (GICR , INT0) ; break ;
    2284:	ab e5       	ldi	r26, 0x5B	; 91
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	eb e5       	ldi	r30, 0x5B	; 91
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	8f 7b       	andi	r24, 0xBF	; 191
    2290:	8c 93       	st	X, r24
    2292:	0f c0       	rjmp	.+30     	; 0x22b2 <INT_voidDisable+0x62>
		case EXT_INT1 :  CLR_BIT (GICR , INT1) ; break ;
    2294:	ab e5       	ldi	r26, 0x5B	; 91
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	eb e5       	ldi	r30, 0x5B	; 91
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	8f 77       	andi	r24, 0x7F	; 127
    22a0:	8c 93       	st	X, r24
    22a2:	07 c0       	rjmp	.+14     	; 0x22b2 <INT_voidDisable+0x62>
		case EXT_INT2 :  CLR_BIT (GICR , INT2) ; break ;
    22a4:	ab e5       	ldi	r26, 0x5B	; 91
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	eb e5       	ldi	r30, 0x5B	; 91
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	8f 7d       	andi	r24, 0xDF	; 223
    22b0:	8c 93       	st	X, r24
		
	}
}
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	cf 91       	pop	r28
    22ba:	df 91       	pop	r29
    22bc:	08 95       	ret

000022be <INT_voidSetCallBack>:

void INT_voidSetCallBack (u8 Copy_u8Index , void (*Copy_voidPFNameFunc) (void))
{
    22be:	df 93       	push	r29
    22c0:	cf 93       	push	r28
    22c2:	00 d0       	rcall	.+0      	; 0x22c4 <INT_voidSetCallBack+0x6>
    22c4:	0f 92       	push	r0
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
    22ca:	89 83       	std	Y+1, r24	; 0x01
    22cc:	7b 83       	std	Y+3, r23	; 0x03
    22ce:	6a 83       	std	Y+2, r22	; 0x02
	INT_voidPFCall[Copy_u8Index] = Copy_voidPFNameFunc ;
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	88 2f       	mov	r24, r24
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	88 0f       	add	r24, r24
    22d8:	99 1f       	adc	r25, r25
    22da:	fc 01       	movw	r30, r24
    22dc:	e8 58       	subi	r30, 0x88	; 136
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	9b 81       	ldd	r25, Y+3	; 0x03
    22e4:	91 83       	std	Z+1, r25	; 0x01
    22e6:	80 83       	st	Z, r24
}
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <__vector_1>:

ISR(INT0_vect)
{
    22f4:	1f 92       	push	r1
    22f6:	0f 92       	push	r0
    22f8:	0f b6       	in	r0, 0x3f	; 63
    22fa:	0f 92       	push	r0
    22fc:	11 24       	eor	r1, r1
    22fe:	2f 93       	push	r18
    2300:	3f 93       	push	r19
    2302:	4f 93       	push	r20
    2304:	5f 93       	push	r21
    2306:	6f 93       	push	r22
    2308:	7f 93       	push	r23
    230a:	8f 93       	push	r24
    230c:	9f 93       	push	r25
    230e:	af 93       	push	r26
    2310:	bf 93       	push	r27
    2312:	ef 93       	push	r30
    2314:	ff 93       	push	r31
    2316:	df 93       	push	r29
    2318:	cf 93       	push	r28
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
	if (INT_voidPFCall[0] != NULL)
    231e:	80 91 78 00 	lds	r24, 0x0078
    2322:	90 91 79 00 	lds	r25, 0x0079
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	29 f0       	breq	.+10     	; 0x2334 <__vector_1+0x40>
	INT_voidPFCall[0]();
    232a:	e0 91 78 00 	lds	r30, 0x0078
    232e:	f0 91 79 00 	lds	r31, 0x0079
    2332:	09 95       	icall
}
    2334:	cf 91       	pop	r28
    2336:	df 91       	pop	r29
    2338:	ff 91       	pop	r31
    233a:	ef 91       	pop	r30
    233c:	bf 91       	pop	r27
    233e:	af 91       	pop	r26
    2340:	9f 91       	pop	r25
    2342:	8f 91       	pop	r24
    2344:	7f 91       	pop	r23
    2346:	6f 91       	pop	r22
    2348:	5f 91       	pop	r21
    234a:	4f 91       	pop	r20
    234c:	3f 91       	pop	r19
    234e:	2f 91       	pop	r18
    2350:	0f 90       	pop	r0
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	0f 90       	pop	r0
    2356:	1f 90       	pop	r1
    2358:	18 95       	reti

0000235a <__vector_2>:

ISR(INT1_vect)
{
    235a:	1f 92       	push	r1
    235c:	0f 92       	push	r0
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	0f 92       	push	r0
    2362:	11 24       	eor	r1, r1
    2364:	2f 93       	push	r18
    2366:	3f 93       	push	r19
    2368:	4f 93       	push	r20
    236a:	5f 93       	push	r21
    236c:	6f 93       	push	r22
    236e:	7f 93       	push	r23
    2370:	8f 93       	push	r24
    2372:	9f 93       	push	r25
    2374:	af 93       	push	r26
    2376:	bf 93       	push	r27
    2378:	ef 93       	push	r30
    237a:	ff 93       	push	r31
    237c:	df 93       	push	r29
    237e:	cf 93       	push	r28
    2380:	cd b7       	in	r28, 0x3d	; 61
    2382:	de b7       	in	r29, 0x3e	; 62
	if (INT_voidPFCall[1] != NULL)
    2384:	80 91 7a 00 	lds	r24, 0x007A
    2388:	90 91 7b 00 	lds	r25, 0x007B
    238c:	00 97       	sbiw	r24, 0x00	; 0
    238e:	29 f0       	breq	.+10     	; 0x239a <__vector_2+0x40>
	INT_voidPFCall[1]();
    2390:	e0 91 7a 00 	lds	r30, 0x007A
    2394:	f0 91 7b 00 	lds	r31, 0x007B
    2398:	09 95       	icall
}
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	ff 91       	pop	r31
    23a0:	ef 91       	pop	r30
    23a2:	bf 91       	pop	r27
    23a4:	af 91       	pop	r26
    23a6:	9f 91       	pop	r25
    23a8:	8f 91       	pop	r24
    23aa:	7f 91       	pop	r23
    23ac:	6f 91       	pop	r22
    23ae:	5f 91       	pop	r21
    23b0:	4f 91       	pop	r20
    23b2:	3f 91       	pop	r19
    23b4:	2f 91       	pop	r18
    23b6:	0f 90       	pop	r0
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	0f 90       	pop	r0
    23bc:	1f 90       	pop	r1
    23be:	18 95       	reti

000023c0 <__vector_3>:
ISR(INT2_vect)
{
    23c0:	1f 92       	push	r1
    23c2:	0f 92       	push	r0
    23c4:	0f b6       	in	r0, 0x3f	; 63
    23c6:	0f 92       	push	r0
    23c8:	11 24       	eor	r1, r1
    23ca:	2f 93       	push	r18
    23cc:	3f 93       	push	r19
    23ce:	4f 93       	push	r20
    23d0:	5f 93       	push	r21
    23d2:	6f 93       	push	r22
    23d4:	7f 93       	push	r23
    23d6:	8f 93       	push	r24
    23d8:	9f 93       	push	r25
    23da:	af 93       	push	r26
    23dc:	bf 93       	push	r27
    23de:	ef 93       	push	r30
    23e0:	ff 93       	push	r31
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
	if (INT_voidPFCall[2] != NULL)
    23ea:	80 91 7c 00 	lds	r24, 0x007C
    23ee:	90 91 7d 00 	lds	r25, 0x007D
    23f2:	00 97       	sbiw	r24, 0x00	; 0
    23f4:	29 f0       	breq	.+10     	; 0x2400 <__vector_3+0x40>
	INT_voidPFCall[2]();
    23f6:	e0 91 7c 00 	lds	r30, 0x007C
    23fa:	f0 91 7d 00 	lds	r31, 0x007D
    23fe:	09 95       	icall
}
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	ff 91       	pop	r31
    2406:	ef 91       	pop	r30
    2408:	bf 91       	pop	r27
    240a:	af 91       	pop	r26
    240c:	9f 91       	pop	r25
    240e:	8f 91       	pop	r24
    2410:	7f 91       	pop	r23
    2412:	6f 91       	pop	r22
    2414:	5f 91       	pop	r21
    2416:	4f 91       	pop	r20
    2418:	3f 91       	pop	r19
    241a:	2f 91       	pop	r18
    241c:	0f 90       	pop	r0
    241e:	0f be       	out	0x3f, r0	; 63
    2420:	0f 90       	pop	r0
    2422:	1f 90       	pop	r1
    2424:	18 95       	reti

00002426 <DIO_voidSetPinDirection>:
#include "../../01-LIB/BIT_MATH.h"

#include "DIO.h"

void DIO_voidSetPinDirection (u8 Copy_u8Port , u8 Copy_u8Pin  , u8 Copy_u8Direction)
{
    2426:	df 93       	push	r29
    2428:	cf 93       	push	r28
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	27 97       	sbiw	r28, 0x07	; 7
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	de bf       	out	0x3e, r29	; 62
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	cd bf       	out	0x3d, r28	; 61
    243a:	89 83       	std	Y+1, r24	; 0x01
    243c:	6a 83       	std	Y+2, r22	; 0x02
    243e:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Direction == DIO_OUTPUT)
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	81 30       	cpi	r24, 0x01	; 1
    2444:	09 f0       	breq	.+2      	; 0x2448 <DIO_voidSetPinDirection+0x22>
    2446:	6f c0       	rjmp	.+222    	; 0x2526 <DIO_voidSetPinDirection+0x100>
	{
		switch (Copy_u8Port)
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	28 2f       	mov	r18, r24
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	3f 83       	std	Y+7, r19	; 0x07
    2450:	2e 83       	std	Y+6, r18	; 0x06
    2452:	8e 81       	ldd	r24, Y+6	; 0x06
    2454:	9f 81       	ldd	r25, Y+7	; 0x07
    2456:	81 30       	cpi	r24, 0x01	; 1
    2458:	91 05       	cpc	r25, r1
    245a:	49 f1       	breq	.+82     	; 0x24ae <DIO_voidSetPinDirection+0x88>
    245c:	2e 81       	ldd	r18, Y+6	; 0x06
    245e:	3f 81       	ldd	r19, Y+7	; 0x07
    2460:	22 30       	cpi	r18, 0x02	; 2
    2462:	31 05       	cpc	r19, r1
    2464:	2c f4       	brge	.+10     	; 0x2470 <DIO_voidSetPinDirection+0x4a>
    2466:	8e 81       	ldd	r24, Y+6	; 0x06
    2468:	9f 81       	ldd	r25, Y+7	; 0x07
    246a:	00 97       	sbiw	r24, 0x00	; 0
    246c:	61 f0       	breq	.+24     	; 0x2486 <DIO_voidSetPinDirection+0x60>
    246e:	d2 c0       	rjmp	.+420    	; 0x2614 <DIO_voidSetPinDirection+0x1ee>
    2470:	2e 81       	ldd	r18, Y+6	; 0x06
    2472:	3f 81       	ldd	r19, Y+7	; 0x07
    2474:	22 30       	cpi	r18, 0x02	; 2
    2476:	31 05       	cpc	r19, r1
    2478:	71 f1       	breq	.+92     	; 0x24d6 <DIO_voidSetPinDirection+0xb0>
    247a:	8e 81       	ldd	r24, Y+6	; 0x06
    247c:	9f 81       	ldd	r25, Y+7	; 0x07
    247e:	83 30       	cpi	r24, 0x03	; 3
    2480:	91 05       	cpc	r25, r1
    2482:	e9 f1       	breq	.+122    	; 0x24fe <DIO_voidSetPinDirection+0xd8>
    2484:	c7 c0       	rjmp	.+398    	; 0x2614 <DIO_voidSetPinDirection+0x1ee>
		{
			case DIO_PORTA : SET_BIT(DDRA , Copy_u8Pin); break ;
    2486:	aa e3       	ldi	r26, 0x3A	; 58
    2488:	b0 e0       	ldi	r27, 0x00	; 0
    248a:	ea e3       	ldi	r30, 0x3A	; 58
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	80 81       	ld	r24, Z
    2490:	48 2f       	mov	r20, r24
    2492:	8a 81       	ldd	r24, Y+2	; 0x02
    2494:	28 2f       	mov	r18, r24
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	02 2e       	mov	r0, r18
    249e:	02 c0       	rjmp	.+4      	; 0x24a4 <DIO_voidSetPinDirection+0x7e>
    24a0:	88 0f       	add	r24, r24
    24a2:	99 1f       	adc	r25, r25
    24a4:	0a 94       	dec	r0
    24a6:	e2 f7       	brpl	.-8      	; 0x24a0 <DIO_voidSetPinDirection+0x7a>
    24a8:	84 2b       	or	r24, r20
    24aa:	8c 93       	st	X, r24
    24ac:	b3 c0       	rjmp	.+358    	; 0x2614 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTB : SET_BIT(DDRB , Copy_u8Pin); break ;
    24ae:	a7 e3       	ldi	r26, 0x37	; 55
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	e7 e3       	ldi	r30, 0x37	; 55
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	48 2f       	mov	r20, r24
    24ba:	8a 81       	ldd	r24, Y+2	; 0x02
    24bc:	28 2f       	mov	r18, r24
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	02 2e       	mov	r0, r18
    24c6:	02 c0       	rjmp	.+4      	; 0x24cc <DIO_voidSetPinDirection+0xa6>
    24c8:	88 0f       	add	r24, r24
    24ca:	99 1f       	adc	r25, r25
    24cc:	0a 94       	dec	r0
    24ce:	e2 f7       	brpl	.-8      	; 0x24c8 <DIO_voidSetPinDirection+0xa2>
    24d0:	84 2b       	or	r24, r20
    24d2:	8c 93       	st	X, r24
    24d4:	9f c0       	rjmp	.+318    	; 0x2614 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTC : SET_BIT(DDRC , Copy_u8Pin); break ;
    24d6:	a4 e3       	ldi	r26, 0x34	; 52
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e4 e3       	ldi	r30, 0x34	; 52
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	48 2f       	mov	r20, r24
    24e2:	8a 81       	ldd	r24, Y+2	; 0x02
    24e4:	28 2f       	mov	r18, r24
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	02 2e       	mov	r0, r18
    24ee:	02 c0       	rjmp	.+4      	; 0x24f4 <DIO_voidSetPinDirection+0xce>
    24f0:	88 0f       	add	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	0a 94       	dec	r0
    24f6:	e2 f7       	brpl	.-8      	; 0x24f0 <DIO_voidSetPinDirection+0xca>
    24f8:	84 2b       	or	r24, r20
    24fa:	8c 93       	st	X, r24
    24fc:	8b c0       	rjmp	.+278    	; 0x2614 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTD : SET_BIT(DDRD , Copy_u8Pin); break ;
    24fe:	a1 e3       	ldi	r26, 0x31	; 49
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	e1 e3       	ldi	r30, 0x31	; 49
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	48 2f       	mov	r20, r24
    250a:	8a 81       	ldd	r24, Y+2	; 0x02
    250c:	28 2f       	mov	r18, r24
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	02 2e       	mov	r0, r18
    2516:	02 c0       	rjmp	.+4      	; 0x251c <DIO_voidSetPinDirection+0xf6>
    2518:	88 0f       	add	r24, r24
    251a:	99 1f       	adc	r25, r25
    251c:	0a 94       	dec	r0
    251e:	e2 f7       	brpl	.-8      	; 0x2518 <DIO_voidSetPinDirection+0xf2>
    2520:	84 2b       	or	r24, r20
    2522:	8c 93       	st	X, r24
    2524:	77 c0       	rjmp	.+238    	; 0x2614 <DIO_voidSetPinDirection+0x1ee>
		}
	}
	else if (Copy_u8Direction == DIO_INPUT)
    2526:	8b 81       	ldd	r24, Y+3	; 0x03
    2528:	88 23       	and	r24, r24
    252a:	09 f0       	breq	.+2      	; 0x252e <DIO_voidSetPinDirection+0x108>
    252c:	73 c0       	rjmp	.+230    	; 0x2614 <DIO_voidSetPinDirection+0x1ee>
	{
		switch (Copy_u8Port)
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	28 2f       	mov	r18, r24
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	3d 83       	std	Y+5, r19	; 0x05
    2536:	2c 83       	std	Y+4, r18	; 0x04
    2538:	8c 81       	ldd	r24, Y+4	; 0x04
    253a:	9d 81       	ldd	r25, Y+5	; 0x05
    253c:	81 30       	cpi	r24, 0x01	; 1
    253e:	91 05       	cpc	r25, r1
    2540:	59 f1       	breq	.+86     	; 0x2598 <DIO_voidSetPinDirection+0x172>
    2542:	2c 81       	ldd	r18, Y+4	; 0x04
    2544:	3d 81       	ldd	r19, Y+5	; 0x05
    2546:	22 30       	cpi	r18, 0x02	; 2
    2548:	31 05       	cpc	r19, r1
    254a:	2c f4       	brge	.+10     	; 0x2556 <DIO_voidSetPinDirection+0x130>
    254c:	8c 81       	ldd	r24, Y+4	; 0x04
    254e:	9d 81       	ldd	r25, Y+5	; 0x05
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	69 f0       	breq	.+26     	; 0x256e <DIO_voidSetPinDirection+0x148>
    2554:	5f c0       	rjmp	.+190    	; 0x2614 <DIO_voidSetPinDirection+0x1ee>
    2556:	2c 81       	ldd	r18, Y+4	; 0x04
    2558:	3d 81       	ldd	r19, Y+5	; 0x05
    255a:	22 30       	cpi	r18, 0x02	; 2
    255c:	31 05       	cpc	r19, r1
    255e:	89 f1       	breq	.+98     	; 0x25c2 <DIO_voidSetPinDirection+0x19c>
    2560:	8c 81       	ldd	r24, Y+4	; 0x04
    2562:	9d 81       	ldd	r25, Y+5	; 0x05
    2564:	83 30       	cpi	r24, 0x03	; 3
    2566:	91 05       	cpc	r25, r1
    2568:	09 f4       	brne	.+2      	; 0x256c <DIO_voidSetPinDirection+0x146>
    256a:	40 c0       	rjmp	.+128    	; 0x25ec <DIO_voidSetPinDirection+0x1c6>
    256c:	53 c0       	rjmp	.+166    	; 0x2614 <DIO_voidSetPinDirection+0x1ee>
		{
			case DIO_PORTA : CLR_BIT(DDRA , Copy_u8Pin); break ;
    256e:	aa e3       	ldi	r26, 0x3A	; 58
    2570:	b0 e0       	ldi	r27, 0x00	; 0
    2572:	ea e3       	ldi	r30, 0x3A	; 58
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	80 81       	ld	r24, Z
    2578:	48 2f       	mov	r20, r24
    257a:	8a 81       	ldd	r24, Y+2	; 0x02
    257c:	28 2f       	mov	r18, r24
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	02 2e       	mov	r0, r18
    2586:	02 c0       	rjmp	.+4      	; 0x258c <DIO_voidSetPinDirection+0x166>
    2588:	88 0f       	add	r24, r24
    258a:	99 1f       	adc	r25, r25
    258c:	0a 94       	dec	r0
    258e:	e2 f7       	brpl	.-8      	; 0x2588 <DIO_voidSetPinDirection+0x162>
    2590:	80 95       	com	r24
    2592:	84 23       	and	r24, r20
    2594:	8c 93       	st	X, r24
    2596:	3e c0       	rjmp	.+124    	; 0x2614 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTB : CLR_BIT(DDRB , Copy_u8Pin); break ;
    2598:	a7 e3       	ldi	r26, 0x37	; 55
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	e7 e3       	ldi	r30, 0x37	; 55
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	48 2f       	mov	r20, r24
    25a4:	8a 81       	ldd	r24, Y+2	; 0x02
    25a6:	28 2f       	mov	r18, r24
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	02 2e       	mov	r0, r18
    25b0:	02 c0       	rjmp	.+4      	; 0x25b6 <DIO_voidSetPinDirection+0x190>
    25b2:	88 0f       	add	r24, r24
    25b4:	99 1f       	adc	r25, r25
    25b6:	0a 94       	dec	r0
    25b8:	e2 f7       	brpl	.-8      	; 0x25b2 <DIO_voidSetPinDirection+0x18c>
    25ba:	80 95       	com	r24
    25bc:	84 23       	and	r24, r20
    25be:	8c 93       	st	X, r24
    25c0:	29 c0       	rjmp	.+82     	; 0x2614 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTC : CLR_BIT(DDRC , Copy_u8Pin); break ;
    25c2:	a4 e3       	ldi	r26, 0x34	; 52
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	e4 e3       	ldi	r30, 0x34	; 52
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	48 2f       	mov	r20, r24
    25ce:	8a 81       	ldd	r24, Y+2	; 0x02
    25d0:	28 2f       	mov	r18, r24
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	02 2e       	mov	r0, r18
    25da:	02 c0       	rjmp	.+4      	; 0x25e0 <DIO_voidSetPinDirection+0x1ba>
    25dc:	88 0f       	add	r24, r24
    25de:	99 1f       	adc	r25, r25
    25e0:	0a 94       	dec	r0
    25e2:	e2 f7       	brpl	.-8      	; 0x25dc <DIO_voidSetPinDirection+0x1b6>
    25e4:	80 95       	com	r24
    25e6:	84 23       	and	r24, r20
    25e8:	8c 93       	st	X, r24
    25ea:	14 c0       	rjmp	.+40     	; 0x2614 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTD : CLR_BIT(DDRD , Copy_u8Pin); break ;
    25ec:	a1 e3       	ldi	r26, 0x31	; 49
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	e1 e3       	ldi	r30, 0x31	; 49
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	48 2f       	mov	r20, r24
    25f8:	8a 81       	ldd	r24, Y+2	; 0x02
    25fa:	28 2f       	mov	r18, r24
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	02 2e       	mov	r0, r18
    2604:	02 c0       	rjmp	.+4      	; 0x260a <DIO_voidSetPinDirection+0x1e4>
    2606:	88 0f       	add	r24, r24
    2608:	99 1f       	adc	r25, r25
    260a:	0a 94       	dec	r0
    260c:	e2 f7       	brpl	.-8      	; 0x2606 <DIO_voidSetPinDirection+0x1e0>
    260e:	80 95       	com	r24
    2610:	84 23       	and	r24, r20
    2612:	8c 93       	st	X, r24
		}
	}
	
}
    2614:	27 96       	adiw	r28, 0x07	; 7
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	f8 94       	cli
    261a:	de bf       	out	0x3e, r29	; 62
    261c:	0f be       	out	0x3f, r0	; 63
    261e:	cd bf       	out	0x3d, r28	; 61
    2620:	cf 91       	pop	r28
    2622:	df 91       	pop	r29
    2624:	08 95       	ret

00002626 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue (u8 Copy_u8Port , u8 Copy_u8Pin  , u8 Copy_u8State)
{
    2626:	df 93       	push	r29
    2628:	cf 93       	push	r28
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	27 97       	sbiw	r28, 0x07	; 7
    2630:	0f b6       	in	r0, 0x3f	; 63
    2632:	f8 94       	cli
    2634:	de bf       	out	0x3e, r29	; 62
    2636:	0f be       	out	0x3f, r0	; 63
    2638:	cd bf       	out	0x3d, r28	; 61
    263a:	89 83       	std	Y+1, r24	; 0x01
    263c:	6a 83       	std	Y+2, r22	; 0x02
    263e:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8State == DIO_HIGH)
    2640:	8b 81       	ldd	r24, Y+3	; 0x03
    2642:	81 30       	cpi	r24, 0x01	; 1
    2644:	09 f0       	breq	.+2      	; 0x2648 <DIO_voidSetPinValue+0x22>
    2646:	6f c0       	rjmp	.+222    	; 0x2726 <DIO_voidSetPinValue+0x100>
	{
		switch (Copy_u8Port)
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	28 2f       	mov	r18, r24
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	3f 83       	std	Y+7, r19	; 0x07
    2650:	2e 83       	std	Y+6, r18	; 0x06
    2652:	8e 81       	ldd	r24, Y+6	; 0x06
    2654:	9f 81       	ldd	r25, Y+7	; 0x07
    2656:	81 30       	cpi	r24, 0x01	; 1
    2658:	91 05       	cpc	r25, r1
    265a:	49 f1       	breq	.+82     	; 0x26ae <DIO_voidSetPinValue+0x88>
    265c:	2e 81       	ldd	r18, Y+6	; 0x06
    265e:	3f 81       	ldd	r19, Y+7	; 0x07
    2660:	22 30       	cpi	r18, 0x02	; 2
    2662:	31 05       	cpc	r19, r1
    2664:	2c f4       	brge	.+10     	; 0x2670 <DIO_voidSetPinValue+0x4a>
    2666:	8e 81       	ldd	r24, Y+6	; 0x06
    2668:	9f 81       	ldd	r25, Y+7	; 0x07
    266a:	00 97       	sbiw	r24, 0x00	; 0
    266c:	61 f0       	breq	.+24     	; 0x2686 <DIO_voidSetPinValue+0x60>
    266e:	d2 c0       	rjmp	.+420    	; 0x2814 <DIO_voidSetPinValue+0x1ee>
    2670:	2e 81       	ldd	r18, Y+6	; 0x06
    2672:	3f 81       	ldd	r19, Y+7	; 0x07
    2674:	22 30       	cpi	r18, 0x02	; 2
    2676:	31 05       	cpc	r19, r1
    2678:	71 f1       	breq	.+92     	; 0x26d6 <DIO_voidSetPinValue+0xb0>
    267a:	8e 81       	ldd	r24, Y+6	; 0x06
    267c:	9f 81       	ldd	r25, Y+7	; 0x07
    267e:	83 30       	cpi	r24, 0x03	; 3
    2680:	91 05       	cpc	r25, r1
    2682:	e9 f1       	breq	.+122    	; 0x26fe <DIO_voidSetPinValue+0xd8>
    2684:	c7 c0       	rjmp	.+398    	; 0x2814 <DIO_voidSetPinValue+0x1ee>
		{
			case DIO_PORTA : SET_BIT(PORTA , Copy_u8Pin); break ;
    2686:	ab e3       	ldi	r26, 0x3B	; 59
    2688:	b0 e0       	ldi	r27, 0x00	; 0
    268a:	eb e3       	ldi	r30, 0x3B	; 59
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	80 81       	ld	r24, Z
    2690:	48 2f       	mov	r20, r24
    2692:	8a 81       	ldd	r24, Y+2	; 0x02
    2694:	28 2f       	mov	r18, r24
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	02 2e       	mov	r0, r18
    269e:	02 c0       	rjmp	.+4      	; 0x26a4 <DIO_voidSetPinValue+0x7e>
    26a0:	88 0f       	add	r24, r24
    26a2:	99 1f       	adc	r25, r25
    26a4:	0a 94       	dec	r0
    26a6:	e2 f7       	brpl	.-8      	; 0x26a0 <DIO_voidSetPinValue+0x7a>
    26a8:	84 2b       	or	r24, r20
    26aa:	8c 93       	st	X, r24
    26ac:	b3 c0       	rjmp	.+358    	; 0x2814 <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTB : SET_BIT(PORTB , Copy_u8Pin); break ;
    26ae:	a8 e3       	ldi	r26, 0x38	; 56
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	e8 e3       	ldi	r30, 0x38	; 56
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	48 2f       	mov	r20, r24
    26ba:	8a 81       	ldd	r24, Y+2	; 0x02
    26bc:	28 2f       	mov	r18, r24
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	02 2e       	mov	r0, r18
    26c6:	02 c0       	rjmp	.+4      	; 0x26cc <DIO_voidSetPinValue+0xa6>
    26c8:	88 0f       	add	r24, r24
    26ca:	99 1f       	adc	r25, r25
    26cc:	0a 94       	dec	r0
    26ce:	e2 f7       	brpl	.-8      	; 0x26c8 <DIO_voidSetPinValue+0xa2>
    26d0:	84 2b       	or	r24, r20
    26d2:	8c 93       	st	X, r24
    26d4:	9f c0       	rjmp	.+318    	; 0x2814 <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTC : SET_BIT(PORTC , Copy_u8Pin); break ;
    26d6:	a5 e3       	ldi	r26, 0x35	; 53
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	e5 e3       	ldi	r30, 0x35	; 53
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	80 81       	ld	r24, Z
    26e0:	48 2f       	mov	r20, r24
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	28 2f       	mov	r18, r24
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	02 2e       	mov	r0, r18
    26ee:	02 c0       	rjmp	.+4      	; 0x26f4 <DIO_voidSetPinValue+0xce>
    26f0:	88 0f       	add	r24, r24
    26f2:	99 1f       	adc	r25, r25
    26f4:	0a 94       	dec	r0
    26f6:	e2 f7       	brpl	.-8      	; 0x26f0 <DIO_voidSetPinValue+0xca>
    26f8:	84 2b       	or	r24, r20
    26fa:	8c 93       	st	X, r24
    26fc:	8b c0       	rjmp	.+278    	; 0x2814 <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTD : SET_BIT(PORTD , Copy_u8Pin); break ;
    26fe:	a2 e3       	ldi	r26, 0x32	; 50
    2700:	b0 e0       	ldi	r27, 0x00	; 0
    2702:	e2 e3       	ldi	r30, 0x32	; 50
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z
    2708:	48 2f       	mov	r20, r24
    270a:	8a 81       	ldd	r24, Y+2	; 0x02
    270c:	28 2f       	mov	r18, r24
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	02 2e       	mov	r0, r18
    2716:	02 c0       	rjmp	.+4      	; 0x271c <DIO_voidSetPinValue+0xf6>
    2718:	88 0f       	add	r24, r24
    271a:	99 1f       	adc	r25, r25
    271c:	0a 94       	dec	r0
    271e:	e2 f7       	brpl	.-8      	; 0x2718 <DIO_voidSetPinValue+0xf2>
    2720:	84 2b       	or	r24, r20
    2722:	8c 93       	st	X, r24
    2724:	77 c0       	rjmp	.+238    	; 0x2814 <DIO_voidSetPinValue+0x1ee>
		}
	}
	else if (Copy_u8State == DIO_LOW)
    2726:	8b 81       	ldd	r24, Y+3	; 0x03
    2728:	88 23       	and	r24, r24
    272a:	09 f0       	breq	.+2      	; 0x272e <DIO_voidSetPinValue+0x108>
    272c:	73 c0       	rjmp	.+230    	; 0x2814 <DIO_voidSetPinValue+0x1ee>
	{
		switch (Copy_u8Port)
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	28 2f       	mov	r18, r24
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	3d 83       	std	Y+5, r19	; 0x05
    2736:	2c 83       	std	Y+4, r18	; 0x04
    2738:	8c 81       	ldd	r24, Y+4	; 0x04
    273a:	9d 81       	ldd	r25, Y+5	; 0x05
    273c:	81 30       	cpi	r24, 0x01	; 1
    273e:	91 05       	cpc	r25, r1
    2740:	59 f1       	breq	.+86     	; 0x2798 <DIO_voidSetPinValue+0x172>
    2742:	2c 81       	ldd	r18, Y+4	; 0x04
    2744:	3d 81       	ldd	r19, Y+5	; 0x05
    2746:	22 30       	cpi	r18, 0x02	; 2
    2748:	31 05       	cpc	r19, r1
    274a:	2c f4       	brge	.+10     	; 0x2756 <DIO_voidSetPinValue+0x130>
    274c:	8c 81       	ldd	r24, Y+4	; 0x04
    274e:	9d 81       	ldd	r25, Y+5	; 0x05
    2750:	00 97       	sbiw	r24, 0x00	; 0
    2752:	69 f0       	breq	.+26     	; 0x276e <DIO_voidSetPinValue+0x148>
    2754:	5f c0       	rjmp	.+190    	; 0x2814 <DIO_voidSetPinValue+0x1ee>
    2756:	2c 81       	ldd	r18, Y+4	; 0x04
    2758:	3d 81       	ldd	r19, Y+5	; 0x05
    275a:	22 30       	cpi	r18, 0x02	; 2
    275c:	31 05       	cpc	r19, r1
    275e:	89 f1       	breq	.+98     	; 0x27c2 <DIO_voidSetPinValue+0x19c>
    2760:	8c 81       	ldd	r24, Y+4	; 0x04
    2762:	9d 81       	ldd	r25, Y+5	; 0x05
    2764:	83 30       	cpi	r24, 0x03	; 3
    2766:	91 05       	cpc	r25, r1
    2768:	09 f4       	brne	.+2      	; 0x276c <DIO_voidSetPinValue+0x146>
    276a:	40 c0       	rjmp	.+128    	; 0x27ec <DIO_voidSetPinValue+0x1c6>
    276c:	53 c0       	rjmp	.+166    	; 0x2814 <DIO_voidSetPinValue+0x1ee>
		{
			case DIO_PORTA : CLR_BIT(PORTA , Copy_u8Pin); break ;
    276e:	ab e3       	ldi	r26, 0x3B	; 59
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	eb e3       	ldi	r30, 0x3B	; 59
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	48 2f       	mov	r20, r24
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	28 2f       	mov	r18, r24
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	02 2e       	mov	r0, r18
    2786:	02 c0       	rjmp	.+4      	; 0x278c <DIO_voidSetPinValue+0x166>
    2788:	88 0f       	add	r24, r24
    278a:	99 1f       	adc	r25, r25
    278c:	0a 94       	dec	r0
    278e:	e2 f7       	brpl	.-8      	; 0x2788 <DIO_voidSetPinValue+0x162>
    2790:	80 95       	com	r24
    2792:	84 23       	and	r24, r20
    2794:	8c 93       	st	X, r24
    2796:	3e c0       	rjmp	.+124    	; 0x2814 <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTB : CLR_BIT(PORTB , Copy_u8Pin); break ;
    2798:	a8 e3       	ldi	r26, 0x38	; 56
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	e8 e3       	ldi	r30, 0x38	; 56
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 81       	ld	r24, Z
    27a2:	48 2f       	mov	r20, r24
    27a4:	8a 81       	ldd	r24, Y+2	; 0x02
    27a6:	28 2f       	mov	r18, r24
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	02 2e       	mov	r0, r18
    27b0:	02 c0       	rjmp	.+4      	; 0x27b6 <DIO_voidSetPinValue+0x190>
    27b2:	88 0f       	add	r24, r24
    27b4:	99 1f       	adc	r25, r25
    27b6:	0a 94       	dec	r0
    27b8:	e2 f7       	brpl	.-8      	; 0x27b2 <DIO_voidSetPinValue+0x18c>
    27ba:	80 95       	com	r24
    27bc:	84 23       	and	r24, r20
    27be:	8c 93       	st	X, r24
    27c0:	29 c0       	rjmp	.+82     	; 0x2814 <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTC : CLR_BIT(PORTC , Copy_u8Pin); break ;
    27c2:	a5 e3       	ldi	r26, 0x35	; 53
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	e5 e3       	ldi	r30, 0x35	; 53
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	48 2f       	mov	r20, r24
    27ce:	8a 81       	ldd	r24, Y+2	; 0x02
    27d0:	28 2f       	mov	r18, r24
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	02 2e       	mov	r0, r18
    27da:	02 c0       	rjmp	.+4      	; 0x27e0 <DIO_voidSetPinValue+0x1ba>
    27dc:	88 0f       	add	r24, r24
    27de:	99 1f       	adc	r25, r25
    27e0:	0a 94       	dec	r0
    27e2:	e2 f7       	brpl	.-8      	; 0x27dc <DIO_voidSetPinValue+0x1b6>
    27e4:	80 95       	com	r24
    27e6:	84 23       	and	r24, r20
    27e8:	8c 93       	st	X, r24
    27ea:	14 c0       	rjmp	.+40     	; 0x2814 <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTD : CLR_BIT(PORTD , Copy_u8Pin); break ;
    27ec:	a2 e3       	ldi	r26, 0x32	; 50
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	e2 e3       	ldi	r30, 0x32	; 50
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	48 2f       	mov	r20, r24
    27f8:	8a 81       	ldd	r24, Y+2	; 0x02
    27fa:	28 2f       	mov	r18, r24
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	02 2e       	mov	r0, r18
    2804:	02 c0       	rjmp	.+4      	; 0x280a <DIO_voidSetPinValue+0x1e4>
    2806:	88 0f       	add	r24, r24
    2808:	99 1f       	adc	r25, r25
    280a:	0a 94       	dec	r0
    280c:	e2 f7       	brpl	.-8      	; 0x2806 <DIO_voidSetPinValue+0x1e0>
    280e:	80 95       	com	r24
    2810:	84 23       	and	r24, r20
    2812:	8c 93       	st	X, r24
		}
	}
}
    2814:	27 96       	adiw	r28, 0x07	; 7
    2816:	0f b6       	in	r0, 0x3f	; 63
    2818:	f8 94       	cli
    281a:	de bf       	out	0x3e, r29	; 62
    281c:	0f be       	out	0x3f, r0	; 63
    281e:	cd bf       	out	0x3d, r28	; 61
    2820:	cf 91       	pop	r28
    2822:	df 91       	pop	r29
    2824:	08 95       	ret

00002826 <DIO_u8GetPinValue>:

u8 	 DIO_u8GetPinValue (u8 Copy_u8Port , u8 Copy_u8Pin)
{
    2826:	df 93       	push	r29
    2828:	cf 93       	push	r28
    282a:	00 d0       	rcall	.+0      	; 0x282c <DIO_u8GetPinValue+0x6>
    282c:	00 d0       	rcall	.+0      	; 0x282e <DIO_u8GetPinValue+0x8>
    282e:	00 d0       	rcall	.+0      	; 0x2830 <DIO_u8GetPinValue+0xa>
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
    2834:	89 83       	std	Y+1, r24	; 0x01
    2836:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    2838:	89 81       	ldd	r24, Y+1	; 0x01
    283a:	28 2f       	mov	r18, r24
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	3d 83       	std	Y+5, r19	; 0x05
    2840:	2c 83       	std	Y+4, r18	; 0x04
    2842:	4c 81       	ldd	r20, Y+4	; 0x04
    2844:	5d 81       	ldd	r21, Y+5	; 0x05
    2846:	41 30       	cpi	r20, 0x01	; 1
    2848:	51 05       	cpc	r21, r1
    284a:	49 f1       	breq	.+82     	; 0x289e <DIO_u8GetPinValue+0x78>
    284c:	8c 81       	ldd	r24, Y+4	; 0x04
    284e:	9d 81       	ldd	r25, Y+5	; 0x05
    2850:	82 30       	cpi	r24, 0x02	; 2
    2852:	91 05       	cpc	r25, r1
    2854:	34 f4       	brge	.+12     	; 0x2862 <DIO_u8GetPinValue+0x3c>
    2856:	2c 81       	ldd	r18, Y+4	; 0x04
    2858:	3d 81       	ldd	r19, Y+5	; 0x05
    285a:	21 15       	cp	r18, r1
    285c:	31 05       	cpc	r19, r1
    285e:	61 f0       	breq	.+24     	; 0x2878 <DIO_u8GetPinValue+0x52>
    2860:	57 c0       	rjmp	.+174    	; 0x2910 <DIO_u8GetPinValue+0xea>
    2862:	4c 81       	ldd	r20, Y+4	; 0x04
    2864:	5d 81       	ldd	r21, Y+5	; 0x05
    2866:	42 30       	cpi	r20, 0x02	; 2
    2868:	51 05       	cpc	r21, r1
    286a:	61 f1       	breq	.+88     	; 0x28c4 <DIO_u8GetPinValue+0x9e>
    286c:	8c 81       	ldd	r24, Y+4	; 0x04
    286e:	9d 81       	ldd	r25, Y+5	; 0x05
    2870:	83 30       	cpi	r24, 0x03	; 3
    2872:	91 05       	cpc	r25, r1
    2874:	d1 f1       	breq	.+116    	; 0x28ea <DIO_u8GetPinValue+0xc4>
    2876:	4c c0       	rjmp	.+152    	; 0x2910 <DIO_u8GetPinValue+0xea>
	{
		case DIO_PORTA : return GET_BIT(PINA , Copy_u8Pin);
    2878:	e9 e3       	ldi	r30, 0x39	; 57
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	80 81       	ld	r24, Z
    287e:	28 2f       	mov	r18, r24
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	8a 81       	ldd	r24, Y+2	; 0x02
    2884:	88 2f       	mov	r24, r24
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	a9 01       	movw	r20, r18
    288a:	02 c0       	rjmp	.+4      	; 0x2890 <DIO_u8GetPinValue+0x6a>
    288c:	55 95       	asr	r21
    288e:	47 95       	ror	r20
    2890:	8a 95       	dec	r24
    2892:	e2 f7       	brpl	.-8      	; 0x288c <DIO_u8GetPinValue+0x66>
    2894:	ca 01       	movw	r24, r20
    2896:	58 2f       	mov	r21, r24
    2898:	51 70       	andi	r21, 0x01	; 1
    289a:	5b 83       	std	Y+3, r21	; 0x03
    289c:	3a c0       	rjmp	.+116    	; 0x2912 <DIO_u8GetPinValue+0xec>
		case DIO_PORTB : return GET_BIT(PINB , Copy_u8Pin);
    289e:	e6 e3       	ldi	r30, 0x36	; 54
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	80 81       	ld	r24, Z
    28a4:	28 2f       	mov	r18, r24
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	8a 81       	ldd	r24, Y+2	; 0x02
    28aa:	88 2f       	mov	r24, r24
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	a9 01       	movw	r20, r18
    28b0:	02 c0       	rjmp	.+4      	; 0x28b6 <DIO_u8GetPinValue+0x90>
    28b2:	55 95       	asr	r21
    28b4:	47 95       	ror	r20
    28b6:	8a 95       	dec	r24
    28b8:	e2 f7       	brpl	.-8      	; 0x28b2 <DIO_u8GetPinValue+0x8c>
    28ba:	ca 01       	movw	r24, r20
    28bc:	58 2f       	mov	r21, r24
    28be:	51 70       	andi	r21, 0x01	; 1
    28c0:	5b 83       	std	Y+3, r21	; 0x03
    28c2:	27 c0       	rjmp	.+78     	; 0x2912 <DIO_u8GetPinValue+0xec>
		case DIO_PORTC : return GET_BIT(PINC , Copy_u8Pin);
    28c4:	e3 e3       	ldi	r30, 0x33	; 51
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	80 81       	ld	r24, Z
    28ca:	28 2f       	mov	r18, r24
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	8a 81       	ldd	r24, Y+2	; 0x02
    28d0:	88 2f       	mov	r24, r24
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	a9 01       	movw	r20, r18
    28d6:	02 c0       	rjmp	.+4      	; 0x28dc <DIO_u8GetPinValue+0xb6>
    28d8:	55 95       	asr	r21
    28da:	47 95       	ror	r20
    28dc:	8a 95       	dec	r24
    28de:	e2 f7       	brpl	.-8      	; 0x28d8 <DIO_u8GetPinValue+0xb2>
    28e0:	ca 01       	movw	r24, r20
    28e2:	58 2f       	mov	r21, r24
    28e4:	51 70       	andi	r21, 0x01	; 1
    28e6:	5b 83       	std	Y+3, r21	; 0x03
    28e8:	14 c0       	rjmp	.+40     	; 0x2912 <DIO_u8GetPinValue+0xec>
		case DIO_PORTD : return GET_BIT(PIND , Copy_u8Pin);
    28ea:	e0 e3       	ldi	r30, 0x30	; 48
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 81       	ld	r24, Z
    28f0:	28 2f       	mov	r18, r24
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	8a 81       	ldd	r24, Y+2	; 0x02
    28f6:	88 2f       	mov	r24, r24
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	a9 01       	movw	r20, r18
    28fc:	02 c0       	rjmp	.+4      	; 0x2902 <DIO_u8GetPinValue+0xdc>
    28fe:	55 95       	asr	r21
    2900:	47 95       	ror	r20
    2902:	8a 95       	dec	r24
    2904:	e2 f7       	brpl	.-8      	; 0x28fe <DIO_u8GetPinValue+0xd8>
    2906:	ca 01       	movw	r24, r20
    2908:	58 2f       	mov	r21, r24
    290a:	51 70       	andi	r21, 0x01	; 1
    290c:	5b 83       	std	Y+3, r21	; 0x03
    290e:	01 c0       	rjmp	.+2      	; 0x2912 <DIO_u8GetPinValue+0xec>
    2910:	02 c0       	rjmp	.+4      	; 0x2916 <DIO_u8GetPinValue+0xf0>
	}
}
    2912:	8b 81       	ldd	r24, Y+3	; 0x03
    2914:	8e 83       	std	Y+6, r24	; 0x06
    2916:	8e 81       	ldd	r24, Y+6	; 0x06
    2918:	26 96       	adiw	r28, 0x06	; 6
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	f8 94       	cli
    291e:	de bf       	out	0x3e, r29	; 62
    2920:	0f be       	out	0x3f, r0	; 63
    2922:	cd bf       	out	0x3d, r28	; 61
    2924:	cf 91       	pop	r28
    2926:	df 91       	pop	r29
    2928:	08 95       	ret

0000292a <DIO_voidTogglePin>:

void DIO_voidTogglePin 	 (u8 Copy_u8Port , u8 Copy_u8Pin)
{
    292a:	df 93       	push	r29
    292c:	cf 93       	push	r28
    292e:	00 d0       	rcall	.+0      	; 0x2930 <DIO_voidTogglePin+0x6>
    2930:	00 d0       	rcall	.+0      	; 0x2932 <DIO_voidTogglePin+0x8>
    2932:	cd b7       	in	r28, 0x3d	; 61
    2934:	de b7       	in	r29, 0x3e	; 62
    2936:	89 83       	std	Y+1, r24	; 0x01
    2938:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    293a:	89 81       	ldd	r24, Y+1	; 0x01
    293c:	28 2f       	mov	r18, r24
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	3c 83       	std	Y+4, r19	; 0x04
    2942:	2b 83       	std	Y+3, r18	; 0x03
    2944:	8b 81       	ldd	r24, Y+3	; 0x03
    2946:	9c 81       	ldd	r25, Y+4	; 0x04
    2948:	81 30       	cpi	r24, 0x01	; 1
    294a:	91 05       	cpc	r25, r1
    294c:	49 f1       	breq	.+82     	; 0x29a0 <DIO_voidTogglePin+0x76>
    294e:	2b 81       	ldd	r18, Y+3	; 0x03
    2950:	3c 81       	ldd	r19, Y+4	; 0x04
    2952:	22 30       	cpi	r18, 0x02	; 2
    2954:	31 05       	cpc	r19, r1
    2956:	2c f4       	brge	.+10     	; 0x2962 <DIO_voidTogglePin+0x38>
    2958:	8b 81       	ldd	r24, Y+3	; 0x03
    295a:	9c 81       	ldd	r25, Y+4	; 0x04
    295c:	00 97       	sbiw	r24, 0x00	; 0
    295e:	61 f0       	breq	.+24     	; 0x2978 <DIO_voidTogglePin+0x4e>
    2960:	5a c0       	rjmp	.+180    	; 0x2a16 <DIO_voidTogglePin+0xec>
    2962:	2b 81       	ldd	r18, Y+3	; 0x03
    2964:	3c 81       	ldd	r19, Y+4	; 0x04
    2966:	22 30       	cpi	r18, 0x02	; 2
    2968:	31 05       	cpc	r19, r1
    296a:	71 f1       	breq	.+92     	; 0x29c8 <DIO_voidTogglePin+0x9e>
    296c:	8b 81       	ldd	r24, Y+3	; 0x03
    296e:	9c 81       	ldd	r25, Y+4	; 0x04
    2970:	83 30       	cpi	r24, 0x03	; 3
    2972:	91 05       	cpc	r25, r1
    2974:	e9 f1       	breq	.+122    	; 0x29f0 <DIO_voidTogglePin+0xc6>
    2976:	4f c0       	rjmp	.+158    	; 0x2a16 <DIO_voidTogglePin+0xec>
	{
		case DIO_PORTA : TOGGLE_BIT(PORTA , Copy_u8Pin); break ;
    2978:	ab e3       	ldi	r26, 0x3B	; 59
    297a:	b0 e0       	ldi	r27, 0x00	; 0
    297c:	eb e3       	ldi	r30, 0x3B	; 59
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	80 81       	ld	r24, Z
    2982:	48 2f       	mov	r20, r24
    2984:	8a 81       	ldd	r24, Y+2	; 0x02
    2986:	28 2f       	mov	r18, r24
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	02 2e       	mov	r0, r18
    2990:	02 c0       	rjmp	.+4      	; 0x2996 <DIO_voidTogglePin+0x6c>
    2992:	88 0f       	add	r24, r24
    2994:	99 1f       	adc	r25, r25
    2996:	0a 94       	dec	r0
    2998:	e2 f7       	brpl	.-8      	; 0x2992 <DIO_voidTogglePin+0x68>
    299a:	84 27       	eor	r24, r20
    299c:	8c 93       	st	X, r24
    299e:	3b c0       	rjmp	.+118    	; 0x2a16 <DIO_voidTogglePin+0xec>
		case DIO_PORTB : TOGGLE_BIT(PORTB , Copy_u8Pin); break ;
    29a0:	a8 e3       	ldi	r26, 0x38	; 56
    29a2:	b0 e0       	ldi	r27, 0x00	; 0
    29a4:	e8 e3       	ldi	r30, 0x38	; 56
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	80 81       	ld	r24, Z
    29aa:	48 2f       	mov	r20, r24
    29ac:	8a 81       	ldd	r24, Y+2	; 0x02
    29ae:	28 2f       	mov	r18, r24
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	02 2e       	mov	r0, r18
    29b8:	02 c0       	rjmp	.+4      	; 0x29be <DIO_voidTogglePin+0x94>
    29ba:	88 0f       	add	r24, r24
    29bc:	99 1f       	adc	r25, r25
    29be:	0a 94       	dec	r0
    29c0:	e2 f7       	brpl	.-8      	; 0x29ba <DIO_voidTogglePin+0x90>
    29c2:	84 27       	eor	r24, r20
    29c4:	8c 93       	st	X, r24
    29c6:	27 c0       	rjmp	.+78     	; 0x2a16 <DIO_voidTogglePin+0xec>
		case DIO_PORTC : TOGGLE_BIT(PORTC , Copy_u8Pin); break ;
    29c8:	a5 e3       	ldi	r26, 0x35	; 53
    29ca:	b0 e0       	ldi	r27, 0x00	; 0
    29cc:	e5 e3       	ldi	r30, 0x35	; 53
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	80 81       	ld	r24, Z
    29d2:	48 2f       	mov	r20, r24
    29d4:	8a 81       	ldd	r24, Y+2	; 0x02
    29d6:	28 2f       	mov	r18, r24
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	02 2e       	mov	r0, r18
    29e0:	02 c0       	rjmp	.+4      	; 0x29e6 <DIO_voidTogglePin+0xbc>
    29e2:	88 0f       	add	r24, r24
    29e4:	99 1f       	adc	r25, r25
    29e6:	0a 94       	dec	r0
    29e8:	e2 f7       	brpl	.-8      	; 0x29e2 <DIO_voidTogglePin+0xb8>
    29ea:	84 27       	eor	r24, r20
    29ec:	8c 93       	st	X, r24
    29ee:	13 c0       	rjmp	.+38     	; 0x2a16 <DIO_voidTogglePin+0xec>
		case DIO_PORTD : TOGGLE_BIT(PORTD , Copy_u8Pin); break ;
    29f0:	a2 e3       	ldi	r26, 0x32	; 50
    29f2:	b0 e0       	ldi	r27, 0x00	; 0
    29f4:	e2 e3       	ldi	r30, 0x32	; 50
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	80 81       	ld	r24, Z
    29fa:	48 2f       	mov	r20, r24
    29fc:	8a 81       	ldd	r24, Y+2	; 0x02
    29fe:	28 2f       	mov	r18, r24
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	02 2e       	mov	r0, r18
    2a08:	02 c0       	rjmp	.+4      	; 0x2a0e <DIO_voidTogglePin+0xe4>
    2a0a:	88 0f       	add	r24, r24
    2a0c:	99 1f       	adc	r25, r25
    2a0e:	0a 94       	dec	r0
    2a10:	e2 f7       	brpl	.-8      	; 0x2a0a <DIO_voidTogglePin+0xe0>
    2a12:	84 27       	eor	r24, r20
    2a14:	8c 93       	st	X, r24
	}
}
    2a16:	0f 90       	pop	r0
    2a18:	0f 90       	pop	r0
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	08 95       	ret

00002a24 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection (u8 Copy_u8Port , u8 Copy_u8Direction)
{
    2a24:	df 93       	push	r29
    2a26:	cf 93       	push	r28
    2a28:	00 d0       	rcall	.+0      	; 0x2a2a <DIO_voidSetPortDirection+0x6>
    2a2a:	00 d0       	rcall	.+0      	; 0x2a2c <DIO_voidSetPortDirection+0x8>
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
    2a30:	89 83       	std	Y+1, r24	; 0x01
    2a32:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    2a34:	89 81       	ldd	r24, Y+1	; 0x01
    2a36:	28 2f       	mov	r18, r24
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	3c 83       	std	Y+4, r19	; 0x04
    2a3c:	2b 83       	std	Y+3, r18	; 0x03
    2a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a40:	9c 81       	ldd	r25, Y+4	; 0x04
    2a42:	81 30       	cpi	r24, 0x01	; 1
    2a44:	91 05       	cpc	r25, r1
    2a46:	d1 f0       	breq	.+52     	; 0x2a7c <DIO_voidSetPortDirection+0x58>
    2a48:	2b 81       	ldd	r18, Y+3	; 0x03
    2a4a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a4c:	22 30       	cpi	r18, 0x02	; 2
    2a4e:	31 05       	cpc	r19, r1
    2a50:	2c f4       	brge	.+10     	; 0x2a5c <DIO_voidSetPortDirection+0x38>
    2a52:	8b 81       	ldd	r24, Y+3	; 0x03
    2a54:	9c 81       	ldd	r25, Y+4	; 0x04
    2a56:	00 97       	sbiw	r24, 0x00	; 0
    2a58:	61 f0       	breq	.+24     	; 0x2a72 <DIO_voidSetPortDirection+0x4e>
    2a5a:	1e c0       	rjmp	.+60     	; 0x2a98 <DIO_voidSetPortDirection+0x74>
    2a5c:	2b 81       	ldd	r18, Y+3	; 0x03
    2a5e:	3c 81       	ldd	r19, Y+4	; 0x04
    2a60:	22 30       	cpi	r18, 0x02	; 2
    2a62:	31 05       	cpc	r19, r1
    2a64:	81 f0       	breq	.+32     	; 0x2a86 <DIO_voidSetPortDirection+0x62>
    2a66:	8b 81       	ldd	r24, Y+3	; 0x03
    2a68:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6a:	83 30       	cpi	r24, 0x03	; 3
    2a6c:	91 05       	cpc	r25, r1
    2a6e:	81 f0       	breq	.+32     	; 0x2a90 <DIO_voidSetPortDirection+0x6c>
    2a70:	13 c0       	rjmp	.+38     	; 0x2a98 <DIO_voidSetPortDirection+0x74>
	{
		case DIO_PORTA : DDRA = Copy_u8Direction ; break ;
    2a72:	ea e3       	ldi	r30, 0x3A	; 58
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	8a 81       	ldd	r24, Y+2	; 0x02
    2a78:	80 83       	st	Z, r24
    2a7a:	0e c0       	rjmp	.+28     	; 0x2a98 <DIO_voidSetPortDirection+0x74>
	    case DIO_PORTB : DDRB = Copy_u8Direction ; break ;
    2a7c:	e7 e3       	ldi	r30, 0x37	; 55
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	8a 81       	ldd	r24, Y+2	; 0x02
    2a82:	80 83       	st	Z, r24
    2a84:	09 c0       	rjmp	.+18     	; 0x2a98 <DIO_voidSetPortDirection+0x74>
        case DIO_PORTC : DDRC = Copy_u8Direction ; break ;
    2a86:	e4 e3       	ldi	r30, 0x34	; 52
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8c:	80 83       	st	Z, r24
    2a8e:	04 c0       	rjmp	.+8      	; 0x2a98 <DIO_voidSetPortDirection+0x74>
        case DIO_PORTD : DDRD = Copy_u8Direction ; break ;
    2a90:	e1 e3       	ldi	r30, 0x31	; 49
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	8a 81       	ldd	r24, Y+2	; 0x02
    2a96:	80 83       	st	Z, r24
	}
}
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	0f 90       	pop	r0
    2a9e:	0f 90       	pop	r0
    2aa0:	cf 91       	pop	r28
    2aa2:	df 91       	pop	r29
    2aa4:	08 95       	ret

00002aa6 <DIO_voidSetPortValue>:
void DIO_voidSetPortValue (u8 Copy_u8Port , u8 Copy_u8Value)
{
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	00 d0       	rcall	.+0      	; 0x2aac <DIO_voidSetPortValue+0x6>
    2aac:	00 d0       	rcall	.+0      	; 0x2aae <DIO_voidSetPortValue+0x8>
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
    2ab2:	89 83       	std	Y+1, r24	; 0x01
    2ab4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    2ab6:	89 81       	ldd	r24, Y+1	; 0x01
    2ab8:	28 2f       	mov	r18, r24
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	3c 83       	std	Y+4, r19	; 0x04
    2abe:	2b 83       	std	Y+3, r18	; 0x03
    2ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac4:	81 30       	cpi	r24, 0x01	; 1
    2ac6:	91 05       	cpc	r25, r1
    2ac8:	d1 f0       	breq	.+52     	; 0x2afe <DIO_voidSetPortValue+0x58>
    2aca:	2b 81       	ldd	r18, Y+3	; 0x03
    2acc:	3c 81       	ldd	r19, Y+4	; 0x04
    2ace:	22 30       	cpi	r18, 0x02	; 2
    2ad0:	31 05       	cpc	r19, r1
    2ad2:	2c f4       	brge	.+10     	; 0x2ade <DIO_voidSetPortValue+0x38>
    2ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad8:	00 97       	sbiw	r24, 0x00	; 0
    2ada:	61 f0       	breq	.+24     	; 0x2af4 <DIO_voidSetPortValue+0x4e>
    2adc:	1e c0       	rjmp	.+60     	; 0x2b1a <DIO_voidSetPortValue+0x74>
    2ade:	2b 81       	ldd	r18, Y+3	; 0x03
    2ae0:	3c 81       	ldd	r19, Y+4	; 0x04
    2ae2:	22 30       	cpi	r18, 0x02	; 2
    2ae4:	31 05       	cpc	r19, r1
    2ae6:	81 f0       	breq	.+32     	; 0x2b08 <DIO_voidSetPortValue+0x62>
    2ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aea:	9c 81       	ldd	r25, Y+4	; 0x04
    2aec:	83 30       	cpi	r24, 0x03	; 3
    2aee:	91 05       	cpc	r25, r1
    2af0:	81 f0       	breq	.+32     	; 0x2b12 <DIO_voidSetPortValue+0x6c>
    2af2:	13 c0       	rjmp	.+38     	; 0x2b1a <DIO_voidSetPortValue+0x74>
		{
			case DIO_PORTA : PORTA = Copy_u8Value ; break ;
    2af4:	eb e3       	ldi	r30, 0x3B	; 59
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	8a 81       	ldd	r24, Y+2	; 0x02
    2afa:	80 83       	st	Z, r24
    2afc:	0e c0       	rjmp	.+28     	; 0x2b1a <DIO_voidSetPortValue+0x74>
			case DIO_PORTB : PORTB = Copy_u8Value ; break ;
    2afe:	e8 e3       	ldi	r30, 0x38	; 56
    2b00:	f0 e0       	ldi	r31, 0x00	; 0
    2b02:	8a 81       	ldd	r24, Y+2	; 0x02
    2b04:	80 83       	st	Z, r24
    2b06:	09 c0       	rjmp	.+18     	; 0x2b1a <DIO_voidSetPortValue+0x74>
			case DIO_PORTC : PORTC = Copy_u8Value ; break ;
    2b08:	e5 e3       	ldi	r30, 0x35	; 53
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0e:	80 83       	st	Z, r24
    2b10:	04 c0       	rjmp	.+8      	; 0x2b1a <DIO_voidSetPortValue+0x74>
			case DIO_PORTD : PORTD = Copy_u8Value ; break ;
    2b12:	e2 e3       	ldi	r30, 0x32	; 50
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	8a 81       	ldd	r24, Y+2	; 0x02
    2b18:	80 83       	st	Z, r24
		}
}
    2b1a:	0f 90       	pop	r0
    2b1c:	0f 90       	pop	r0
    2b1e:	0f 90       	pop	r0
    2b20:	0f 90       	pop	r0
    2b22:	cf 91       	pop	r28
    2b24:	df 91       	pop	r29
    2b26:	08 95       	ret

00002b28 <DIO_u8GetPortValue>:

u8   DIO_u8GetPortValue (u8 Copy_u8Port)
{
    2b28:	df 93       	push	r29
    2b2a:	cf 93       	push	r28
    2b2c:	00 d0       	rcall	.+0      	; 0x2b2e <DIO_u8GetPortValue+0x6>
    2b2e:	00 d0       	rcall	.+0      	; 0x2b30 <DIO_u8GetPortValue+0x8>
    2b30:	0f 92       	push	r0
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
    2b36:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Port)
    2b38:	89 81       	ldd	r24, Y+1	; 0x01
    2b3a:	28 2f       	mov	r18, r24
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	3c 83       	std	Y+4, r19	; 0x04
    2b40:	2b 83       	std	Y+3, r18	; 0x03
    2b42:	8b 81       	ldd	r24, Y+3	; 0x03
    2b44:	9c 81       	ldd	r25, Y+4	; 0x04
    2b46:	81 30       	cpi	r24, 0x01	; 1
    2b48:	91 05       	cpc	r25, r1
    2b4a:	d1 f0       	breq	.+52     	; 0x2b80 <DIO_u8GetPortValue+0x58>
    2b4c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b4e:	3c 81       	ldd	r19, Y+4	; 0x04
    2b50:	22 30       	cpi	r18, 0x02	; 2
    2b52:	31 05       	cpc	r19, r1
    2b54:	2c f4       	brge	.+10     	; 0x2b60 <DIO_u8GetPortValue+0x38>
    2b56:	8b 81       	ldd	r24, Y+3	; 0x03
    2b58:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5a:	00 97       	sbiw	r24, 0x00	; 0
    2b5c:	61 f0       	breq	.+24     	; 0x2b76 <DIO_u8GetPortValue+0x4e>
    2b5e:	1f c0       	rjmp	.+62     	; 0x2b9e <DIO_u8GetPortValue+0x76>
    2b60:	2b 81       	ldd	r18, Y+3	; 0x03
    2b62:	3c 81       	ldd	r19, Y+4	; 0x04
    2b64:	22 30       	cpi	r18, 0x02	; 2
    2b66:	31 05       	cpc	r19, r1
    2b68:	81 f0       	breq	.+32     	; 0x2b8a <DIO_u8GetPortValue+0x62>
    2b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b6e:	83 30       	cpi	r24, 0x03	; 3
    2b70:	91 05       	cpc	r25, r1
    2b72:	81 f0       	breq	.+32     	; 0x2b94 <DIO_u8GetPortValue+0x6c>
    2b74:	14 c0       	rjmp	.+40     	; 0x2b9e <DIO_u8GetPortValue+0x76>
		{
			case DIO_PORTA : return PINA ;
    2b76:	e9 e3       	ldi	r30, 0x39	; 57
    2b78:	f0 e0       	ldi	r31, 0x00	; 0
    2b7a:	90 81       	ld	r25, Z
    2b7c:	9a 83       	std	Y+2, r25	; 0x02
    2b7e:	10 c0       	rjmp	.+32     	; 0x2ba0 <DIO_u8GetPortValue+0x78>
			case DIO_PORTB : return PINB ;
    2b80:	e6 e3       	ldi	r30, 0x36	; 54
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	20 81       	ld	r18, Z
    2b86:	2a 83       	std	Y+2, r18	; 0x02
    2b88:	0b c0       	rjmp	.+22     	; 0x2ba0 <DIO_u8GetPortValue+0x78>
			case DIO_PORTC : return PINC ;
    2b8a:	e3 e3       	ldi	r30, 0x33	; 51
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	30 81       	ld	r19, Z
    2b90:	3a 83       	std	Y+2, r19	; 0x02
    2b92:	06 c0       	rjmp	.+12     	; 0x2ba0 <DIO_u8GetPortValue+0x78>
			case DIO_PORTD : return PIND ;
    2b94:	e0 e3       	ldi	r30, 0x30	; 48
    2b96:	f0 e0       	ldi	r31, 0x00	; 0
    2b98:	80 81       	ld	r24, Z
    2b9a:	8a 83       	std	Y+2, r24	; 0x02
    2b9c:	01 c0       	rjmp	.+2      	; 0x2ba0 <DIO_u8GetPortValue+0x78>
    2b9e:	02 c0       	rjmp	.+4      	; 0x2ba4 <DIO_u8GetPortValue+0x7c>
		}
}
    2ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba2:	9d 83       	std	Y+5, r25	; 0x05
    2ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba6:	0f 90       	pop	r0
    2ba8:	0f 90       	pop	r0
    2baa:	0f 90       	pop	r0
    2bac:	0f 90       	pop	r0
    2bae:	0f 90       	pop	r0
    2bb0:	cf 91       	pop	r28
    2bb2:	df 91       	pop	r29
    2bb4:	08 95       	ret

00002bb6 <__mulsi3>:
    2bb6:	62 9f       	mul	r22, r18
    2bb8:	d0 01       	movw	r26, r0
    2bba:	73 9f       	mul	r23, r19
    2bbc:	f0 01       	movw	r30, r0
    2bbe:	82 9f       	mul	r24, r18
    2bc0:	e0 0d       	add	r30, r0
    2bc2:	f1 1d       	adc	r31, r1
    2bc4:	64 9f       	mul	r22, r20
    2bc6:	e0 0d       	add	r30, r0
    2bc8:	f1 1d       	adc	r31, r1
    2bca:	92 9f       	mul	r25, r18
    2bcc:	f0 0d       	add	r31, r0
    2bce:	83 9f       	mul	r24, r19
    2bd0:	f0 0d       	add	r31, r0
    2bd2:	74 9f       	mul	r23, r20
    2bd4:	f0 0d       	add	r31, r0
    2bd6:	65 9f       	mul	r22, r21
    2bd8:	f0 0d       	add	r31, r0
    2bda:	99 27       	eor	r25, r25
    2bdc:	72 9f       	mul	r23, r18
    2bde:	b0 0d       	add	r27, r0
    2be0:	e1 1d       	adc	r30, r1
    2be2:	f9 1f       	adc	r31, r25
    2be4:	63 9f       	mul	r22, r19
    2be6:	b0 0d       	add	r27, r0
    2be8:	e1 1d       	adc	r30, r1
    2bea:	f9 1f       	adc	r31, r25
    2bec:	bd 01       	movw	r22, r26
    2bee:	cf 01       	movw	r24, r30
    2bf0:	11 24       	eor	r1, r1
    2bf2:	08 95       	ret

00002bf4 <__udivmodsi4>:
    2bf4:	a1 e2       	ldi	r26, 0x21	; 33
    2bf6:	1a 2e       	mov	r1, r26
    2bf8:	aa 1b       	sub	r26, r26
    2bfa:	bb 1b       	sub	r27, r27
    2bfc:	fd 01       	movw	r30, r26
    2bfe:	0d c0       	rjmp	.+26     	; 0x2c1a <__udivmodsi4_ep>

00002c00 <__udivmodsi4_loop>:
    2c00:	aa 1f       	adc	r26, r26
    2c02:	bb 1f       	adc	r27, r27
    2c04:	ee 1f       	adc	r30, r30
    2c06:	ff 1f       	adc	r31, r31
    2c08:	a2 17       	cp	r26, r18
    2c0a:	b3 07       	cpc	r27, r19
    2c0c:	e4 07       	cpc	r30, r20
    2c0e:	f5 07       	cpc	r31, r21
    2c10:	20 f0       	brcs	.+8      	; 0x2c1a <__udivmodsi4_ep>
    2c12:	a2 1b       	sub	r26, r18
    2c14:	b3 0b       	sbc	r27, r19
    2c16:	e4 0b       	sbc	r30, r20
    2c18:	f5 0b       	sbc	r31, r21

00002c1a <__udivmodsi4_ep>:
    2c1a:	66 1f       	adc	r22, r22
    2c1c:	77 1f       	adc	r23, r23
    2c1e:	88 1f       	adc	r24, r24
    2c20:	99 1f       	adc	r25, r25
    2c22:	1a 94       	dec	r1
    2c24:	69 f7       	brne	.-38     	; 0x2c00 <__udivmodsi4_loop>
    2c26:	60 95       	com	r22
    2c28:	70 95       	com	r23
    2c2a:	80 95       	com	r24
    2c2c:	90 95       	com	r25
    2c2e:	9b 01       	movw	r18, r22
    2c30:	ac 01       	movw	r20, r24
    2c32:	bd 01       	movw	r22, r26
    2c34:	cf 01       	movw	r24, r30
    2c36:	08 95       	ret

00002c38 <__prologue_saves__>:
    2c38:	2f 92       	push	r2
    2c3a:	3f 92       	push	r3
    2c3c:	4f 92       	push	r4
    2c3e:	5f 92       	push	r5
    2c40:	6f 92       	push	r6
    2c42:	7f 92       	push	r7
    2c44:	8f 92       	push	r8
    2c46:	9f 92       	push	r9
    2c48:	af 92       	push	r10
    2c4a:	bf 92       	push	r11
    2c4c:	cf 92       	push	r12
    2c4e:	df 92       	push	r13
    2c50:	ef 92       	push	r14
    2c52:	ff 92       	push	r15
    2c54:	0f 93       	push	r16
    2c56:	1f 93       	push	r17
    2c58:	cf 93       	push	r28
    2c5a:	df 93       	push	r29
    2c5c:	cd b7       	in	r28, 0x3d	; 61
    2c5e:	de b7       	in	r29, 0x3e	; 62
    2c60:	ca 1b       	sub	r28, r26
    2c62:	db 0b       	sbc	r29, r27
    2c64:	0f b6       	in	r0, 0x3f	; 63
    2c66:	f8 94       	cli
    2c68:	de bf       	out	0x3e, r29	; 62
    2c6a:	0f be       	out	0x3f, r0	; 63
    2c6c:	cd bf       	out	0x3d, r28	; 61
    2c6e:	09 94       	ijmp

00002c70 <__epilogue_restores__>:
    2c70:	2a 88       	ldd	r2, Y+18	; 0x12
    2c72:	39 88       	ldd	r3, Y+17	; 0x11
    2c74:	48 88       	ldd	r4, Y+16	; 0x10
    2c76:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c78:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c7a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c7c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c7e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c80:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c82:	b9 84       	ldd	r11, Y+9	; 0x09
    2c84:	c8 84       	ldd	r12, Y+8	; 0x08
    2c86:	df 80       	ldd	r13, Y+7	; 0x07
    2c88:	ee 80       	ldd	r14, Y+6	; 0x06
    2c8a:	fd 80       	ldd	r15, Y+5	; 0x05
    2c8c:	0c 81       	ldd	r16, Y+4	; 0x04
    2c8e:	1b 81       	ldd	r17, Y+3	; 0x03
    2c90:	aa 81       	ldd	r26, Y+2	; 0x02
    2c92:	b9 81       	ldd	r27, Y+1	; 0x01
    2c94:	ce 0f       	add	r28, r30
    2c96:	d1 1d       	adc	r29, r1
    2c98:	0f b6       	in	r0, 0x3f	; 63
    2c9a:	f8 94       	cli
    2c9c:	de bf       	out	0x3e, r29	; 62
    2c9e:	0f be       	out	0x3f, r0	; 63
    2ca0:	cd bf       	out	0x3d, r28	; 61
    2ca2:	ed 01       	movw	r28, r26
    2ca4:	08 95       	ret

00002ca6 <_exit>:
    2ca6:	f8 94       	cli

00002ca8 <__stop_program>:
    2ca8:	ff cf       	rjmp	.-2      	; 0x2ca8 <__stop_program>
