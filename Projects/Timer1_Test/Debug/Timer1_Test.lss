
Timer1_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000017  00800060  00800060  0000145c  2**0
                  ALLOC
  2 .stab         00001be4  00000000  00000000  0000145c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001152  00000000  00000000  00003040  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__vector_1>
       8:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__vector_2>
       c:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__vector_3>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__vector_7>
      20:	0c 94 b0 02 	jmp	0x560	; 0x560 <__vector_8>
      24:	0c 94 4a 02 	jmp	0x494	; 0x494 <__vector_9>
      28:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__vector_10>
      2c:	0c 94 35 03 	jmp	0x66a	; 0x66a <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a7 37       	cpi	r26, 0x77	; 119
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
      74:	0c 94 f2 09 	jmp	0x13e4	; 0x13e4 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:


void ToggleLED(void);

void main(void)
{
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	cd b7       	in	r28, 0x3d	; 61
      82:	de b7       	in	r29, 0x3e	; 62

	Timer1_voidSetICR1Value(19999);
      84:	8f e1       	ldi	r24, 0x1F	; 31
      86:	9e e4       	ldi	r25, 0x4E	; 78
      88:	0e 94 ae 01 	call	0x35c	; 0x35c <Timer1_voidSetICR1Value>
	Timer1_voidSetOCR1AValue(4999);
      8c:	87 e8       	ldi	r24, 0x87	; 135
      8e:	93 e1       	ldi	r25, 0x13	; 19
      90:	0e 94 8a 01 	call	0x314	; 0x314 <Timer1_voidSetOCR1AValue>
	Timer1_voidSetOCR1BValue(4999);
      94:	87 e8       	ldi	r24, 0x87	; 135
      96:	93 e1       	ldi	r25, 0x13	; 19
      98:	0e 94 9c 01 	call	0x338	; 0x338 <Timer1_voidSetOCR1BValue>

	DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN4, DIO_OUTPUT);
      9c:	83 e0       	ldi	r24, 0x03	; 3
      9e:	64 e0       	ldi	r22, 0x04	; 4
      a0:	41 e0       	ldi	r20, 0x01	; 1
      a2:	0e 94 2a 06 	call	0xc54	; 0xc54 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN5, DIO_OUTPUT);
      a6:	83 e0       	ldi	r24, 0x03	; 3
      a8:	65 e0       	ldi	r22, 0x05	; 5
      aa:	41 e0       	ldi	r20, 0x01	; 1
      ac:	0e 94 2a 06 	call	0xc54	; 0xc54 <DIO_voidSetPinDirection>

	Timer1_voidInit(TIMER1_FAST_MODE_TOP_ICR1, TIMER1_SCALER_8, TIMER1_OC1A_NON_INVERTING, TIMER1_OC1B_INVERTING);
      b0:	8e e0       	ldi	r24, 0x0E	; 14
      b2:	62 e0       	ldi	r22, 0x02	; 2
      b4:	40 e8       	ldi	r20, 0x80	; 128
      b6:	20 e3       	ldi	r18, 0x30	; 48
      b8:	0e 94 75 00 	call	0xea	; 0xea <Timer1_voidInit>
      bc:	ff cf       	rjmp	.-2      	; 0xbc <main+0x40>

000000be <ToggleLED>:

}


void ToggleLED(void)
{
      be:	df 93       	push	r29
      c0:	cf 93       	push	r28
      c2:	cd b7       	in	r28, 0x3d	; 61
      c4:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Counter = 0;

	Local_u8Counter++;
      c6:	80 91 60 00 	lds	r24, 0x0060
      ca:	8f 5f       	subi	r24, 0xFF	; 255
      cc:	80 93 60 00 	sts	0x0060, r24

	if(Local_u8Counter == 20)
      d0:	80 91 60 00 	lds	r24, 0x0060
      d4:	84 31       	cpi	r24, 0x14	; 20
      d6:	31 f4       	brne	.+12     	; 0xe4 <ToggleLED+0x26>
	{
		DIO_voidTogglePin(DIO_PORTA, DIO_PIN0);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	60 e0       	ldi	r22, 0x00	; 0
      dc:	0e 94 ac 08 	call	0x1158	; 0x1158 <DIO_voidTogglePin>
		Local_u8Counter = 0;
      e0:	10 92 60 00 	sts	0x0060, r1
	}
}
      e4:	cf 91       	pop	r28
      e6:	df 91       	pop	r29
      e8:	08 95       	ret

000000ea <Timer1_voidInit>:

static void (*Timer_ptrFunc[4])(void) = {NULL};


void Timer1_voidInit(u8 Copy_u8Mode, u8 Copy_u8Scaler, u8 Copy_u8OC1A, u8 Copy_u8OC1B)
{
      ea:	df 93       	push	r29
      ec:	cf 93       	push	r28
      ee:	00 d0       	rcall	.+0      	; 0xf0 <Timer1_voidInit+0x6>
      f0:	00 d0       	rcall	.+0      	; 0xf2 <Timer1_voidInit+0x8>
      f2:	00 d0       	rcall	.+0      	; 0xf4 <Timer1_voidInit+0xa>
      f4:	cd b7       	in	r28, 0x3d	; 61
      f6:	de b7       	in	r29, 0x3e	; 62
      f8:	89 83       	std	Y+1, r24	; 0x01
      fa:	6a 83       	std	Y+2, r22	; 0x02
      fc:	4b 83       	std	Y+3, r20	; 0x03
      fe:	2c 83       	std	Y+4, r18	; 0x04
    //Select Timer1 Mode
    switch (Copy_u8Mode)
     100:	89 81       	ldd	r24, Y+1	; 0x01
     102:	28 2f       	mov	r18, r24
     104:	30 e0       	ldi	r19, 0x00	; 0
     106:	3e 83       	std	Y+6, r19	; 0x06
     108:	2d 83       	std	Y+5, r18	; 0x05
     10a:	8d 81       	ldd	r24, Y+5	; 0x05
     10c:	9e 81       	ldd	r25, Y+6	; 0x06
     10e:	8b 30       	cpi	r24, 0x0B	; 11
     110:	91 05       	cpc	r25, r1
     112:	09 f4       	brne	.+2      	; 0x116 <Timer1_voidInit+0x2c>
     114:	56 c0       	rjmp	.+172    	; 0x1c2 <Timer1_voidInit+0xd8>
     116:	2d 81       	ldd	r18, Y+5	; 0x05
     118:	3e 81       	ldd	r19, Y+6	; 0x06
     11a:	2c 30       	cpi	r18, 0x0C	; 12
     11c:	31 05       	cpc	r19, r1
     11e:	54 f4       	brge	.+20     	; 0x134 <Timer1_voidInit+0x4a>
     120:	8d 81       	ldd	r24, Y+5	; 0x05
     122:	9e 81       	ldd	r25, Y+6	; 0x06
     124:	00 97       	sbiw	r24, 0x00	; 0
     126:	99 f0       	breq	.+38     	; 0x14e <Timer1_voidInit+0x64>
     128:	2d 81       	ldd	r18, Y+5	; 0x05
     12a:	3e 81       	ldd	r19, Y+6	; 0x06
     12c:	24 30       	cpi	r18, 0x04	; 4
     12e:	31 05       	cpc	r19, r1
     130:	59 f1       	breq	.+86     	; 0x188 <Timer1_voidInit+0x9e>
     132:	9d c0       	rjmp	.+314    	; 0x26e <Timer1_voidInit+0x184>
     134:	8d 81       	ldd	r24, Y+5	; 0x05
     136:	9e 81       	ldd	r25, Y+6	; 0x06
     138:	8e 30       	cpi	r24, 0x0E	; 14
     13a:	91 05       	cpc	r25, r1
     13c:	09 f4       	brne	.+2      	; 0x140 <Timer1_voidInit+0x56>
     13e:	5e c0       	rjmp	.+188    	; 0x1fc <Timer1_voidInit+0x112>
     140:	2d 81       	ldd	r18, Y+5	; 0x05
     142:	3e 81       	ldd	r19, Y+6	; 0x06
     144:	2f 30       	cpi	r18, 0x0F	; 15
     146:	31 05       	cpc	r19, r1
     148:	09 f4       	brne	.+2      	; 0x14c <Timer1_voidInit+0x62>
     14a:	75 c0       	rjmp	.+234    	; 0x236 <Timer1_voidInit+0x14c>
     14c:	90 c0       	rjmp	.+288    	; 0x26e <Timer1_voidInit+0x184>
    {
    case TIMER1_NORMAL_MODE:
        CLR_BIT(TCCR1A, WGM10);
     14e:	af e4       	ldi	r26, 0x4F	; 79
     150:	b0 e0       	ldi	r27, 0x00	; 0
     152:	ef e4       	ldi	r30, 0x4F	; 79
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	80 81       	ld	r24, Z
     158:	8e 7f       	andi	r24, 0xFE	; 254
     15a:	8c 93       	st	X, r24
        CLR_BIT(TCCR1A, WGM11);
     15c:	af e4       	ldi	r26, 0x4F	; 79
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ef e4       	ldi	r30, 0x4F	; 79
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	80 81       	ld	r24, Z
     166:	8d 7f       	andi	r24, 0xFD	; 253
     168:	8c 93       	st	X, r24
        CLR_BIT(TCCR1B, WGM12);
     16a:	ae e4       	ldi	r26, 0x4E	; 78
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	ee e4       	ldi	r30, 0x4E	; 78
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	80 81       	ld	r24, Z
     174:	87 7f       	andi	r24, 0xF7	; 247
     176:	8c 93       	st	X, r24
        CLR_BIT(TCCR1B, WGM13);
     178:	ae e4       	ldi	r26, 0x4E	; 78
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	ee e4       	ldi	r30, 0x4E	; 78
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	80 81       	ld	r24, Z
     182:	8f 7e       	andi	r24, 0xEF	; 239
     184:	8c 93       	st	X, r24
     186:	73 c0       	rjmp	.+230    	; 0x26e <Timer1_voidInit+0x184>
        break;
    case TIMER1_CTC_MODE_TOP_OCR1A:
        CLR_BIT(TCCR1A, WGM10);
     188:	af e4       	ldi	r26, 0x4F	; 79
     18a:	b0 e0       	ldi	r27, 0x00	; 0
     18c:	ef e4       	ldi	r30, 0x4F	; 79
     18e:	f0 e0       	ldi	r31, 0x00	; 0
     190:	80 81       	ld	r24, Z
     192:	8e 7f       	andi	r24, 0xFE	; 254
     194:	8c 93       	st	X, r24
        CLR_BIT(TCCR1A, WGM11);
     196:	af e4       	ldi	r26, 0x4F	; 79
     198:	b0 e0       	ldi	r27, 0x00	; 0
     19a:	ef e4       	ldi	r30, 0x4F	; 79
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	80 81       	ld	r24, Z
     1a0:	8d 7f       	andi	r24, 0xFD	; 253
     1a2:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM12);
     1a4:	ae e4       	ldi	r26, 0x4E	; 78
     1a6:	b0 e0       	ldi	r27, 0x00	; 0
     1a8:	ee e4       	ldi	r30, 0x4E	; 78
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	88 60       	ori	r24, 0x08	; 8
     1b0:	8c 93       	st	X, r24
        CLR_BIT(TCCR1B, WGM13);
     1b2:	ae e4       	ldi	r26, 0x4E	; 78
     1b4:	b0 e0       	ldi	r27, 0x00	; 0
     1b6:	ee e4       	ldi	r30, 0x4E	; 78
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	8f 7e       	andi	r24, 0xEF	; 239
     1be:	8c 93       	st	X, r24
     1c0:	56 c0       	rjmp	.+172    	; 0x26e <Timer1_voidInit+0x184>
        break;
    case TIMER1_PHASE_CORRECT_MODE_TOP_OCR1A:
        SET_BIT(TCCR1A, WGM10);
     1c2:	af e4       	ldi	r26, 0x4F	; 79
     1c4:	b0 e0       	ldi	r27, 0x00	; 0
     1c6:	ef e4       	ldi	r30, 0x4F	; 79
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	80 81       	ld	r24, Z
     1cc:	81 60       	ori	r24, 0x01	; 1
     1ce:	8c 93       	st	X, r24
        SET_BIT(TCCR1A, WGM11);
     1d0:	af e4       	ldi	r26, 0x4F	; 79
     1d2:	b0 e0       	ldi	r27, 0x00	; 0
     1d4:	ef e4       	ldi	r30, 0x4F	; 79
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	82 60       	ori	r24, 0x02	; 2
     1dc:	8c 93       	st	X, r24
        CLR_BIT(TCCR1B, WGM12);
     1de:	ae e4       	ldi	r26, 0x4E	; 78
     1e0:	b0 e0       	ldi	r27, 0x00	; 0
     1e2:	ee e4       	ldi	r30, 0x4E	; 78
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	80 81       	ld	r24, Z
     1e8:	87 7f       	andi	r24, 0xF7	; 247
     1ea:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM13);
     1ec:	ae e4       	ldi	r26, 0x4E	; 78
     1ee:	b0 e0       	ldi	r27, 0x00	; 0
     1f0:	ee e4       	ldi	r30, 0x4E	; 78
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	80 61       	ori	r24, 0x10	; 16
     1f8:	8c 93       	st	X, r24
     1fa:	39 c0       	rjmp	.+114    	; 0x26e <Timer1_voidInit+0x184>
        break;
    case TIMER1_FAST_MODE_TOP_ICR1:
        CLR_BIT(TCCR1A, WGM10);
     1fc:	af e4       	ldi	r26, 0x4F	; 79
     1fe:	b0 e0       	ldi	r27, 0x00	; 0
     200:	ef e4       	ldi	r30, 0x4F	; 79
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	80 81       	ld	r24, Z
     206:	8e 7f       	andi	r24, 0xFE	; 254
     208:	8c 93       	st	X, r24
        SET_BIT(TCCR1A, WGM11);
     20a:	af e4       	ldi	r26, 0x4F	; 79
     20c:	b0 e0       	ldi	r27, 0x00	; 0
     20e:	ef e4       	ldi	r30, 0x4F	; 79
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	82 60       	ori	r24, 0x02	; 2
     216:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM12);
     218:	ae e4       	ldi	r26, 0x4E	; 78
     21a:	b0 e0       	ldi	r27, 0x00	; 0
     21c:	ee e4       	ldi	r30, 0x4E	; 78
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	88 60       	ori	r24, 0x08	; 8
     224:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM13);
     226:	ae e4       	ldi	r26, 0x4E	; 78
     228:	b0 e0       	ldi	r27, 0x00	; 0
     22a:	ee e4       	ldi	r30, 0x4E	; 78
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	80 81       	ld	r24, Z
     230:	80 61       	ori	r24, 0x10	; 16
     232:	8c 93       	st	X, r24
     234:	1c c0       	rjmp	.+56     	; 0x26e <Timer1_voidInit+0x184>
        break;
    case TIMER1_FAST_MODE_TOP_OCR1A:
        SET_BIT(TCCR1A, WGM10);
     236:	af e4       	ldi	r26, 0x4F	; 79
     238:	b0 e0       	ldi	r27, 0x00	; 0
     23a:	ef e4       	ldi	r30, 0x4F	; 79
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 81       	ld	r24, Z
     240:	81 60       	ori	r24, 0x01	; 1
     242:	8c 93       	st	X, r24
        SET_BIT(TCCR1A, WGM11);
     244:	af e4       	ldi	r26, 0x4F	; 79
     246:	b0 e0       	ldi	r27, 0x00	; 0
     248:	ef e4       	ldi	r30, 0x4F	; 79
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	80 81       	ld	r24, Z
     24e:	82 60       	ori	r24, 0x02	; 2
     250:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM12);
     252:	ae e4       	ldi	r26, 0x4E	; 78
     254:	b0 e0       	ldi	r27, 0x00	; 0
     256:	ee e4       	ldi	r30, 0x4E	; 78
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	80 81       	ld	r24, Z
     25c:	88 60       	ori	r24, 0x08	; 8
     25e:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM13);
     260:	ae e4       	ldi	r26, 0x4E	; 78
     262:	b0 e0       	ldi	r27, 0x00	; 0
     264:	ee e4       	ldi	r30, 0x4E	; 78
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	80 61       	ori	r24, 0x10	; 16
     26c:	8c 93       	st	X, r24
        break;
    }
  
    
    //Config Action OC1A PIN
    CLR_BITS_IN_REG(TCCR1A, OC1A_CLR_MASK);
     26e:	af e4       	ldi	r26, 0x4F	; 79
     270:	b0 e0       	ldi	r27, 0x00	; 0
     272:	ef e4       	ldi	r30, 0x4F	; 79
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	8f 73       	andi	r24, 0x3F	; 63
     27a:	8c 93       	st	X, r24
    SET_BITS_IN_REG(TCCR1A, Copy_u8OC1A);
     27c:	af e4       	ldi	r26, 0x4F	; 79
     27e:	b0 e0       	ldi	r27, 0x00	; 0
     280:	ef e4       	ldi	r30, 0x4F	; 79
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	90 81       	ld	r25, Z
     286:	8b 81       	ldd	r24, Y+3	; 0x03
     288:	89 2b       	or	r24, r25
     28a:	8c 93       	st	X, r24

    //Config Action OC1B PIN
    CLR_BITS_IN_REG(TCCR1A, OC1B_CLR_MASK);
     28c:	af e4       	ldi	r26, 0x4F	; 79
     28e:	b0 e0       	ldi	r27, 0x00	; 0
     290:	ef e4       	ldi	r30, 0x4F	; 79
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	80 81       	ld	r24, Z
     296:	8f 7c       	andi	r24, 0xCF	; 207
     298:	8c 93       	st	X, r24
    SET_BITS_IN_REG(TCCR1A, Copy_u8OC1B);
     29a:	af e4       	ldi	r26, 0x4F	; 79
     29c:	b0 e0       	ldi	r27, 0x00	; 0
     29e:	ef e4       	ldi	r30, 0x4F	; 79
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	90 81       	ld	r25, Z
     2a4:	8c 81       	ldd	r24, Y+4	; 0x04
     2a6:	89 2b       	or	r24, r25
     2a8:	8c 93       	st	X, r24

    //Select Clock Source
    //Clear CS12:10
    CLR_BITS_IN_REG(TCCR1B, CLK_SRC_CLR_MASK);
     2aa:	ae e4       	ldi	r26, 0x4E	; 78
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	ee e4       	ldi	r30, 0x4E	; 78
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	88 7f       	andi	r24, 0xF8	; 248
     2b6:	8c 93       	st	X, r24
    //Set Clock source
    SET_BITS_IN_REG(TCCR1B, Copy_u8Scaler);
     2b8:	ae e4       	ldi	r26, 0x4E	; 78
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	ee e4       	ldi	r30, 0x4E	; 78
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	90 81       	ld	r25, Z
     2c2:	8a 81       	ldd	r24, Y+2	; 0x02
     2c4:	89 2b       	or	r24, r25
     2c6:	8c 93       	st	X, r24
 
}
     2c8:	26 96       	adiw	r28, 0x06	; 6
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	cd bf       	out	0x3d, r28	; 61
     2d4:	cf 91       	pop	r28
     2d6:	df 91       	pop	r29
     2d8:	08 95       	ret

000002da <Timer1_voidSetPreloadValue>:

void Timer1_voidSetPreloadValue(u16 Copy_u16Value)
{
     2da:	df 93       	push	r29
     2dc:	cf 93       	push	r28
     2de:	00 d0       	rcall	.+0      	; 0x2e0 <Timer1_voidSetPreloadValue+0x6>
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
     2e4:	9a 83       	std	Y+2, r25	; 0x02
     2e6:	89 83       	std	Y+1, r24	; 0x01
    TCNT1 = Copy_u16Value;
     2e8:	ec e4       	ldi	r30, 0x4C	; 76
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	89 81       	ldd	r24, Y+1	; 0x01
     2ee:	9a 81       	ldd	r25, Y+2	; 0x02
     2f0:	91 83       	std	Z+1, r25	; 0x01
     2f2:	80 83       	st	Z, r24
}
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	cf 91       	pop	r28
     2fa:	df 91       	pop	r29
     2fc:	08 95       	ret

000002fe <Timer1_voidReadValue>:

u16  Timer1_voidReadValue(void)
{
     2fe:	df 93       	push	r29
     300:	cf 93       	push	r28
     302:	cd b7       	in	r28, 0x3d	; 61
     304:	de b7       	in	r29, 0x3e	; 62
    return TCNT1;
     306:	ec e4       	ldi	r30, 0x4C	; 76
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	80 81       	ld	r24, Z
     30c:	91 81       	ldd	r25, Z+1	; 0x01
}
     30e:	cf 91       	pop	r28
     310:	df 91       	pop	r29
     312:	08 95       	ret

00000314 <Timer1_voidSetOCR1AValue>:

void Timer1_voidSetOCR1AValue(u16 Copy_u16Value)
{
     314:	df 93       	push	r29
     316:	cf 93       	push	r28
     318:	00 d0       	rcall	.+0      	; 0x31a <Timer1_voidSetOCR1AValue+0x6>
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	9a 83       	std	Y+2, r25	; 0x02
     320:	89 83       	std	Y+1, r24	; 0x01
    OCR1A = Copy_u16Value;
     322:	ea e4       	ldi	r30, 0x4A	; 74
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	89 81       	ldd	r24, Y+1	; 0x01
     328:	9a 81       	ldd	r25, Y+2	; 0x02
     32a:	91 83       	std	Z+1, r25	; 0x01
     32c:	80 83       	st	Z, r24
}
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	cf 91       	pop	r28
     334:	df 91       	pop	r29
     336:	08 95       	ret

00000338 <Timer1_voidSetOCR1BValue>:

void Timer1_voidSetOCR1BValue(u16 Copy_u16Value)
{
     338:	df 93       	push	r29
     33a:	cf 93       	push	r28
     33c:	00 d0       	rcall	.+0      	; 0x33e <Timer1_voidSetOCR1BValue+0x6>
     33e:	cd b7       	in	r28, 0x3d	; 61
     340:	de b7       	in	r29, 0x3e	; 62
     342:	9a 83       	std	Y+2, r25	; 0x02
     344:	89 83       	std	Y+1, r24	; 0x01
    OCR1B = Copy_u16Value;
     346:	e8 e4       	ldi	r30, 0x48	; 72
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	9a 81       	ldd	r25, Y+2	; 0x02
     34e:	91 83       	std	Z+1, r25	; 0x01
     350:	80 83       	st	Z, r24
}
     352:	0f 90       	pop	r0
     354:	0f 90       	pop	r0
     356:	cf 91       	pop	r28
     358:	df 91       	pop	r29
     35a:	08 95       	ret

0000035c <Timer1_voidSetICR1Value>:

void Timer1_voidSetICR1Value(u16 Copy_u16Value)
{
     35c:	df 93       	push	r29
     35e:	cf 93       	push	r28
     360:	00 d0       	rcall	.+0      	; 0x362 <Timer1_voidSetICR1Value+0x6>
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
     366:	9a 83       	std	Y+2, r25	; 0x02
     368:	89 83       	std	Y+1, r24	; 0x01
    ICR1 = Copy_u16Value;
     36a:	e6 e4       	ldi	r30, 0x46	; 70
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	89 81       	ldd	r24, Y+1	; 0x01
     370:	9a 81       	ldd	r25, Y+2	; 0x02
     372:	91 83       	std	Z+1, r25	; 0x01
     374:	80 83       	st	Z, r24
}
     376:	0f 90       	pop	r0
     378:	0f 90       	pop	r0
     37a:	cf 91       	pop	r28
     37c:	df 91       	pop	r29
     37e:	08 95       	ret

00000380 <Timer1_voidOVFInterruptEnable>:

void Timer1_voidOVFInterruptEnable(void)
{
     380:	df 93       	push	r29
     382:	cf 93       	push	r28
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TOIE1);
     388:	a9 e5       	ldi	r26, 0x59	; 89
     38a:	b0 e0       	ldi	r27, 0x00	; 0
     38c:	e9 e5       	ldi	r30, 0x59	; 89
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	80 81       	ld	r24, Z
     392:	84 60       	ori	r24, 0x04	; 4
     394:	8c 93       	st	X, r24
}
     396:	cf 91       	pop	r28
     398:	df 91       	pop	r29
     39a:	08 95       	ret

0000039c <Timer1_voidOVFInterruptDisable>:

void Timer1_voidOVFInterruptDisable(void)
{
     39c:	df 93       	push	r29
     39e:	cf 93       	push	r28
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, TOIE1);
     3a4:	a9 e5       	ldi	r26, 0x59	; 89
     3a6:	b0 e0       	ldi	r27, 0x00	; 0
     3a8:	e9 e5       	ldi	r30, 0x59	; 89
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	80 81       	ld	r24, Z
     3ae:	8b 7f       	andi	r24, 0xFB	; 251
     3b0:	8c 93       	st	X, r24
}
     3b2:	cf 91       	pop	r28
     3b4:	df 91       	pop	r29
     3b6:	08 95       	ret

000003b8 <Timer1_voidOC1AInterruptEnable>:

void Timer1_voidOC1AInterruptEnable(void)
{
     3b8:	df 93       	push	r29
     3ba:	cf 93       	push	r28
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE1A);
     3c0:	a9 e5       	ldi	r26, 0x59	; 89
     3c2:	b0 e0       	ldi	r27, 0x00	; 0
     3c4:	e9 e5       	ldi	r30, 0x59	; 89
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	80 61       	ori	r24, 0x10	; 16
     3cc:	8c 93       	st	X, r24
}
     3ce:	cf 91       	pop	r28
     3d0:	df 91       	pop	r29
     3d2:	08 95       	ret

000003d4 <Timer1_voidOC1AInterruptDisable>:

void Timer1_voidOC1AInterruptDisable(void)
{
     3d4:	df 93       	push	r29
     3d6:	cf 93       	push	r28
     3d8:	cd b7       	in	r28, 0x3d	; 61
     3da:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, OCIE1A);
     3dc:	a9 e5       	ldi	r26, 0x59	; 89
     3de:	b0 e0       	ldi	r27, 0x00	; 0
     3e0:	e9 e5       	ldi	r30, 0x59	; 89
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	80 81       	ld	r24, Z
     3e6:	8f 7e       	andi	r24, 0xEF	; 239
     3e8:	8c 93       	st	X, r24
}
     3ea:	cf 91       	pop	r28
     3ec:	df 91       	pop	r29
     3ee:	08 95       	ret

000003f0 <Timer1_voidOC1BInterruptEnable>:

void Timer1_voidOC1BInterruptEnable(void)
{
     3f0:	df 93       	push	r29
     3f2:	cf 93       	push	r28
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE1B);
     3f8:	a9 e5       	ldi	r26, 0x59	; 89
     3fa:	b0 e0       	ldi	r27, 0x00	; 0
     3fc:	e9 e5       	ldi	r30, 0x59	; 89
     3fe:	f0 e0       	ldi	r31, 0x00	; 0
     400:	80 81       	ld	r24, Z
     402:	88 60       	ori	r24, 0x08	; 8
     404:	8c 93       	st	X, r24
}
     406:	cf 91       	pop	r28
     408:	df 91       	pop	r29
     40a:	08 95       	ret

0000040c <Timer1_voidOC1BInterruptDisable>:

void Timer1_voidOC1BInterruptDisable(void)
{
     40c:	df 93       	push	r29
     40e:	cf 93       	push	r28
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, OCIE1B);
     414:	a9 e5       	ldi	r26, 0x59	; 89
     416:	b0 e0       	ldi	r27, 0x00	; 0
     418:	e9 e5       	ldi	r30, 0x59	; 89
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	80 81       	ld	r24, Z
     41e:	87 7f       	andi	r24, 0xF7	; 247
     420:	8c 93       	st	X, r24
}
     422:	cf 91       	pop	r28
     424:	df 91       	pop	r29
     426:	08 95       	ret

00000428 <Timer1_voidOVFSetCallBack>:



void Timer1_voidOVFSetCallBack(void (*Copy_pfNotification)(void))
{
     428:	df 93       	push	r29
     42a:	cf 93       	push	r28
     42c:	00 d0       	rcall	.+0      	; 0x42e <Timer1_voidOVFSetCallBack+0x6>
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
     432:	9a 83       	std	Y+2, r25	; 0x02
     434:	89 83       	std	Y+1, r24	; 0x01
    Timer_ptrFunc[0] = Copy_pfNotification;
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	9a 81       	ldd	r25, Y+2	; 0x02
     43a:	90 93 62 00 	sts	0x0062, r25
     43e:	80 93 61 00 	sts	0x0061, r24
}
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	cf 91       	pop	r28
     448:	df 91       	pop	r29
     44a:	08 95       	ret

0000044c <Timer1_voidOC1ASetCallBack>:

void Timer1_voidOC1ASetCallBack(void (*Copy_pfNotification)(void))
{
     44c:	df 93       	push	r29
     44e:	cf 93       	push	r28
     450:	00 d0       	rcall	.+0      	; 0x452 <Timer1_voidOC1ASetCallBack+0x6>
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
     456:	9a 83       	std	Y+2, r25	; 0x02
     458:	89 83       	std	Y+1, r24	; 0x01
    Timer_ptrFunc[1] = Copy_pfNotification;
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	9a 81       	ldd	r25, Y+2	; 0x02
     45e:	90 93 64 00 	sts	0x0064, r25
     462:	80 93 63 00 	sts	0x0063, r24
}
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	cf 91       	pop	r28
     46c:	df 91       	pop	r29
     46e:	08 95       	ret

00000470 <Timer1_voidOC1BSetCallBack>:

void Timer1_voidOC1BSetCallBack(void (*Copy_pfNotification)(void))
{
     470:	df 93       	push	r29
     472:	cf 93       	push	r28
     474:	00 d0       	rcall	.+0      	; 0x476 <Timer1_voidOC1BSetCallBack+0x6>
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	9a 83       	std	Y+2, r25	; 0x02
     47c:	89 83       	std	Y+1, r24	; 0x01
    Timer_ptrFunc[2] = Copy_pfNotification;
     47e:	89 81       	ldd	r24, Y+1	; 0x01
     480:	9a 81       	ldd	r25, Y+2	; 0x02
     482:	90 93 66 00 	sts	0x0066, r25
     486:	80 93 65 00 	sts	0x0065, r24
}
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	cf 91       	pop	r28
     490:	df 91       	pop	r29
     492:	08 95       	ret

00000494 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
     494:	1f 92       	push	r1
     496:	0f 92       	push	r0
     498:	0f b6       	in	r0, 0x3f	; 63
     49a:	0f 92       	push	r0
     49c:	11 24       	eor	r1, r1
     49e:	2f 93       	push	r18
     4a0:	3f 93       	push	r19
     4a2:	4f 93       	push	r20
     4a4:	5f 93       	push	r21
     4a6:	6f 93       	push	r22
     4a8:	7f 93       	push	r23
     4aa:	8f 93       	push	r24
     4ac:	9f 93       	push	r25
     4ae:	af 93       	push	r26
     4b0:	bf 93       	push	r27
     4b2:	ef 93       	push	r30
     4b4:	ff 93       	push	r31
     4b6:	df 93       	push	r29
     4b8:	cf 93       	push	r28
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62
    if(Timer_ptrFunc[0] != NULL)
     4be:	80 91 61 00 	lds	r24, 0x0061
     4c2:	90 91 62 00 	lds	r25, 0x0062
     4c6:	00 97       	sbiw	r24, 0x00	; 0
     4c8:	29 f0       	breq	.+10     	; 0x4d4 <__vector_9+0x40>
    {
        Timer_ptrFunc[0]();
     4ca:	e0 91 61 00 	lds	r30, 0x0061
     4ce:	f0 91 62 00 	lds	r31, 0x0062
     4d2:	09 95       	icall
    }
}
     4d4:	cf 91       	pop	r28
     4d6:	df 91       	pop	r29
     4d8:	ff 91       	pop	r31
     4da:	ef 91       	pop	r30
     4dc:	bf 91       	pop	r27
     4de:	af 91       	pop	r26
     4e0:	9f 91       	pop	r25
     4e2:	8f 91       	pop	r24
     4e4:	7f 91       	pop	r23
     4e6:	6f 91       	pop	r22
     4e8:	5f 91       	pop	r21
     4ea:	4f 91       	pop	r20
     4ec:	3f 91       	pop	r19
     4ee:	2f 91       	pop	r18
     4f0:	0f 90       	pop	r0
     4f2:	0f be       	out	0x3f, r0	; 63
     4f4:	0f 90       	pop	r0
     4f6:	1f 90       	pop	r1
     4f8:	18 95       	reti

000004fa <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
     4fa:	1f 92       	push	r1
     4fc:	0f 92       	push	r0
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	0f 92       	push	r0
     502:	11 24       	eor	r1, r1
     504:	2f 93       	push	r18
     506:	3f 93       	push	r19
     508:	4f 93       	push	r20
     50a:	5f 93       	push	r21
     50c:	6f 93       	push	r22
     50e:	7f 93       	push	r23
     510:	8f 93       	push	r24
     512:	9f 93       	push	r25
     514:	af 93       	push	r26
     516:	bf 93       	push	r27
     518:	ef 93       	push	r30
     51a:	ff 93       	push	r31
     51c:	df 93       	push	r29
     51e:	cf 93       	push	r28
     520:	cd b7       	in	r28, 0x3d	; 61
     522:	de b7       	in	r29, 0x3e	; 62
    if(Timer_ptrFunc[1] != NULL)
     524:	80 91 63 00 	lds	r24, 0x0063
     528:	90 91 64 00 	lds	r25, 0x0064
     52c:	00 97       	sbiw	r24, 0x00	; 0
     52e:	29 f0       	breq	.+10     	; 0x53a <__vector_7+0x40>
    {
        Timer_ptrFunc[1]();
     530:	e0 91 63 00 	lds	r30, 0x0063
     534:	f0 91 64 00 	lds	r31, 0x0064
     538:	09 95       	icall
    }
}
     53a:	cf 91       	pop	r28
     53c:	df 91       	pop	r29
     53e:	ff 91       	pop	r31
     540:	ef 91       	pop	r30
     542:	bf 91       	pop	r27
     544:	af 91       	pop	r26
     546:	9f 91       	pop	r25
     548:	8f 91       	pop	r24
     54a:	7f 91       	pop	r23
     54c:	6f 91       	pop	r22
     54e:	5f 91       	pop	r21
     550:	4f 91       	pop	r20
     552:	3f 91       	pop	r19
     554:	2f 91       	pop	r18
     556:	0f 90       	pop	r0
     558:	0f be       	out	0x3f, r0	; 63
     55a:	0f 90       	pop	r0
     55c:	1f 90       	pop	r1
     55e:	18 95       	reti

00000560 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
     560:	1f 92       	push	r1
     562:	0f 92       	push	r0
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	0f 92       	push	r0
     568:	11 24       	eor	r1, r1
     56a:	2f 93       	push	r18
     56c:	3f 93       	push	r19
     56e:	4f 93       	push	r20
     570:	5f 93       	push	r21
     572:	6f 93       	push	r22
     574:	7f 93       	push	r23
     576:	8f 93       	push	r24
     578:	9f 93       	push	r25
     57a:	af 93       	push	r26
     57c:	bf 93       	push	r27
     57e:	ef 93       	push	r30
     580:	ff 93       	push	r31
     582:	df 93       	push	r29
     584:	cf 93       	push	r28
     586:	cd b7       	in	r28, 0x3d	; 61
     588:	de b7       	in	r29, 0x3e	; 62
    if(Timer_ptrFunc[2] != NULL)
     58a:	80 91 65 00 	lds	r24, 0x0065
     58e:	90 91 66 00 	lds	r25, 0x0066
     592:	00 97       	sbiw	r24, 0x00	; 0
     594:	29 f0       	breq	.+10     	; 0x5a0 <__vector_8+0x40>
    {
        Timer_ptrFunc[2]();
     596:	e0 91 65 00 	lds	r30, 0x0065
     59a:	f0 91 66 00 	lds	r31, 0x0066
     59e:	09 95       	icall
    }
}
     5a0:	cf 91       	pop	r28
     5a2:	df 91       	pop	r29
     5a4:	ff 91       	pop	r31
     5a6:	ef 91       	pop	r30
     5a8:	bf 91       	pop	r27
     5aa:	af 91       	pop	r26
     5ac:	9f 91       	pop	r25
     5ae:	8f 91       	pop	r24
     5b0:	7f 91       	pop	r23
     5b2:	6f 91       	pop	r22
     5b4:	5f 91       	pop	r21
     5b6:	4f 91       	pop	r20
     5b8:	3f 91       	pop	r19
     5ba:	2f 91       	pop	r18
     5bc:	0f 90       	pop	r0
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	0f 90       	pop	r0
     5c2:	1f 90       	pop	r1
     5c4:	18 95       	reti

000005c6 <TIMER0_voidInit>:

void (*TIMER0_PFvoidOVFCall) (void) = ((void *)0);
void (*TIMER0_PFvoidCTCCall) (void) = ((void *)0);

void TIMER0_voidInit (void)
{
     5c6:	df 93       	push	r29
     5c8:	cf 93       	push	r28
     5ca:	cd b7       	in	r28, 0x3d	; 61
     5cc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (TCCR0 , CS01);
	CLR_BIT (TCCR0 , CS02);

#elif	TIMER0_MODE == TIMER0_PHC_MODE
	/*1- Select Timer0 Mode ==> PHC Mode*/
	SET_BIT (TCCR0 , WGM00);
     5ce:	a3 e5       	ldi	r26, 0x53	; 83
     5d0:	b0 e0       	ldi	r27, 0x00	; 0
     5d2:	e3 e5       	ldi	r30, 0x53	; 83
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 81       	ld	r24, Z
     5d8:	80 64       	ori	r24, 0x40	; 64
     5da:	8c 93       	st	X, r24
	CLR_BIT (TCCR0 , WGM01);
     5dc:	a3 e5       	ldi	r26, 0x53	; 83
     5de:	b0 e0       	ldi	r27, 0x00	; 0
     5e0:	e3 e5       	ldi	r30, 0x53	; 83
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	80 81       	ld	r24, Z
     5e6:	87 7f       	andi	r24, 0xF7	; 247
     5e8:	8c 93       	st	X, r24
	/*2- Select OC0 Action */
	CLR_BIT (TCCR0 , COM00);
     5ea:	a3 e5       	ldi	r26, 0x53	; 83
     5ec:	b0 e0       	ldi	r27, 0x00	; 0
     5ee:	e3 e5       	ldi	r30, 0x53	; 83
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	80 81       	ld	r24, Z
     5f4:	8f 7e       	andi	r24, 0xEF	; 239
     5f6:	8c 93       	st	X, r24
	SET_BIT (TCCR0 , COM01);
     5f8:	a3 e5       	ldi	r26, 0x53	; 83
     5fa:	b0 e0       	ldi	r27, 0x00	; 0
     5fc:	e3 e5       	ldi	r30, 0x53	; 83
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	80 81       	ld	r24, Z
     602:	80 62       	ori	r24, 0x20	; 32
     604:	8c 93       	st	X, r24
	/*2- Select Prescaler ==> /8*/
	CLR_BIT (TCCR0 , CS00);
     606:	a3 e5       	ldi	r26, 0x53	; 83
     608:	b0 e0       	ldi	r27, 0x00	; 0
     60a:	e3 e5       	ldi	r30, 0x53	; 83
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	80 81       	ld	r24, Z
     610:	8e 7f       	andi	r24, 0xFE	; 254
     612:	8c 93       	st	X, r24
	SET_BIT (TCCR0 , CS01);
     614:	a3 e5       	ldi	r26, 0x53	; 83
     616:	b0 e0       	ldi	r27, 0x00	; 0
     618:	e3 e5       	ldi	r30, 0x53	; 83
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	80 81       	ld	r24, Z
     61e:	82 60       	ori	r24, 0x02	; 2
     620:	8c 93       	st	X, r24
	CLR_BIT (TCCR0 , CS02);
     622:	a3 e5       	ldi	r26, 0x53	; 83
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e3 e5       	ldi	r30, 0x53	; 83
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	80 81       	ld	r24, Z
     62c:	8b 7f       	andi	r24, 0xFB	; 251
     62e:	8c 93       	st	X, r24

#endif

}
     630:	cf 91       	pop	r28
     632:	df 91       	pop	r29
     634:	08 95       	ret

00000636 <TIMER0_voidSetCallBack>:

void TIMER0_voidSetCallBack (void (*Copy_PFvoidName) (void))
{
     636:	df 93       	push	r29
     638:	cf 93       	push	r28
     63a:	00 d0       	rcall	.+0      	; 0x63c <TIMER0_voidSetCallBack+0x6>
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
     640:	9a 83       	std	Y+2, r25	; 0x02
     642:	89 83       	std	Y+1, r24	; 0x01
#if TIMER0_MODE == TIMER0_OVF_MODE
	TIMER0_PFvoidOVFCall = Copy_PFvoidName ;
#elif TIMER0_MODE == TIMER0_CTC_MODE
	TIMER0_PFvoidCTCCall = Copy_PFvoidName ;
#endif
}
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	cf 91       	pop	r28
     64a:	df 91       	pop	r29
     64c:	08 95       	ret

0000064e <TIMER0_voidSetOCR0Value>:


void TIMER0_voidSetOCR0Value (u8 Copy_u8OCR0Value)
{
     64e:	df 93       	push	r29
     650:	cf 93       	push	r28
     652:	0f 92       	push	r0
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8OCR0Value ;
     65a:	ec e5       	ldi	r30, 0x5C	; 92
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	89 81       	ldd	r24, Y+1	; 0x01
     660:	80 83       	st	Z, r24
}
     662:	0f 90       	pop	r0
     664:	cf 91       	pop	r28
     666:	df 91       	pop	r29
     668:	08 95       	ret

0000066a <__vector_11>:


ISR(TIMER0_OVF_vect)
{
     66a:	1f 92       	push	r1
     66c:	0f 92       	push	r0
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	0f 92       	push	r0
     672:	11 24       	eor	r1, r1
     674:	2f 93       	push	r18
     676:	3f 93       	push	r19
     678:	4f 93       	push	r20
     67a:	5f 93       	push	r21
     67c:	6f 93       	push	r22
     67e:	7f 93       	push	r23
     680:	8f 93       	push	r24
     682:	9f 93       	push	r25
     684:	af 93       	push	r26
     686:	bf 93       	push	r27
     688:	ef 93       	push	r30
     68a:	ff 93       	push	r31
     68c:	df 93       	push	r29
     68e:	cf 93       	push	r28
     690:	cd b7       	in	r28, 0x3d	; 61
     692:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16OVFCounter = 0 ;
	Local_u16OVFCounter ++ ;
     694:	80 91 6d 00 	lds	r24, 0x006D
     698:	90 91 6e 00 	lds	r25, 0x006E
     69c:	01 96       	adiw	r24, 0x01	; 1
     69e:	90 93 6e 00 	sts	0x006E, r25
     6a2:	80 93 6d 00 	sts	0x006D, r24
	if (Local_u16OVFCounter == 3907)
     6a6:	80 91 6d 00 	lds	r24, 0x006D
     6aa:	90 91 6e 00 	lds	r25, 0x006E
     6ae:	2f e0       	ldi	r18, 0x0F	; 15
     6b0:	83 34       	cpi	r24, 0x43	; 67
     6b2:	92 07       	cpc	r25, r18
     6b4:	69 f4       	brne	.+26     	; 0x6d0 <__vector_11+0x66>
	{
		/*Set Preload Value ==> 192*/
		TCNT0 = 192 ;
     6b6:	e2 e5       	ldi	r30, 0x52	; 82
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	80 ec       	ldi	r24, 0xC0	; 192
     6bc:	80 83       	st	Z, r24
		/*Clear Counter */ 
		Local_u16OVFCounter = 0 ;
     6be:	10 92 6e 00 	sts	0x006E, r1
     6c2:	10 92 6d 00 	sts	0x006D, r1
		/*Action*/
		TIMER0_PFvoidOVFCall();
     6c6:	e0 91 69 00 	lds	r30, 0x0069
     6ca:	f0 91 6a 00 	lds	r31, 0x006A
     6ce:	09 95       	icall
	}
}
     6d0:	cf 91       	pop	r28
     6d2:	df 91       	pop	r29
     6d4:	ff 91       	pop	r31
     6d6:	ef 91       	pop	r30
     6d8:	bf 91       	pop	r27
     6da:	af 91       	pop	r26
     6dc:	9f 91       	pop	r25
     6de:	8f 91       	pop	r24
     6e0:	7f 91       	pop	r23
     6e2:	6f 91       	pop	r22
     6e4:	5f 91       	pop	r21
     6e6:	4f 91       	pop	r20
     6e8:	3f 91       	pop	r19
     6ea:	2f 91       	pop	r18
     6ec:	0f 90       	pop	r0
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	0f 90       	pop	r0
     6f2:	1f 90       	pop	r1
     6f4:	18 95       	reti

000006f6 <__vector_10>:


ISR(TIMER0_COMP_vect)
{
     6f6:	1f 92       	push	r1
     6f8:	0f 92       	push	r0
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	0f 92       	push	r0
     6fe:	11 24       	eor	r1, r1
     700:	2f 93       	push	r18
     702:	3f 93       	push	r19
     704:	4f 93       	push	r20
     706:	5f 93       	push	r21
     708:	6f 93       	push	r22
     70a:	7f 93       	push	r23
     70c:	8f 93       	push	r24
     70e:	9f 93       	push	r25
     710:	af 93       	push	r26
     712:	bf 93       	push	r27
     714:	ef 93       	push	r30
     716:	ff 93       	push	r31
     718:	df 93       	push	r29
     71a:	cf 93       	push	r28
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CTCCounter = 0 ;
	Local_u16CTCCounter ++ ;
     720:	80 91 6f 00 	lds	r24, 0x006F
     724:	90 91 70 00 	lds	r25, 0x0070
     728:	01 96       	adiw	r24, 0x01	; 1
     72a:	90 93 70 00 	sts	0x0070, r25
     72e:	80 93 6f 00 	sts	0x006F, r24
	if (Local_u16CTCCounter == 10000)
     732:	80 91 6f 00 	lds	r24, 0x006F
     736:	90 91 70 00 	lds	r25, 0x0070
     73a:	27 e2       	ldi	r18, 0x27	; 39
     73c:	80 31       	cpi	r24, 0x10	; 16
     73e:	92 07       	cpc	r25, r18
     740:	49 f4       	brne	.+18     	; 0x754 <__vector_10+0x5e>
	{
		/*Action*/
		TIMER0_PFvoidCTCCall();
     742:	e0 91 6b 00 	lds	r30, 0x006B
     746:	f0 91 6c 00 	lds	r31, 0x006C
     74a:	09 95       	icall
		/*Clear Counter*/
		Local_u16CTCCounter = 0 ;
     74c:	10 92 70 00 	sts	0x0070, r1
     750:	10 92 6f 00 	sts	0x006F, r1
	}
}
     754:	cf 91       	pop	r28
     756:	df 91       	pop	r29
     758:	ff 91       	pop	r31
     75a:	ef 91       	pop	r30
     75c:	bf 91       	pop	r27
     75e:	af 91       	pop	r26
     760:	9f 91       	pop	r25
     762:	8f 91       	pop	r24
     764:	7f 91       	pop	r23
     766:	6f 91       	pop	r22
     768:	5f 91       	pop	r21
     76a:	4f 91       	pop	r20
     76c:	3f 91       	pop	r19
     76e:	2f 91       	pop	r18
     770:	0f 90       	pop	r0
     772:	0f be       	out	0x3f, r0	; 63
     774:	0f 90       	pop	r0
     776:	1f 90       	pop	r1
     778:	18 95       	reti

0000077a <ADC_voidInit>:
#include "../01-DIO/DIO.h"
#include "ADC.h"


void ADC_voidInit (void)
{
     77a:	df 93       	push	r29
     77c:	cf 93       	push	r28
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
	/*Enable ADC*/
	SET_BIT(ADCSRA , ADEN);
     782:	a6 e2       	ldi	r26, 0x26	; 38
     784:	b0 e0       	ldi	r27, 0x00	; 0
     786:	e6 e2       	ldi	r30, 0x26	; 38
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 81       	ld	r24, Z
     78c:	80 68       	ori	r24, 0x80	; 128
     78e:	8c 93       	st	X, r24
	
	/*Select V Rer ==> AVCC = 5V */
	SET_BIT (ADMUX , REFS0);
     790:	a7 e2       	ldi	r26, 0x27	; 39
     792:	b0 e0       	ldi	r27, 0x00	; 0
     794:	e7 e2       	ldi	r30, 0x27	; 39
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	80 81       	ld	r24, Z
     79a:	80 64       	ori	r24, 0x40	; 64
     79c:	8c 93       	st	X, r24
	CLR_BIT (ADMUX , REFS1);
     79e:	a7 e2       	ldi	r26, 0x27	; 39
     7a0:	b0 e0       	ldi	r27, 0x00	; 0
     7a2:	e7 e2       	ldi	r30, 0x27	; 39
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	80 81       	ld	r24, Z
     7a8:	8f 77       	andi	r24, 0x7F	; 127
     7aa:	8c 93       	st	X, r24
	
	/*Right Adjust*/
	CLR_BIT (ADMUX , ADLAR);
     7ac:	a7 e2       	ldi	r26, 0x27	; 39
     7ae:	b0 e0       	ldi	r27, 0x00	; 0
     7b0:	e7 e2       	ldi	r30, 0x27	; 39
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	80 81       	ld	r24, Z
     7b6:	8f 7d       	andi	r24, 0xDF	; 223
     7b8:	8c 93       	st	X, r24
	
	/*Disable Auto Trig*/
	CLR_BIT (ADCSRA , ADATE);
     7ba:	a6 e2       	ldi	r26, 0x26	; 38
     7bc:	b0 e0       	ldi	r27, 0x00	; 0
     7be:	e6 e2       	ldi	r30, 0x26	; 38
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
     7c2:	80 81       	ld	r24, Z
     7c4:	8f 7d       	andi	r24, 0xDF	; 223
     7c6:	8c 93       	st	X, r24
	
	/*Select Prescaler*/
	CLR_BIT (ADCSRA , ADPS0);
     7c8:	a6 e2       	ldi	r26, 0x26	; 38
     7ca:	b0 e0       	ldi	r27, 0x00	; 0
     7cc:	e6 e2       	ldi	r30, 0x26	; 38
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	80 81       	ld	r24, Z
     7d2:	8e 7f       	andi	r24, 0xFE	; 254
     7d4:	8c 93       	st	X, r24
	SET_BIT (ADCSRA , ADPS1);
     7d6:	a6 e2       	ldi	r26, 0x26	; 38
     7d8:	b0 e0       	ldi	r27, 0x00	; 0
     7da:	e6 e2       	ldi	r30, 0x26	; 38
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	80 81       	ld	r24, Z
     7e0:	82 60       	ori	r24, 0x02	; 2
     7e2:	8c 93       	st	X, r24
	SET_BIT (ADCSRA , ADPS2);
     7e4:	a6 e2       	ldi	r26, 0x26	; 38
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	e6 e2       	ldi	r30, 0x26	; 38
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	84 60       	ori	r24, 0x04	; 4
     7f0:	8c 93       	st	X, r24
}
     7f2:	cf 91       	pop	r28
     7f4:	df 91       	pop	r29
     7f6:	08 95       	ret

000007f8 <ADC_u16GetDigitalValue>:
u16  ADC_u16GetDigitalValue (u8 Copy_u8ChannelNum)
{
     7f8:	df 93       	push	r29
     7fa:	cf 93       	push	r28
     7fc:	00 d0       	rcall	.+0      	; 0x7fe <ADC_u16GetDigitalValue+0x6>
     7fe:	cd b7       	in	r28, 0x3d	; 61
     800:	de b7       	in	r29, 0x3e	; 62
     802:	89 83       	std	Y+1, r24	; 0x01
	/*Select Channel*/
	ADMUX &= ADC_CHANNEL_RESET ;
     804:	a7 e2       	ldi	r26, 0x27	; 39
     806:	b0 e0       	ldi	r27, 0x00	; 0
     808:	e7 e2       	ldi	r30, 0x27	; 39
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	80 81       	ld	r24, Z
     80e:	80 7e       	andi	r24, 0xE0	; 224
     810:	8c 93       	st	X, r24
	ADMUX |= Copy_u8ChannelNum ;
     812:	a7 e2       	ldi	r26, 0x27	; 39
     814:	b0 e0       	ldi	r27, 0x00	; 0
     816:	e7 e2       	ldi	r30, 0x27	; 39
     818:	f0 e0       	ldi	r31, 0x00	; 0
     81a:	90 81       	ld	r25, Z
     81c:	89 81       	ldd	r24, Y+1	; 0x01
     81e:	89 2b       	or	r24, r25
     820:	8c 93       	st	X, r24
	
	/*Start Conversion*/
	SET_BIT (ADCSRA , ADSC);
     822:	a6 e2       	ldi	r26, 0x26	; 38
     824:	b0 e0       	ldi	r27, 0x00	; 0
     826:	e6 e2       	ldi	r30, 0x26	; 38
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	80 81       	ld	r24, Z
     82c:	80 64       	ori	r24, 0x40	; 64
     82e:	8c 93       	st	X, r24
	
	/*wait flag = 1*/
	while (GET_BIT(ADCSRA , ADIF) == 0);
     830:	e6 e2       	ldi	r30, 0x26	; 38
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	80 81       	ld	r24, Z
	
	/*Clear flag*/
	SET_BIT (ADCSRA , ADIF);
     836:	a6 e2       	ldi	r26, 0x26	; 38
     838:	b0 e0       	ldi	r27, 0x00	; 0
     83a:	e6 e2       	ldi	r30, 0x26	; 38
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	80 81       	ld	r24, Z
     840:	80 61       	ori	r24, 0x10	; 16
     842:	8c 93       	st	X, r24
	
	/*Read the digital value*/
	return ADC_REG ;
     844:	e4 e2       	ldi	r30, 0x24	; 36
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	80 81       	ld	r24, Z
     84a:	91 81       	ldd	r25, Z+1	; 0x01
}
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	cf 91       	pop	r28
     852:	df 91       	pop	r29
     854:	08 95       	ret

00000856 <INT_voidEnable>:
#include "INT.h"

static void (*INT_voidPFCall[3]) (void) = {0} ;

void INT_voidEnable (u8 Copy_u8INTIndex , u8 Copy_u8Edge)
{
     856:	df 93       	push	r29
     858:	cf 93       	push	r28
     85a:	cd b7       	in	r28, 0x3d	; 61
     85c:	de b7       	in	r29, 0x3e	; 62
     85e:	2a 97       	sbiw	r28, 0x0a	; 10
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	de bf       	out	0x3e, r29	; 62
     866:	0f be       	out	0x3f, r0	; 63
     868:	cd bf       	out	0x3d, r28	; 61
     86a:	89 83       	std	Y+1, r24	; 0x01
     86c:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8INTIndex)
     86e:	89 81       	ldd	r24, Y+1	; 0x01
     870:	28 2f       	mov	r18, r24
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	3a 87       	std	Y+10, r19	; 0x0a
     876:	29 87       	std	Y+9, r18	; 0x09
     878:	89 85       	ldd	r24, Y+9	; 0x09
     87a:	9a 85       	ldd	r25, Y+10	; 0x0a
     87c:	81 30       	cpi	r24, 0x01	; 1
     87e:	91 05       	cpc	r25, r1
     880:	09 f4       	brne	.+2      	; 0x884 <__stack+0x25>
     882:	6d c0       	rjmp	.+218    	; 0x95e <__stack+0xff>
     884:	29 85       	ldd	r18, Y+9	; 0x09
     886:	3a 85       	ldd	r19, Y+10	; 0x0a
     888:	22 30       	cpi	r18, 0x02	; 2
     88a:	31 05       	cpc	r19, r1
     88c:	09 f4       	brne	.+2      	; 0x890 <__stack+0x31>
     88e:	c9 c0       	rjmp	.+402    	; 0xa22 <__stack+0x1c3>
     890:	89 85       	ldd	r24, Y+9	; 0x09
     892:	9a 85       	ldd	r25, Y+10	; 0x0a
     894:	00 97       	sbiw	r24, 0x00	; 0
     896:	09 f0       	breq	.+2      	; 0x89a <__stack+0x3b>
     898:	e9 c0       	rjmp	.+466    	; 0xa6c <__stack+0x20d>
	{
		case EXT_INT0 :
			/*Edge Select*/
			switch (Copy_u8Edge)
     89a:	8a 81       	ldd	r24, Y+2	; 0x02
     89c:	28 2f       	mov	r18, r24
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	38 87       	std	Y+8, r19	; 0x08
     8a2:	2f 83       	std	Y+7, r18	; 0x07
     8a4:	8f 81       	ldd	r24, Y+7	; 0x07
     8a6:	98 85       	ldd	r25, Y+8	; 0x08
     8a8:	81 30       	cpi	r24, 0x01	; 1
     8aa:	91 05       	cpc	r25, r1
     8ac:	21 f1       	breq	.+72     	; 0x8f6 <__stack+0x97>
     8ae:	2f 81       	ldd	r18, Y+7	; 0x07
     8b0:	38 85       	ldd	r19, Y+8	; 0x08
     8b2:	22 30       	cpi	r18, 0x02	; 2
     8b4:	31 05       	cpc	r19, r1
     8b6:	2c f4       	brge	.+10     	; 0x8c2 <__stack+0x63>
     8b8:	8f 81       	ldd	r24, Y+7	; 0x07
     8ba:	98 85       	ldd	r25, Y+8	; 0x08
     8bc:	00 97       	sbiw	r24, 0x00	; 0
     8be:	61 f0       	breq	.+24     	; 0x8d8 <__stack+0x79>
     8c0:	46 c0       	rjmp	.+140    	; 0x94e <__stack+0xef>
     8c2:	2f 81       	ldd	r18, Y+7	; 0x07
     8c4:	38 85       	ldd	r19, Y+8	; 0x08
     8c6:	22 30       	cpi	r18, 0x02	; 2
     8c8:	31 05       	cpc	r19, r1
     8ca:	21 f1       	breq	.+72     	; 0x914 <__stack+0xb5>
     8cc:	8f 81       	ldd	r24, Y+7	; 0x07
     8ce:	98 85       	ldd	r25, Y+8	; 0x08
     8d0:	83 30       	cpi	r24, 0x03	; 3
     8d2:	91 05       	cpc	r25, r1
     8d4:	71 f1       	breq	.+92     	; 0x932 <__stack+0xd3>
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__stack+0xef>
			{
				case INT_FALLING_EDGE 		: 
					CLR_BIT (MCUCR , ISC00);
     8d8:	a5 e5       	ldi	r26, 0x55	; 85
     8da:	b0 e0       	ldi	r27, 0x00	; 0
     8dc:	e5 e5       	ldi	r30, 0x55	; 85
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	80 81       	ld	r24, Z
     8e2:	8e 7f       	andi	r24, 0xFE	; 254
     8e4:	8c 93       	st	X, r24
					SET_BIT (MCUCR , ISC01);
     8e6:	a5 e5       	ldi	r26, 0x55	; 85
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	e5 e5       	ldi	r30, 0x55	; 85
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	80 81       	ld	r24, Z
     8f0:	82 60       	ori	r24, 0x02	; 2
     8f2:	8c 93       	st	X, r24
     8f4:	2c c0       	rjmp	.+88     	; 0x94e <__stack+0xef>
					break ;
				case INT_RISING_EDGE  		:
					SET_BIT (MCUCR , ISC00);
     8f6:	a5 e5       	ldi	r26, 0x55	; 85
     8f8:	b0 e0       	ldi	r27, 0x00	; 0
     8fa:	e5 e5       	ldi	r30, 0x55	; 85
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	80 81       	ld	r24, Z
     900:	81 60       	ori	r24, 0x01	; 1
     902:	8c 93       	st	X, r24
					SET_BIT (MCUCR , ISC01);
     904:	a5 e5       	ldi	r26, 0x55	; 85
     906:	b0 e0       	ldi	r27, 0x00	; 0
     908:	e5 e5       	ldi	r30, 0x55	; 85
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	80 81       	ld	r24, Z
     90e:	82 60       	ori	r24, 0x02	; 2
     910:	8c 93       	st	X, r24
     912:	1d c0       	rjmp	.+58     	; 0x94e <__stack+0xef>
					break ;
				case INT_ANY_LOGICAL_CHANGE :
					SET_BIT (MCUCR , ISC00);
     914:	a5 e5       	ldi	r26, 0x55	; 85
     916:	b0 e0       	ldi	r27, 0x00	; 0
     918:	e5 e5       	ldi	r30, 0x55	; 85
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	80 81       	ld	r24, Z
     91e:	81 60       	ori	r24, 0x01	; 1
     920:	8c 93       	st	X, r24
					CLR_BIT (MCUCR , ISC01);
     922:	a5 e5       	ldi	r26, 0x55	; 85
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	e5 e5       	ldi	r30, 0x55	; 85
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	80 81       	ld	r24, Z
     92c:	8d 7f       	andi	r24, 0xFD	; 253
     92e:	8c 93       	st	X, r24
     930:	0e c0       	rjmp	.+28     	; 0x94e <__stack+0xef>
					break ;
				case INT_LOW_LEVEL 			:
					CLR_BIT (MCUCR , ISC00);
     932:	a5 e5       	ldi	r26, 0x55	; 85
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e5 e5       	ldi	r30, 0x55	; 85
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	80 81       	ld	r24, Z
     93c:	8e 7f       	andi	r24, 0xFE	; 254
     93e:	8c 93       	st	X, r24
					CLR_BIT (MCUCR , ISC01);
     940:	a5 e5       	ldi	r26, 0x55	; 85
     942:	b0 e0       	ldi	r27, 0x00	; 0
     944:	e5 e5       	ldi	r30, 0x55	; 85
     946:	f0 e0       	ldi	r31, 0x00	; 0
     948:	80 81       	ld	r24, Z
     94a:	8d 7f       	andi	r24, 0xFD	; 253
     94c:	8c 93       	st	X, r24
					break ;
			}
			/*INT0 Enable*/
			SET_BIT (GICR , INT0);
     94e:	ab e5       	ldi	r26, 0x5B	; 91
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	eb e5       	ldi	r30, 0x5B	; 91
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	80 81       	ld	r24, Z
     958:	80 64       	ori	r24, 0x40	; 64
     95a:	8c 93       	st	X, r24
     95c:	87 c0       	rjmp	.+270    	; 0xa6c <__stack+0x20d>
			break ;
		case EXT_INT1 :
			/*Edge Select*/
			switch (Copy_u8Edge)
     95e:	8a 81       	ldd	r24, Y+2	; 0x02
     960:	28 2f       	mov	r18, r24
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	3e 83       	std	Y+6, r19	; 0x06
     966:	2d 83       	std	Y+5, r18	; 0x05
     968:	8d 81       	ldd	r24, Y+5	; 0x05
     96a:	9e 81       	ldd	r25, Y+6	; 0x06
     96c:	81 30       	cpi	r24, 0x01	; 1
     96e:	91 05       	cpc	r25, r1
     970:	21 f1       	breq	.+72     	; 0x9ba <__stack+0x15b>
     972:	2d 81       	ldd	r18, Y+5	; 0x05
     974:	3e 81       	ldd	r19, Y+6	; 0x06
     976:	22 30       	cpi	r18, 0x02	; 2
     978:	31 05       	cpc	r19, r1
     97a:	2c f4       	brge	.+10     	; 0x986 <__stack+0x127>
     97c:	8d 81       	ldd	r24, Y+5	; 0x05
     97e:	9e 81       	ldd	r25, Y+6	; 0x06
     980:	00 97       	sbiw	r24, 0x00	; 0
     982:	61 f0       	breq	.+24     	; 0x99c <__stack+0x13d>
     984:	46 c0       	rjmp	.+140    	; 0xa12 <__stack+0x1b3>
     986:	2d 81       	ldd	r18, Y+5	; 0x05
     988:	3e 81       	ldd	r19, Y+6	; 0x06
     98a:	22 30       	cpi	r18, 0x02	; 2
     98c:	31 05       	cpc	r19, r1
     98e:	21 f1       	breq	.+72     	; 0x9d8 <__stack+0x179>
     990:	8d 81       	ldd	r24, Y+5	; 0x05
     992:	9e 81       	ldd	r25, Y+6	; 0x06
     994:	83 30       	cpi	r24, 0x03	; 3
     996:	91 05       	cpc	r25, r1
     998:	71 f1       	breq	.+92     	; 0x9f6 <__stack+0x197>
     99a:	3b c0       	rjmp	.+118    	; 0xa12 <__stack+0x1b3>
			{
				case INT_FALLING_EDGE 		: 
					CLR_BIT (MCUCR , ISC10);
     99c:	a5 e5       	ldi	r26, 0x55	; 85
     99e:	b0 e0       	ldi	r27, 0x00	; 0
     9a0:	e5 e5       	ldi	r30, 0x55	; 85
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	80 81       	ld	r24, Z
     9a6:	8b 7f       	andi	r24, 0xFB	; 251
     9a8:	8c 93       	st	X, r24
					SET_BIT (MCUCR , ISC11);
     9aa:	a5 e5       	ldi	r26, 0x55	; 85
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e5 e5       	ldi	r30, 0x55	; 85
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	80 81       	ld	r24, Z
     9b4:	88 60       	ori	r24, 0x08	; 8
     9b6:	8c 93       	st	X, r24
     9b8:	2c c0       	rjmp	.+88     	; 0xa12 <__stack+0x1b3>
					break ;
				case INT_RISING_EDGE  		:
					SET_BIT (MCUCR , ISC10);
     9ba:	a5 e5       	ldi	r26, 0x55	; 85
     9bc:	b0 e0       	ldi	r27, 0x00	; 0
     9be:	e5 e5       	ldi	r30, 0x55	; 85
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	80 81       	ld	r24, Z
     9c4:	84 60       	ori	r24, 0x04	; 4
     9c6:	8c 93       	st	X, r24
					SET_BIT (MCUCR , ISC11);
     9c8:	a5 e5       	ldi	r26, 0x55	; 85
     9ca:	b0 e0       	ldi	r27, 0x00	; 0
     9cc:	e5 e5       	ldi	r30, 0x55	; 85
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	80 81       	ld	r24, Z
     9d2:	88 60       	ori	r24, 0x08	; 8
     9d4:	8c 93       	st	X, r24
     9d6:	1d c0       	rjmp	.+58     	; 0xa12 <__stack+0x1b3>
					break ;
				case INT_ANY_LOGICAL_CHANGE :
					SET_BIT (MCUCR , ISC10);
     9d8:	a5 e5       	ldi	r26, 0x55	; 85
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	e5 e5       	ldi	r30, 0x55	; 85
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	80 81       	ld	r24, Z
     9e2:	84 60       	ori	r24, 0x04	; 4
     9e4:	8c 93       	st	X, r24
					CLR_BIT (MCUCR , ISC11);
     9e6:	a5 e5       	ldi	r26, 0x55	; 85
     9e8:	b0 e0       	ldi	r27, 0x00	; 0
     9ea:	e5 e5       	ldi	r30, 0x55	; 85
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	80 81       	ld	r24, Z
     9f0:	87 7f       	andi	r24, 0xF7	; 247
     9f2:	8c 93       	st	X, r24
     9f4:	0e c0       	rjmp	.+28     	; 0xa12 <__stack+0x1b3>
					break ;
				case INT_LOW_LEVEL 			:
					CLR_BIT (MCUCR , ISC10);
     9f6:	a5 e5       	ldi	r26, 0x55	; 85
     9f8:	b0 e0       	ldi	r27, 0x00	; 0
     9fa:	e5 e5       	ldi	r30, 0x55	; 85
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	80 81       	ld	r24, Z
     a00:	8b 7f       	andi	r24, 0xFB	; 251
     a02:	8c 93       	st	X, r24
					CLR_BIT (MCUCR , ISC11);
     a04:	a5 e5       	ldi	r26, 0x55	; 85
     a06:	b0 e0       	ldi	r27, 0x00	; 0
     a08:	e5 e5       	ldi	r30, 0x55	; 85
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 81       	ld	r24, Z
     a0e:	87 7f       	andi	r24, 0xF7	; 247
     a10:	8c 93       	st	X, r24
					break ;
			}
			/*INT1 Enable*/
			SET_BIT (GICR , INT1);
     a12:	ab e5       	ldi	r26, 0x5B	; 91
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	eb e5       	ldi	r30, 0x5B	; 91
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	80 81       	ld	r24, Z
     a1c:	80 68       	ori	r24, 0x80	; 128
     a1e:	8c 93       	st	X, r24
     a20:	25 c0       	rjmp	.+74     	; 0xa6c <__stack+0x20d>
			break ;
		case EXT_INT2 :
			/*Edge Select*/
			switch (Copy_u8Edge)
     a22:	8a 81       	ldd	r24, Y+2	; 0x02
     a24:	28 2f       	mov	r18, r24
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	3c 83       	std	Y+4, r19	; 0x04
     a2a:	2b 83       	std	Y+3, r18	; 0x03
     a2c:	8b 81       	ldd	r24, Y+3	; 0x03
     a2e:	9c 81       	ldd	r25, Y+4	; 0x04
     a30:	00 97       	sbiw	r24, 0x00	; 0
     a32:	31 f0       	breq	.+12     	; 0xa40 <__stack+0x1e1>
     a34:	2b 81       	ldd	r18, Y+3	; 0x03
     a36:	3c 81       	ldd	r19, Y+4	; 0x04
     a38:	21 30       	cpi	r18, 0x01	; 1
     a3a:	31 05       	cpc	r19, r1
     a3c:	49 f0       	breq	.+18     	; 0xa50 <__stack+0x1f1>
     a3e:	0f c0       	rjmp	.+30     	; 0xa5e <__stack+0x1ff>
			{
			case INT_FALLING_EDGE 		: 
				CLR_BIT(MCUCSR , ISC2);
     a40:	a4 e5       	ldi	r26, 0x54	; 84
     a42:	b0 e0       	ldi	r27, 0x00	; 0
     a44:	e4 e5       	ldi	r30, 0x54	; 84
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	80 81       	ld	r24, Z
     a4a:	8f 7b       	andi	r24, 0xBF	; 191
     a4c:	8c 93       	st	X, r24
     a4e:	07 c0       	rjmp	.+14     	; 0xa5e <__stack+0x1ff>
				break ;
			case INT_RISING_EDGE  		:
				SET_BIT(MCUCSR , ISC2);
     a50:	a4 e5       	ldi	r26, 0x54	; 84
     a52:	b0 e0       	ldi	r27, 0x00	; 0
     a54:	e4 e5       	ldi	r30, 0x54	; 84
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	80 81       	ld	r24, Z
     a5a:	80 64       	ori	r24, 0x40	; 64
     a5c:	8c 93       	st	X, r24
				break ;
			}
			/*INT2 Enable*/
			SET_BIT(GICR , INT2);
     a5e:	ab e5       	ldi	r26, 0x5B	; 91
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	eb e5       	ldi	r30, 0x5B	; 91
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	80 81       	ld	r24, Z
     a68:	80 62       	ori	r24, 0x20	; 32
     a6a:	8c 93       	st	X, r24
			break ;
	}
}
     a6c:	2a 96       	adiw	r28, 0x0a	; 10
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	f8 94       	cli
     a72:	de bf       	out	0x3e, r29	; 62
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	cd bf       	out	0x3d, r28	; 61
     a78:	cf 91       	pop	r28
     a7a:	df 91       	pop	r29
     a7c:	08 95       	ret

00000a7e <INT_voidDisable>:


void INT_voidDisable (u8 Copy_u8INTIndex)
{
     a7e:	df 93       	push	r29
     a80:	cf 93       	push	r28
     a82:	00 d0       	rcall	.+0      	; 0xa84 <INT_voidDisable+0x6>
     a84:	0f 92       	push	r0
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
     a8a:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8INTIndex)
     a8c:	89 81       	ldd	r24, Y+1	; 0x01
     a8e:	28 2f       	mov	r18, r24
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	3b 83       	std	Y+3, r19	; 0x03
     a94:	2a 83       	std	Y+2, r18	; 0x02
     a96:	8a 81       	ldd	r24, Y+2	; 0x02
     a98:	9b 81       	ldd	r25, Y+3	; 0x03
     a9a:	81 30       	cpi	r24, 0x01	; 1
     a9c:	91 05       	cpc	r25, r1
     a9e:	89 f0       	breq	.+34     	; 0xac2 <INT_voidDisable+0x44>
     aa0:	2a 81       	ldd	r18, Y+2	; 0x02
     aa2:	3b 81       	ldd	r19, Y+3	; 0x03
     aa4:	22 30       	cpi	r18, 0x02	; 2
     aa6:	31 05       	cpc	r19, r1
     aa8:	a1 f0       	breq	.+40     	; 0xad2 <INT_voidDisable+0x54>
     aaa:	8a 81       	ldd	r24, Y+2	; 0x02
     aac:	9b 81       	ldd	r25, Y+3	; 0x03
     aae:	00 97       	sbiw	r24, 0x00	; 0
     ab0:	b9 f4       	brne	.+46     	; 0xae0 <INT_voidDisable+0x62>
	{
		case EXT_INT0 :  CLR_BIT (GICR , INT0) ; break ;
     ab2:	ab e5       	ldi	r26, 0x5B	; 91
     ab4:	b0 e0       	ldi	r27, 0x00	; 0
     ab6:	eb e5       	ldi	r30, 0x5B	; 91
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	80 81       	ld	r24, Z
     abc:	8f 7b       	andi	r24, 0xBF	; 191
     abe:	8c 93       	st	X, r24
     ac0:	0f c0       	rjmp	.+30     	; 0xae0 <INT_voidDisable+0x62>
		case EXT_INT1 :  CLR_BIT (GICR , INT1) ; break ;
     ac2:	ab e5       	ldi	r26, 0x5B	; 91
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	eb e5       	ldi	r30, 0x5B	; 91
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	80 81       	ld	r24, Z
     acc:	8f 77       	andi	r24, 0x7F	; 127
     ace:	8c 93       	st	X, r24
     ad0:	07 c0       	rjmp	.+14     	; 0xae0 <INT_voidDisable+0x62>
		case EXT_INT2 :  CLR_BIT (GICR , INT2) ; break ;
     ad2:	ab e5       	ldi	r26, 0x5B	; 91
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	eb e5       	ldi	r30, 0x5B	; 91
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	80 81       	ld	r24, Z
     adc:	8f 7d       	andi	r24, 0xDF	; 223
     ade:	8c 93       	st	X, r24
		
	}
}
     ae0:	0f 90       	pop	r0
     ae2:	0f 90       	pop	r0
     ae4:	0f 90       	pop	r0
     ae6:	cf 91       	pop	r28
     ae8:	df 91       	pop	r29
     aea:	08 95       	ret

00000aec <INT_voidSetCallBack>:

void INT_voidSetCallBack (u8 Copy_u8Index , void (*Copy_voidPFNameFunc) (void))
{
     aec:	df 93       	push	r29
     aee:	cf 93       	push	r28
     af0:	00 d0       	rcall	.+0      	; 0xaf2 <INT_voidSetCallBack+0x6>
     af2:	0f 92       	push	r0
     af4:	cd b7       	in	r28, 0x3d	; 61
     af6:	de b7       	in	r29, 0x3e	; 62
     af8:	89 83       	std	Y+1, r24	; 0x01
     afa:	7b 83       	std	Y+3, r23	; 0x03
     afc:	6a 83       	std	Y+2, r22	; 0x02
	INT_voidPFCall[Copy_u8Index] = Copy_voidPFNameFunc ;
     afe:	89 81       	ldd	r24, Y+1	; 0x01
     b00:	88 2f       	mov	r24, r24
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	88 0f       	add	r24, r24
     b06:	99 1f       	adc	r25, r25
     b08:	fc 01       	movw	r30, r24
     b0a:	ef 58       	subi	r30, 0x8F	; 143
     b0c:	ff 4f       	sbci	r31, 0xFF	; 255
     b0e:	8a 81       	ldd	r24, Y+2	; 0x02
     b10:	9b 81       	ldd	r25, Y+3	; 0x03
     b12:	91 83       	std	Z+1, r25	; 0x01
     b14:	80 83       	st	Z, r24
}
     b16:	0f 90       	pop	r0
     b18:	0f 90       	pop	r0
     b1a:	0f 90       	pop	r0
     b1c:	cf 91       	pop	r28
     b1e:	df 91       	pop	r29
     b20:	08 95       	ret

00000b22 <__vector_1>:

ISR(INT0_vect)
{
     b22:	1f 92       	push	r1
     b24:	0f 92       	push	r0
     b26:	0f b6       	in	r0, 0x3f	; 63
     b28:	0f 92       	push	r0
     b2a:	11 24       	eor	r1, r1
     b2c:	2f 93       	push	r18
     b2e:	3f 93       	push	r19
     b30:	4f 93       	push	r20
     b32:	5f 93       	push	r21
     b34:	6f 93       	push	r22
     b36:	7f 93       	push	r23
     b38:	8f 93       	push	r24
     b3a:	9f 93       	push	r25
     b3c:	af 93       	push	r26
     b3e:	bf 93       	push	r27
     b40:	ef 93       	push	r30
     b42:	ff 93       	push	r31
     b44:	df 93       	push	r29
     b46:	cf 93       	push	r28
     b48:	cd b7       	in	r28, 0x3d	; 61
     b4a:	de b7       	in	r29, 0x3e	; 62
	if (INT_voidPFCall[0] != NULL)
     b4c:	80 91 71 00 	lds	r24, 0x0071
     b50:	90 91 72 00 	lds	r25, 0x0072
     b54:	00 97       	sbiw	r24, 0x00	; 0
     b56:	29 f0       	breq	.+10     	; 0xb62 <__vector_1+0x40>
	INT_voidPFCall[0]();
     b58:	e0 91 71 00 	lds	r30, 0x0071
     b5c:	f0 91 72 00 	lds	r31, 0x0072
     b60:	09 95       	icall
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	ff 91       	pop	r31
     b68:	ef 91       	pop	r30
     b6a:	bf 91       	pop	r27
     b6c:	af 91       	pop	r26
     b6e:	9f 91       	pop	r25
     b70:	8f 91       	pop	r24
     b72:	7f 91       	pop	r23
     b74:	6f 91       	pop	r22
     b76:	5f 91       	pop	r21
     b78:	4f 91       	pop	r20
     b7a:	3f 91       	pop	r19
     b7c:	2f 91       	pop	r18
     b7e:	0f 90       	pop	r0
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	0f 90       	pop	r0
     b84:	1f 90       	pop	r1
     b86:	18 95       	reti

00000b88 <__vector_2>:

ISR(INT1_vect)
{
     b88:	1f 92       	push	r1
     b8a:	0f 92       	push	r0
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	0f 92       	push	r0
     b90:	11 24       	eor	r1, r1
     b92:	2f 93       	push	r18
     b94:	3f 93       	push	r19
     b96:	4f 93       	push	r20
     b98:	5f 93       	push	r21
     b9a:	6f 93       	push	r22
     b9c:	7f 93       	push	r23
     b9e:	8f 93       	push	r24
     ba0:	9f 93       	push	r25
     ba2:	af 93       	push	r26
     ba4:	bf 93       	push	r27
     ba6:	ef 93       	push	r30
     ba8:	ff 93       	push	r31
     baa:	df 93       	push	r29
     bac:	cf 93       	push	r28
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
	if (INT_voidPFCall[1] != NULL)
     bb2:	80 91 73 00 	lds	r24, 0x0073
     bb6:	90 91 74 00 	lds	r25, 0x0074
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	29 f0       	breq	.+10     	; 0xbc8 <__vector_2+0x40>
	INT_voidPFCall[1]();
     bbe:	e0 91 73 00 	lds	r30, 0x0073
     bc2:	f0 91 74 00 	lds	r31, 0x0074
     bc6:	09 95       	icall
}
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	ff 91       	pop	r31
     bce:	ef 91       	pop	r30
     bd0:	bf 91       	pop	r27
     bd2:	af 91       	pop	r26
     bd4:	9f 91       	pop	r25
     bd6:	8f 91       	pop	r24
     bd8:	7f 91       	pop	r23
     bda:	6f 91       	pop	r22
     bdc:	5f 91       	pop	r21
     bde:	4f 91       	pop	r20
     be0:	3f 91       	pop	r19
     be2:	2f 91       	pop	r18
     be4:	0f 90       	pop	r0
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	0f 90       	pop	r0
     bea:	1f 90       	pop	r1
     bec:	18 95       	reti

00000bee <__vector_3>:
ISR(INT2_vect)
{
     bee:	1f 92       	push	r1
     bf0:	0f 92       	push	r0
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	0f 92       	push	r0
     bf6:	11 24       	eor	r1, r1
     bf8:	2f 93       	push	r18
     bfa:	3f 93       	push	r19
     bfc:	4f 93       	push	r20
     bfe:	5f 93       	push	r21
     c00:	6f 93       	push	r22
     c02:	7f 93       	push	r23
     c04:	8f 93       	push	r24
     c06:	9f 93       	push	r25
     c08:	af 93       	push	r26
     c0a:	bf 93       	push	r27
     c0c:	ef 93       	push	r30
     c0e:	ff 93       	push	r31
     c10:	df 93       	push	r29
     c12:	cf 93       	push	r28
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
	if (INT_voidPFCall[2] != NULL)
     c18:	80 91 75 00 	lds	r24, 0x0075
     c1c:	90 91 76 00 	lds	r25, 0x0076
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	29 f0       	breq	.+10     	; 0xc2e <__vector_3+0x40>
	INT_voidPFCall[2]();
     c24:	e0 91 75 00 	lds	r30, 0x0075
     c28:	f0 91 76 00 	lds	r31, 0x0076
     c2c:	09 95       	icall
}
     c2e:	cf 91       	pop	r28
     c30:	df 91       	pop	r29
     c32:	ff 91       	pop	r31
     c34:	ef 91       	pop	r30
     c36:	bf 91       	pop	r27
     c38:	af 91       	pop	r26
     c3a:	9f 91       	pop	r25
     c3c:	8f 91       	pop	r24
     c3e:	7f 91       	pop	r23
     c40:	6f 91       	pop	r22
     c42:	5f 91       	pop	r21
     c44:	4f 91       	pop	r20
     c46:	3f 91       	pop	r19
     c48:	2f 91       	pop	r18
     c4a:	0f 90       	pop	r0
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	0f 90       	pop	r0
     c50:	1f 90       	pop	r1
     c52:	18 95       	reti

00000c54 <DIO_voidSetPinDirection>:
#include "../../01-LIB/BIT_MATH.h"

#include "DIO.h"

void DIO_voidSetPinDirection (u8 Copy_u8Port , u8 Copy_u8Pin  , u8 Copy_u8Direction)
{
     c54:	df 93       	push	r29
     c56:	cf 93       	push	r28
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	27 97       	sbiw	r28, 0x07	; 7
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	de bf       	out	0x3e, r29	; 62
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	cd bf       	out	0x3d, r28	; 61
     c68:	89 83       	std	Y+1, r24	; 0x01
     c6a:	6a 83       	std	Y+2, r22	; 0x02
     c6c:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Direction == DIO_OUTPUT)
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	09 f0       	breq	.+2      	; 0xc76 <DIO_voidSetPinDirection+0x22>
     c74:	6f c0       	rjmp	.+222    	; 0xd54 <DIO_voidSetPinDirection+0x100>
	{
		switch (Copy_u8Port)
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	28 2f       	mov	r18, r24
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	3f 83       	std	Y+7, r19	; 0x07
     c7e:	2e 83       	std	Y+6, r18	; 0x06
     c80:	8e 81       	ldd	r24, Y+6	; 0x06
     c82:	9f 81       	ldd	r25, Y+7	; 0x07
     c84:	81 30       	cpi	r24, 0x01	; 1
     c86:	91 05       	cpc	r25, r1
     c88:	49 f1       	breq	.+82     	; 0xcdc <DIO_voidSetPinDirection+0x88>
     c8a:	2e 81       	ldd	r18, Y+6	; 0x06
     c8c:	3f 81       	ldd	r19, Y+7	; 0x07
     c8e:	22 30       	cpi	r18, 0x02	; 2
     c90:	31 05       	cpc	r19, r1
     c92:	2c f4       	brge	.+10     	; 0xc9e <DIO_voidSetPinDirection+0x4a>
     c94:	8e 81       	ldd	r24, Y+6	; 0x06
     c96:	9f 81       	ldd	r25, Y+7	; 0x07
     c98:	00 97       	sbiw	r24, 0x00	; 0
     c9a:	61 f0       	breq	.+24     	; 0xcb4 <DIO_voidSetPinDirection+0x60>
     c9c:	d2 c0       	rjmp	.+420    	; 0xe42 <DIO_voidSetPinDirection+0x1ee>
     c9e:	2e 81       	ldd	r18, Y+6	; 0x06
     ca0:	3f 81       	ldd	r19, Y+7	; 0x07
     ca2:	22 30       	cpi	r18, 0x02	; 2
     ca4:	31 05       	cpc	r19, r1
     ca6:	71 f1       	breq	.+92     	; 0xd04 <DIO_voidSetPinDirection+0xb0>
     ca8:	8e 81       	ldd	r24, Y+6	; 0x06
     caa:	9f 81       	ldd	r25, Y+7	; 0x07
     cac:	83 30       	cpi	r24, 0x03	; 3
     cae:	91 05       	cpc	r25, r1
     cb0:	e9 f1       	breq	.+122    	; 0xd2c <DIO_voidSetPinDirection+0xd8>
     cb2:	c7 c0       	rjmp	.+398    	; 0xe42 <DIO_voidSetPinDirection+0x1ee>
		{
			case DIO_PORTA : SET_BIT(DDRA , Copy_u8Pin); break ;
     cb4:	aa e3       	ldi	r26, 0x3A	; 58
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	ea e3       	ldi	r30, 0x3A	; 58
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	48 2f       	mov	r20, r24
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	28 2f       	mov	r18, r24
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	02 2e       	mov	r0, r18
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <DIO_voidSetPinDirection+0x7e>
     cce:	88 0f       	add	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	0a 94       	dec	r0
     cd4:	e2 f7       	brpl	.-8      	; 0xcce <DIO_voidSetPinDirection+0x7a>
     cd6:	84 2b       	or	r24, r20
     cd8:	8c 93       	st	X, r24
     cda:	b3 c0       	rjmp	.+358    	; 0xe42 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTB : SET_BIT(DDRB , Copy_u8Pin); break ;
     cdc:	a7 e3       	ldi	r26, 0x37	; 55
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e7 e3       	ldi	r30, 0x37	; 55
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	48 2f       	mov	r20, r24
     ce8:	8a 81       	ldd	r24, Y+2	; 0x02
     cea:	28 2f       	mov	r18, r24
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	02 2e       	mov	r0, r18
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <DIO_voidSetPinDirection+0xa6>
     cf6:	88 0f       	add	r24, r24
     cf8:	99 1f       	adc	r25, r25
     cfa:	0a 94       	dec	r0
     cfc:	e2 f7       	brpl	.-8      	; 0xcf6 <DIO_voidSetPinDirection+0xa2>
     cfe:	84 2b       	or	r24, r20
     d00:	8c 93       	st	X, r24
     d02:	9f c0       	rjmp	.+318    	; 0xe42 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTC : SET_BIT(DDRC , Copy_u8Pin); break ;
     d04:	a4 e3       	ldi	r26, 0x34	; 52
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e4 e3       	ldi	r30, 0x34	; 52
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	48 2f       	mov	r20, r24
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	02 2e       	mov	r0, r18
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <DIO_voidSetPinDirection+0xce>
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	0a 94       	dec	r0
     d24:	e2 f7       	brpl	.-8      	; 0xd1e <DIO_voidSetPinDirection+0xca>
     d26:	84 2b       	or	r24, r20
     d28:	8c 93       	st	X, r24
     d2a:	8b c0       	rjmp	.+278    	; 0xe42 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTD : SET_BIT(DDRD , Copy_u8Pin); break ;
     d2c:	a1 e3       	ldi	r26, 0x31	; 49
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e1 e3       	ldi	r30, 0x31	; 49
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	48 2f       	mov	r20, r24
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	02 2e       	mov	r0, r18
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <DIO_voidSetPinDirection+0xf6>
     d46:	88 0f       	add	r24, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	0a 94       	dec	r0
     d4c:	e2 f7       	brpl	.-8      	; 0xd46 <DIO_voidSetPinDirection+0xf2>
     d4e:	84 2b       	or	r24, r20
     d50:	8c 93       	st	X, r24
     d52:	77 c0       	rjmp	.+238    	; 0xe42 <DIO_voidSetPinDirection+0x1ee>
		}
	}
	else if (Copy_u8Direction == DIO_INPUT)
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	88 23       	and	r24, r24
     d58:	09 f0       	breq	.+2      	; 0xd5c <DIO_voidSetPinDirection+0x108>
     d5a:	73 c0       	rjmp	.+230    	; 0xe42 <DIO_voidSetPinDirection+0x1ee>
	{
		switch (Copy_u8Port)
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	28 2f       	mov	r18, r24
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	3d 83       	std	Y+5, r19	; 0x05
     d64:	2c 83       	std	Y+4, r18	; 0x04
     d66:	8c 81       	ldd	r24, Y+4	; 0x04
     d68:	9d 81       	ldd	r25, Y+5	; 0x05
     d6a:	81 30       	cpi	r24, 0x01	; 1
     d6c:	91 05       	cpc	r25, r1
     d6e:	59 f1       	breq	.+86     	; 0xdc6 <DIO_voidSetPinDirection+0x172>
     d70:	2c 81       	ldd	r18, Y+4	; 0x04
     d72:	3d 81       	ldd	r19, Y+5	; 0x05
     d74:	22 30       	cpi	r18, 0x02	; 2
     d76:	31 05       	cpc	r19, r1
     d78:	2c f4       	brge	.+10     	; 0xd84 <DIO_voidSetPinDirection+0x130>
     d7a:	8c 81       	ldd	r24, Y+4	; 0x04
     d7c:	9d 81       	ldd	r25, Y+5	; 0x05
     d7e:	00 97       	sbiw	r24, 0x00	; 0
     d80:	69 f0       	breq	.+26     	; 0xd9c <DIO_voidSetPinDirection+0x148>
     d82:	5f c0       	rjmp	.+190    	; 0xe42 <DIO_voidSetPinDirection+0x1ee>
     d84:	2c 81       	ldd	r18, Y+4	; 0x04
     d86:	3d 81       	ldd	r19, Y+5	; 0x05
     d88:	22 30       	cpi	r18, 0x02	; 2
     d8a:	31 05       	cpc	r19, r1
     d8c:	89 f1       	breq	.+98     	; 0xdf0 <DIO_voidSetPinDirection+0x19c>
     d8e:	8c 81       	ldd	r24, Y+4	; 0x04
     d90:	9d 81       	ldd	r25, Y+5	; 0x05
     d92:	83 30       	cpi	r24, 0x03	; 3
     d94:	91 05       	cpc	r25, r1
     d96:	09 f4       	brne	.+2      	; 0xd9a <DIO_voidSetPinDirection+0x146>
     d98:	40 c0       	rjmp	.+128    	; 0xe1a <DIO_voidSetPinDirection+0x1c6>
     d9a:	53 c0       	rjmp	.+166    	; 0xe42 <DIO_voidSetPinDirection+0x1ee>
		{
			case DIO_PORTA : CLR_BIT(DDRA , Copy_u8Pin); break ;
     d9c:	aa e3       	ldi	r26, 0x3A	; 58
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	ea e3       	ldi	r30, 0x3A	; 58
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	48 2f       	mov	r20, r24
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	02 2e       	mov	r0, r18
     db4:	02 c0       	rjmp	.+4      	; 0xdba <DIO_voidSetPinDirection+0x166>
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	0a 94       	dec	r0
     dbc:	e2 f7       	brpl	.-8      	; 0xdb6 <DIO_voidSetPinDirection+0x162>
     dbe:	80 95       	com	r24
     dc0:	84 23       	and	r24, r20
     dc2:	8c 93       	st	X, r24
     dc4:	3e c0       	rjmp	.+124    	; 0xe42 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTB : CLR_BIT(DDRB , Copy_u8Pin); break ;
     dc6:	a7 e3       	ldi	r26, 0x37	; 55
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e7 e3       	ldi	r30, 0x37	; 55
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	48 2f       	mov	r20, r24
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	02 2e       	mov	r0, r18
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <DIO_voidSetPinDirection+0x190>
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	0a 94       	dec	r0
     de6:	e2 f7       	brpl	.-8      	; 0xde0 <DIO_voidSetPinDirection+0x18c>
     de8:	80 95       	com	r24
     dea:	84 23       	and	r24, r20
     dec:	8c 93       	st	X, r24
     dee:	29 c0       	rjmp	.+82     	; 0xe42 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTC : CLR_BIT(DDRC , Copy_u8Pin); break ;
     df0:	a4 e3       	ldi	r26, 0x34	; 52
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e4 e3       	ldi	r30, 0x34	; 52
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	48 2f       	mov	r20, r24
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 2e       	mov	r0, r18
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <DIO_voidSetPinDirection+0x1ba>
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	0a 94       	dec	r0
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <DIO_voidSetPinDirection+0x1b6>
     e12:	80 95       	com	r24
     e14:	84 23       	and	r24, r20
     e16:	8c 93       	st	X, r24
     e18:	14 c0       	rjmp	.+40     	; 0xe42 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTD : CLR_BIT(DDRD , Copy_u8Pin); break ;
     e1a:	a1 e3       	ldi	r26, 0x31	; 49
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e1 e3       	ldi	r30, 0x31	; 49
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	48 2f       	mov	r20, r24
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 2e       	mov	r0, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <DIO_voidSetPinDirection+0x1e4>
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <DIO_voidSetPinDirection+0x1e0>
     e3c:	80 95       	com	r24
     e3e:	84 23       	and	r24, r20
     e40:	8c 93       	st	X, r24
		}
	}
	
}
     e42:	27 96       	adiw	r28, 0x07	; 7
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue (u8 Copy_u8Port , u8 Copy_u8Pin  , u8 Copy_u8State)
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	27 97       	sbiw	r28, 0x07	; 7
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	89 83       	std	Y+1, r24	; 0x01
     e6a:	6a 83       	std	Y+2, r22	; 0x02
     e6c:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8State == DIO_HIGH)
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	81 30       	cpi	r24, 0x01	; 1
     e72:	09 f0       	breq	.+2      	; 0xe76 <DIO_voidSetPinValue+0x22>
     e74:	6f c0       	rjmp	.+222    	; 0xf54 <DIO_voidSetPinValue+0x100>
	{
		switch (Copy_u8Port)
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	3f 83       	std	Y+7, r19	; 0x07
     e7e:	2e 83       	std	Y+6, r18	; 0x06
     e80:	8e 81       	ldd	r24, Y+6	; 0x06
     e82:	9f 81       	ldd	r25, Y+7	; 0x07
     e84:	81 30       	cpi	r24, 0x01	; 1
     e86:	91 05       	cpc	r25, r1
     e88:	49 f1       	breq	.+82     	; 0xedc <DIO_voidSetPinValue+0x88>
     e8a:	2e 81       	ldd	r18, Y+6	; 0x06
     e8c:	3f 81       	ldd	r19, Y+7	; 0x07
     e8e:	22 30       	cpi	r18, 0x02	; 2
     e90:	31 05       	cpc	r19, r1
     e92:	2c f4       	brge	.+10     	; 0xe9e <DIO_voidSetPinValue+0x4a>
     e94:	8e 81       	ldd	r24, Y+6	; 0x06
     e96:	9f 81       	ldd	r25, Y+7	; 0x07
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	61 f0       	breq	.+24     	; 0xeb4 <DIO_voidSetPinValue+0x60>
     e9c:	d2 c0       	rjmp	.+420    	; 0x1042 <DIO_voidSetPinValue+0x1ee>
     e9e:	2e 81       	ldd	r18, Y+6	; 0x06
     ea0:	3f 81       	ldd	r19, Y+7	; 0x07
     ea2:	22 30       	cpi	r18, 0x02	; 2
     ea4:	31 05       	cpc	r19, r1
     ea6:	71 f1       	breq	.+92     	; 0xf04 <DIO_voidSetPinValue+0xb0>
     ea8:	8e 81       	ldd	r24, Y+6	; 0x06
     eaa:	9f 81       	ldd	r25, Y+7	; 0x07
     eac:	83 30       	cpi	r24, 0x03	; 3
     eae:	91 05       	cpc	r25, r1
     eb0:	e9 f1       	breq	.+122    	; 0xf2c <DIO_voidSetPinValue+0xd8>
     eb2:	c7 c0       	rjmp	.+398    	; 0x1042 <DIO_voidSetPinValue+0x1ee>
		{
			case DIO_PORTA : SET_BIT(PORTA , Copy_u8Pin); break ;
     eb4:	ab e3       	ldi	r26, 0x3B	; 59
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	eb e3       	ldi	r30, 0x3B	; 59
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	48 2f       	mov	r20, r24
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	02 2e       	mov	r0, r18
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <DIO_voidSetPinValue+0x7e>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	0a 94       	dec	r0
     ed4:	e2 f7       	brpl	.-8      	; 0xece <DIO_voidSetPinValue+0x7a>
     ed6:	84 2b       	or	r24, r20
     ed8:	8c 93       	st	X, r24
     eda:	b3 c0       	rjmp	.+358    	; 0x1042 <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTB : SET_BIT(PORTB , Copy_u8Pin); break ;
     edc:	a8 e3       	ldi	r26, 0x38	; 56
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e8 e3       	ldi	r30, 0x38	; 56
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 2e       	mov	r0, r18
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <DIO_voidSetPinValue+0xa6>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	0a 94       	dec	r0
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <DIO_voidSetPinValue+0xa2>
     efe:	84 2b       	or	r24, r20
     f00:	8c 93       	st	X, r24
     f02:	9f c0       	rjmp	.+318    	; 0x1042 <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTC : SET_BIT(PORTC , Copy_u8Pin); break ;
     f04:	a5 e3       	ldi	r26, 0x35	; 53
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e5 e3       	ldi	r30, 0x35	; 53
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	48 2f       	mov	r20, r24
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	02 2e       	mov	r0, r18
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <DIO_voidSetPinValue+0xce>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	0a 94       	dec	r0
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <DIO_voidSetPinValue+0xca>
     f26:	84 2b       	or	r24, r20
     f28:	8c 93       	st	X, r24
     f2a:	8b c0       	rjmp	.+278    	; 0x1042 <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTD : SET_BIT(PORTD , Copy_u8Pin); break ;
     f2c:	a2 e3       	ldi	r26, 0x32	; 50
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e2 e3       	ldi	r30, 0x32	; 50
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	48 2f       	mov	r20, r24
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 2e       	mov	r0, r18
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <DIO_voidSetPinValue+0xf6>
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	0a 94       	dec	r0
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <DIO_voidSetPinValue+0xf2>
     f4e:	84 2b       	or	r24, r20
     f50:	8c 93       	st	X, r24
     f52:	77 c0       	rjmp	.+238    	; 0x1042 <DIO_voidSetPinValue+0x1ee>
		}
	}
	else if (Copy_u8State == DIO_LOW)
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	88 23       	and	r24, r24
     f58:	09 f0       	breq	.+2      	; 0xf5c <DIO_voidSetPinValue+0x108>
     f5a:	73 c0       	rjmp	.+230    	; 0x1042 <DIO_voidSetPinValue+0x1ee>
	{
		switch (Copy_u8Port)
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	3d 83       	std	Y+5, r19	; 0x05
     f64:	2c 83       	std	Y+4, r18	; 0x04
     f66:	8c 81       	ldd	r24, Y+4	; 0x04
     f68:	9d 81       	ldd	r25, Y+5	; 0x05
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	91 05       	cpc	r25, r1
     f6e:	59 f1       	breq	.+86     	; 0xfc6 <DIO_voidSetPinValue+0x172>
     f70:	2c 81       	ldd	r18, Y+4	; 0x04
     f72:	3d 81       	ldd	r19, Y+5	; 0x05
     f74:	22 30       	cpi	r18, 0x02	; 2
     f76:	31 05       	cpc	r19, r1
     f78:	2c f4       	brge	.+10     	; 0xf84 <DIO_voidSetPinValue+0x130>
     f7a:	8c 81       	ldd	r24, Y+4	; 0x04
     f7c:	9d 81       	ldd	r25, Y+5	; 0x05
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	69 f0       	breq	.+26     	; 0xf9c <DIO_voidSetPinValue+0x148>
     f82:	5f c0       	rjmp	.+190    	; 0x1042 <DIO_voidSetPinValue+0x1ee>
     f84:	2c 81       	ldd	r18, Y+4	; 0x04
     f86:	3d 81       	ldd	r19, Y+5	; 0x05
     f88:	22 30       	cpi	r18, 0x02	; 2
     f8a:	31 05       	cpc	r19, r1
     f8c:	89 f1       	breq	.+98     	; 0xff0 <DIO_voidSetPinValue+0x19c>
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04
     f90:	9d 81       	ldd	r25, Y+5	; 0x05
     f92:	83 30       	cpi	r24, 0x03	; 3
     f94:	91 05       	cpc	r25, r1
     f96:	09 f4       	brne	.+2      	; 0xf9a <DIO_voidSetPinValue+0x146>
     f98:	40 c0       	rjmp	.+128    	; 0x101a <DIO_voidSetPinValue+0x1c6>
     f9a:	53 c0       	rjmp	.+166    	; 0x1042 <DIO_voidSetPinValue+0x1ee>
		{
			case DIO_PORTA : CLR_BIT(PORTA , Copy_u8Pin); break ;
     f9c:	ab e3       	ldi	r26, 0x3B	; 59
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	eb e3       	ldi	r30, 0x3B	; 59
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	48 2f       	mov	r20, r24
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	02 2e       	mov	r0, r18
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <DIO_voidSetPinValue+0x166>
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	0a 94       	dec	r0
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <DIO_voidSetPinValue+0x162>
     fbe:	80 95       	com	r24
     fc0:	84 23       	and	r24, r20
     fc2:	8c 93       	st	X, r24
     fc4:	3e c0       	rjmp	.+124    	; 0x1042 <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTB : CLR_BIT(PORTB , Copy_u8Pin); break ;
     fc6:	a8 e3       	ldi	r26, 0x38	; 56
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e8 e3       	ldi	r30, 0x38	; 56
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <DIO_voidSetPinValue+0x190>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <DIO_voidSetPinValue+0x18c>
     fe8:	80 95       	com	r24
     fea:	84 23       	and	r24, r20
     fec:	8c 93       	st	X, r24
     fee:	29 c0       	rjmp	.+82     	; 0x1042 <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTC : CLR_BIT(PORTC , Copy_u8Pin); break ;
     ff0:	a5 e3       	ldi	r26, 0x35	; 53
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e5 e3       	ldi	r30, 0x35	; 53
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 2e       	mov	r0, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <DIO_voidSetPinValue+0x1ba>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <DIO_voidSetPinValue+0x1b6>
    1012:	80 95       	com	r24
    1014:	84 23       	and	r24, r20
    1016:	8c 93       	st	X, r24
    1018:	14 c0       	rjmp	.+40     	; 0x1042 <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTD : CLR_BIT(PORTD , Copy_u8Pin); break ;
    101a:	a2 e3       	ldi	r26, 0x32	; 50
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e2 e3       	ldi	r30, 0x32	; 50
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	48 2f       	mov	r20, r24
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	02 2e       	mov	r0, r18
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <DIO_voidSetPinValue+0x1e4>
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	0a 94       	dec	r0
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <DIO_voidSetPinValue+0x1e0>
    103c:	80 95       	com	r24
    103e:	84 23       	and	r24, r20
    1040:	8c 93       	st	X, r24
		}
	}
}
    1042:	27 96       	adiw	r28, 0x07	; 7
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	08 95       	ret

00001054 <DIO_u8GetPinValue>:

u8 	 DIO_u8GetPinValue (u8 Copy_u8Port , u8 Copy_u8Pin)
{
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	00 d0       	rcall	.+0      	; 0x105a <DIO_u8GetPinValue+0x6>
    105a:	00 d0       	rcall	.+0      	; 0x105c <DIO_u8GetPinValue+0x8>
    105c:	00 d0       	rcall	.+0      	; 0x105e <DIO_u8GetPinValue+0xa>
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	3d 83       	std	Y+5, r19	; 0x05
    106e:	2c 83       	std	Y+4, r18	; 0x04
    1070:	4c 81       	ldd	r20, Y+4	; 0x04
    1072:	5d 81       	ldd	r21, Y+5	; 0x05
    1074:	41 30       	cpi	r20, 0x01	; 1
    1076:	51 05       	cpc	r21, r1
    1078:	49 f1       	breq	.+82     	; 0x10cc <DIO_u8GetPinValue+0x78>
    107a:	8c 81       	ldd	r24, Y+4	; 0x04
    107c:	9d 81       	ldd	r25, Y+5	; 0x05
    107e:	82 30       	cpi	r24, 0x02	; 2
    1080:	91 05       	cpc	r25, r1
    1082:	34 f4       	brge	.+12     	; 0x1090 <DIO_u8GetPinValue+0x3c>
    1084:	2c 81       	ldd	r18, Y+4	; 0x04
    1086:	3d 81       	ldd	r19, Y+5	; 0x05
    1088:	21 15       	cp	r18, r1
    108a:	31 05       	cpc	r19, r1
    108c:	61 f0       	breq	.+24     	; 0x10a6 <DIO_u8GetPinValue+0x52>
    108e:	57 c0       	rjmp	.+174    	; 0x113e <DIO_u8GetPinValue+0xea>
    1090:	4c 81       	ldd	r20, Y+4	; 0x04
    1092:	5d 81       	ldd	r21, Y+5	; 0x05
    1094:	42 30       	cpi	r20, 0x02	; 2
    1096:	51 05       	cpc	r21, r1
    1098:	61 f1       	breq	.+88     	; 0x10f2 <DIO_u8GetPinValue+0x9e>
    109a:	8c 81       	ldd	r24, Y+4	; 0x04
    109c:	9d 81       	ldd	r25, Y+5	; 0x05
    109e:	83 30       	cpi	r24, 0x03	; 3
    10a0:	91 05       	cpc	r25, r1
    10a2:	d1 f1       	breq	.+116    	; 0x1118 <DIO_u8GetPinValue+0xc4>
    10a4:	4c c0       	rjmp	.+152    	; 0x113e <DIO_u8GetPinValue+0xea>
	{
		case DIO_PORTA : return GET_BIT(PINA , Copy_u8Pin);
    10a6:	e9 e3       	ldi	r30, 0x39	; 57
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	88 2f       	mov	r24, r24
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	a9 01       	movw	r20, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <DIO_u8GetPinValue+0x6a>
    10ba:	55 95       	asr	r21
    10bc:	47 95       	ror	r20
    10be:	8a 95       	dec	r24
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <DIO_u8GetPinValue+0x66>
    10c2:	ca 01       	movw	r24, r20
    10c4:	58 2f       	mov	r21, r24
    10c6:	51 70       	andi	r21, 0x01	; 1
    10c8:	5b 83       	std	Y+3, r21	; 0x03
    10ca:	3a c0       	rjmp	.+116    	; 0x1140 <DIO_u8GetPinValue+0xec>
		case DIO_PORTB : return GET_BIT(PINB , Copy_u8Pin);
    10cc:	e6 e3       	ldi	r30, 0x36	; 54
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	88 2f       	mov	r24, r24
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	a9 01       	movw	r20, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <DIO_u8GetPinValue+0x90>
    10e0:	55 95       	asr	r21
    10e2:	47 95       	ror	r20
    10e4:	8a 95       	dec	r24
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <DIO_u8GetPinValue+0x8c>
    10e8:	ca 01       	movw	r24, r20
    10ea:	58 2f       	mov	r21, r24
    10ec:	51 70       	andi	r21, 0x01	; 1
    10ee:	5b 83       	std	Y+3, r21	; 0x03
    10f0:	27 c0       	rjmp	.+78     	; 0x1140 <DIO_u8GetPinValue+0xec>
		case DIO_PORTC : return GET_BIT(PINC , Copy_u8Pin);
    10f2:	e3 e3       	ldi	r30, 0x33	; 51
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	88 2f       	mov	r24, r24
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	a9 01       	movw	r20, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <DIO_u8GetPinValue+0xb6>
    1106:	55 95       	asr	r21
    1108:	47 95       	ror	r20
    110a:	8a 95       	dec	r24
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <DIO_u8GetPinValue+0xb2>
    110e:	ca 01       	movw	r24, r20
    1110:	58 2f       	mov	r21, r24
    1112:	51 70       	andi	r21, 0x01	; 1
    1114:	5b 83       	std	Y+3, r21	; 0x03
    1116:	14 c0       	rjmp	.+40     	; 0x1140 <DIO_u8GetPinValue+0xec>
		case DIO_PORTD : return GET_BIT(PIND , Copy_u8Pin);
    1118:	e0 e3       	ldi	r30, 0x30	; 48
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	a9 01       	movw	r20, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_u8GetPinValue+0xdc>
    112c:	55 95       	asr	r21
    112e:	47 95       	ror	r20
    1130:	8a 95       	dec	r24
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_u8GetPinValue+0xd8>
    1134:	ca 01       	movw	r24, r20
    1136:	58 2f       	mov	r21, r24
    1138:	51 70       	andi	r21, 0x01	; 1
    113a:	5b 83       	std	Y+3, r21	; 0x03
    113c:	01 c0       	rjmp	.+2      	; 0x1140 <DIO_u8GetPinValue+0xec>
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <DIO_u8GetPinValue+0xf0>
	}
}
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	8e 83       	std	Y+6, r24	; 0x06
    1144:	8e 81       	ldd	r24, Y+6	; 0x06
    1146:	26 96       	adiw	r28, 0x06	; 6
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	f8 94       	cli
    114c:	de bf       	out	0x3e, r29	; 62
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	cd bf       	out	0x3d, r28	; 61
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <DIO_voidTogglePin>:

void DIO_voidTogglePin 	 (u8 Copy_u8Port , u8 Copy_u8Pin)
{
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	00 d0       	rcall	.+0      	; 0x115e <DIO_voidTogglePin+0x6>
    115e:	00 d0       	rcall	.+0      	; 0x1160 <DIO_voidTogglePin+0x8>
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	3c 83       	std	Y+4, r19	; 0x04
    1170:	2b 83       	std	Y+3, r18	; 0x03
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	9c 81       	ldd	r25, Y+4	; 0x04
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	91 05       	cpc	r25, r1
    117a:	49 f1       	breq	.+82     	; 0x11ce <DIO_voidTogglePin+0x76>
    117c:	2b 81       	ldd	r18, Y+3	; 0x03
    117e:	3c 81       	ldd	r19, Y+4	; 0x04
    1180:	22 30       	cpi	r18, 0x02	; 2
    1182:	31 05       	cpc	r19, r1
    1184:	2c f4       	brge	.+10     	; 0x1190 <DIO_voidTogglePin+0x38>
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	9c 81       	ldd	r25, Y+4	; 0x04
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	61 f0       	breq	.+24     	; 0x11a6 <DIO_voidTogglePin+0x4e>
    118e:	5a c0       	rjmp	.+180    	; 0x1244 <DIO_voidTogglePin+0xec>
    1190:	2b 81       	ldd	r18, Y+3	; 0x03
    1192:	3c 81       	ldd	r19, Y+4	; 0x04
    1194:	22 30       	cpi	r18, 0x02	; 2
    1196:	31 05       	cpc	r19, r1
    1198:	71 f1       	breq	.+92     	; 0x11f6 <DIO_voidTogglePin+0x9e>
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	9c 81       	ldd	r25, Y+4	; 0x04
    119e:	83 30       	cpi	r24, 0x03	; 3
    11a0:	91 05       	cpc	r25, r1
    11a2:	e9 f1       	breq	.+122    	; 0x121e <DIO_voidTogglePin+0xc6>
    11a4:	4f c0       	rjmp	.+158    	; 0x1244 <DIO_voidTogglePin+0xec>
	{
		case DIO_PORTA : TOGGLE_BIT(PORTA , Copy_u8Pin); break ;
    11a6:	ab e3       	ldi	r26, 0x3B	; 59
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	eb e3       	ldi	r30, 0x3B	; 59
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	48 2f       	mov	r20, r24
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	02 2e       	mov	r0, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <DIO_voidTogglePin+0x6c>
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	0a 94       	dec	r0
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <DIO_voidTogglePin+0x68>
    11c8:	84 27       	eor	r24, r20
    11ca:	8c 93       	st	X, r24
    11cc:	3b c0       	rjmp	.+118    	; 0x1244 <DIO_voidTogglePin+0xec>
		case DIO_PORTB : TOGGLE_BIT(PORTB , Copy_u8Pin); break ;
    11ce:	a8 e3       	ldi	r26, 0x38	; 56
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e8 e3       	ldi	r30, 0x38	; 56
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	48 2f       	mov	r20, r24
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 2e       	mov	r0, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <DIO_voidTogglePin+0x94>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	0a 94       	dec	r0
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <DIO_voidTogglePin+0x90>
    11f0:	84 27       	eor	r24, r20
    11f2:	8c 93       	st	X, r24
    11f4:	27 c0       	rjmp	.+78     	; 0x1244 <DIO_voidTogglePin+0xec>
		case DIO_PORTC : TOGGLE_BIT(PORTC , Copy_u8Pin); break ;
    11f6:	a5 e3       	ldi	r26, 0x35	; 53
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e5 e3       	ldi	r30, 0x35	; 53
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	48 2f       	mov	r20, r24
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	02 2e       	mov	r0, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <DIO_voidTogglePin+0xbc>
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	0a 94       	dec	r0
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <DIO_voidTogglePin+0xb8>
    1218:	84 27       	eor	r24, r20
    121a:	8c 93       	st	X, r24
    121c:	13 c0       	rjmp	.+38     	; 0x1244 <DIO_voidTogglePin+0xec>
		case DIO_PORTD : TOGGLE_BIT(PORTD , Copy_u8Pin); break ;
    121e:	a2 e3       	ldi	r26, 0x32	; 50
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e2 e3       	ldi	r30, 0x32	; 50
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	48 2f       	mov	r20, r24
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	02 2e       	mov	r0, r18
    1236:	02 c0       	rjmp	.+4      	; 0x123c <DIO_voidTogglePin+0xe4>
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	0a 94       	dec	r0
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <DIO_voidTogglePin+0xe0>
    1240:	84 27       	eor	r24, r20
    1242:	8c 93       	st	X, r24
	}
}
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection (u8 Copy_u8Port , u8 Copy_u8Direction)
{
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	00 d0       	rcall	.+0      	; 0x1258 <DIO_voidSetPortDirection+0x6>
    1258:	00 d0       	rcall	.+0      	; 0x125a <DIO_voidSetPortDirection+0x8>
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	89 83       	std	Y+1, r24	; 0x01
    1260:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	3c 83       	std	Y+4, r19	; 0x04
    126a:	2b 83       	std	Y+3, r18	; 0x03
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	91 05       	cpc	r25, r1
    1274:	d1 f0       	breq	.+52     	; 0x12aa <DIO_voidSetPortDirection+0x58>
    1276:	2b 81       	ldd	r18, Y+3	; 0x03
    1278:	3c 81       	ldd	r19, Y+4	; 0x04
    127a:	22 30       	cpi	r18, 0x02	; 2
    127c:	31 05       	cpc	r19, r1
    127e:	2c f4       	brge	.+10     	; 0x128a <DIO_voidSetPortDirection+0x38>
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	9c 81       	ldd	r25, Y+4	; 0x04
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	61 f0       	breq	.+24     	; 0x12a0 <DIO_voidSetPortDirection+0x4e>
    1288:	1e c0       	rjmp	.+60     	; 0x12c6 <DIO_voidSetPortDirection+0x74>
    128a:	2b 81       	ldd	r18, Y+3	; 0x03
    128c:	3c 81       	ldd	r19, Y+4	; 0x04
    128e:	22 30       	cpi	r18, 0x02	; 2
    1290:	31 05       	cpc	r19, r1
    1292:	81 f0       	breq	.+32     	; 0x12b4 <DIO_voidSetPortDirection+0x62>
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	83 30       	cpi	r24, 0x03	; 3
    129a:	91 05       	cpc	r25, r1
    129c:	81 f0       	breq	.+32     	; 0x12be <DIO_voidSetPortDirection+0x6c>
    129e:	13 c0       	rjmp	.+38     	; 0x12c6 <DIO_voidSetPortDirection+0x74>
	{
		case DIO_PORTA : DDRA = Copy_u8Direction ; break ;
    12a0:	ea e3       	ldi	r30, 0x3A	; 58
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	80 83       	st	Z, r24
    12a8:	0e c0       	rjmp	.+28     	; 0x12c6 <DIO_voidSetPortDirection+0x74>
	    case DIO_PORTB : DDRB = Copy_u8Direction ; break ;
    12aa:	e7 e3       	ldi	r30, 0x37	; 55
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	80 83       	st	Z, r24
    12b2:	09 c0       	rjmp	.+18     	; 0x12c6 <DIO_voidSetPortDirection+0x74>
        case DIO_PORTC : DDRC = Copy_u8Direction ; break ;
    12b4:	e4 e3       	ldi	r30, 0x34	; 52
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	80 83       	st	Z, r24
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <DIO_voidSetPortDirection+0x74>
        case DIO_PORTD : DDRD = Copy_u8Direction ; break ;
    12be:	e1 e3       	ldi	r30, 0x31	; 49
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	80 83       	st	Z, r24
	}
}
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	cf 91       	pop	r28
    12d0:	df 91       	pop	r29
    12d2:	08 95       	ret

000012d4 <DIO_voidSetPortValue>:
void DIO_voidSetPortValue (u8 Copy_u8Port , u8 Copy_u8Value)
{
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	00 d0       	rcall	.+0      	; 0x12da <DIO_voidSetPortValue+0x6>
    12da:	00 d0       	rcall	.+0      	; 0x12dc <DIO_voidSetPortValue+0x8>
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	89 83       	std	Y+1, r24	; 0x01
    12e2:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	3c 83       	std	Y+4, r19	; 0x04
    12ec:	2b 83       	std	Y+3, r18	; 0x03
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	9c 81       	ldd	r25, Y+4	; 0x04
    12f2:	81 30       	cpi	r24, 0x01	; 1
    12f4:	91 05       	cpc	r25, r1
    12f6:	d1 f0       	breq	.+52     	; 0x132c <DIO_voidSetPortValue+0x58>
    12f8:	2b 81       	ldd	r18, Y+3	; 0x03
    12fa:	3c 81       	ldd	r19, Y+4	; 0x04
    12fc:	22 30       	cpi	r18, 0x02	; 2
    12fe:	31 05       	cpc	r19, r1
    1300:	2c f4       	brge	.+10     	; 0x130c <DIO_voidSetPortValue+0x38>
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	9c 81       	ldd	r25, Y+4	; 0x04
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	61 f0       	breq	.+24     	; 0x1322 <DIO_voidSetPortValue+0x4e>
    130a:	1e c0       	rjmp	.+60     	; 0x1348 <DIO_voidSetPortValue+0x74>
    130c:	2b 81       	ldd	r18, Y+3	; 0x03
    130e:	3c 81       	ldd	r19, Y+4	; 0x04
    1310:	22 30       	cpi	r18, 0x02	; 2
    1312:	31 05       	cpc	r19, r1
    1314:	81 f0       	breq	.+32     	; 0x1336 <DIO_voidSetPortValue+0x62>
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	83 30       	cpi	r24, 0x03	; 3
    131c:	91 05       	cpc	r25, r1
    131e:	81 f0       	breq	.+32     	; 0x1340 <DIO_voidSetPortValue+0x6c>
    1320:	13 c0       	rjmp	.+38     	; 0x1348 <DIO_voidSetPortValue+0x74>
		{
			case DIO_PORTA : PORTA = Copy_u8Value ; break ;
    1322:	eb e3       	ldi	r30, 0x3B	; 59
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	80 83       	st	Z, r24
    132a:	0e c0       	rjmp	.+28     	; 0x1348 <DIO_voidSetPortValue+0x74>
			case DIO_PORTB : PORTB = Copy_u8Value ; break ;
    132c:	e8 e3       	ldi	r30, 0x38	; 56
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	80 83       	st	Z, r24
    1334:	09 c0       	rjmp	.+18     	; 0x1348 <DIO_voidSetPortValue+0x74>
			case DIO_PORTC : PORTC = Copy_u8Value ; break ;
    1336:	e5 e3       	ldi	r30, 0x35	; 53
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	80 83       	st	Z, r24
    133e:	04 c0       	rjmp	.+8      	; 0x1348 <DIO_voidSetPortValue+0x74>
			case DIO_PORTD : PORTD = Copy_u8Value ; break ;
    1340:	e2 e3       	ldi	r30, 0x32	; 50
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	80 83       	st	Z, r24
		}
}
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <DIO_u8GetPortValue>:

u8   DIO_u8GetPortValue (u8 Copy_u8Port)
{
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	00 d0       	rcall	.+0      	; 0x135c <DIO_u8GetPortValue+0x6>
    135c:	00 d0       	rcall	.+0      	; 0x135e <DIO_u8GetPortValue+0x8>
    135e:	0f 92       	push	r0
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Port)
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	3c 83       	std	Y+4, r19	; 0x04
    136e:	2b 83       	std	Y+3, r18	; 0x03
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	91 05       	cpc	r25, r1
    1378:	d1 f0       	breq	.+52     	; 0x13ae <DIO_u8GetPortValue+0x58>
    137a:	2b 81       	ldd	r18, Y+3	; 0x03
    137c:	3c 81       	ldd	r19, Y+4	; 0x04
    137e:	22 30       	cpi	r18, 0x02	; 2
    1380:	31 05       	cpc	r19, r1
    1382:	2c f4       	brge	.+10     	; 0x138e <DIO_u8GetPortValue+0x38>
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	9c 81       	ldd	r25, Y+4	; 0x04
    1388:	00 97       	sbiw	r24, 0x00	; 0
    138a:	61 f0       	breq	.+24     	; 0x13a4 <DIO_u8GetPortValue+0x4e>
    138c:	1f c0       	rjmp	.+62     	; 0x13cc <DIO_u8GetPortValue+0x76>
    138e:	2b 81       	ldd	r18, Y+3	; 0x03
    1390:	3c 81       	ldd	r19, Y+4	; 0x04
    1392:	22 30       	cpi	r18, 0x02	; 2
    1394:	31 05       	cpc	r19, r1
    1396:	81 f0       	breq	.+32     	; 0x13b8 <DIO_u8GetPortValue+0x62>
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	9c 81       	ldd	r25, Y+4	; 0x04
    139c:	83 30       	cpi	r24, 0x03	; 3
    139e:	91 05       	cpc	r25, r1
    13a0:	81 f0       	breq	.+32     	; 0x13c2 <DIO_u8GetPortValue+0x6c>
    13a2:	14 c0       	rjmp	.+40     	; 0x13cc <DIO_u8GetPortValue+0x76>
		{
			case DIO_PORTA : return PINA ;
    13a4:	e9 e3       	ldi	r30, 0x39	; 57
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	90 81       	ld	r25, Z
    13aa:	9a 83       	std	Y+2, r25	; 0x02
    13ac:	10 c0       	rjmp	.+32     	; 0x13ce <DIO_u8GetPortValue+0x78>
			case DIO_PORTB : return PINB ;
    13ae:	e6 e3       	ldi	r30, 0x36	; 54
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	20 81       	ld	r18, Z
    13b4:	2a 83       	std	Y+2, r18	; 0x02
    13b6:	0b c0       	rjmp	.+22     	; 0x13ce <DIO_u8GetPortValue+0x78>
			case DIO_PORTC : return PINC ;
    13b8:	e3 e3       	ldi	r30, 0x33	; 51
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	30 81       	ld	r19, Z
    13be:	3a 83       	std	Y+2, r19	; 0x02
    13c0:	06 c0       	rjmp	.+12     	; 0x13ce <DIO_u8GetPortValue+0x78>
			case DIO_PORTD : return PIND ;
    13c2:	e0 e3       	ldi	r30, 0x30	; 48
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	8a 83       	std	Y+2, r24	; 0x02
    13ca:	01 c0       	rjmp	.+2      	; 0x13ce <DIO_u8GetPortValue+0x78>
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <DIO_u8GetPortValue+0x7c>
		}
}
    13ce:	9a 81       	ldd	r25, Y+2	; 0x02
    13d0:	9d 83       	std	Y+5, r25	; 0x05
    13d2:	8d 81       	ldd	r24, Y+5	; 0x05
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <_exit>:
    13e4:	f8 94       	cli

000013e6 <__stop_program>:
    13e6:	ff cf       	rjmp	.-2      	; 0x13e6 <__stop_program>
