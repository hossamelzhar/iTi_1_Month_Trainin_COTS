
ICU_HW_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002db0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00002db0  00002e44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  00800076  00800076  00002e5a  2**0
                  ALLOC
  3 .stab         000029d0  00000000  00000000  00002e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001675  00000000  00000000  0000582c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007001  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007190  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000091d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a2d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b258  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b69a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__vector_1>
       8:	0c 94 30 12 	jmp	0x2460	; 0x2460 <__vector_2>
       c:	0c 94 63 12 	jmp	0x24c6	; 0x24c6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 1c 0f 	jmp	0x1e38	; 0x1e38 <__vector_6>
      1c:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__vector_7>
      20:	0c 94 e9 0e 	jmp	0x1dd2	; 0x1dd2 <__vector_8>
      24:	0c 94 83 0e 	jmp	0x1d06	; 0x1d06 <__vector_9>
      28:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__vector_10>
      2c:	0c 94 a1 0f 	jmp	0x1f42	; 0x1f42 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 06 	call	0xc9e	; 0xc9e <main>
      8a:	0c 94 d6 16 	jmp	0x2dac	; 0x2dac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e6       	ldi	r26, 0x6E	; 110
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bb 16 	jmp	0x2d76	; 0x2d76 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ab 16 	jmp	0x2d56	; 0x2d56 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c7 16 	jmp	0x2d8e	; 0x2d8e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ab 16 	jmp	0x2d56	; 0x2d56 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c7 16 	jmp	0x2d8e	; 0x2d8e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e6       	ldi	r24, 0x6E	; 110
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bb 16 	jmp	0x2d76	; 0x2d76 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e6       	ldi	r22, 0x6E	; 110
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ab 16 	jmp	0x2d56	; 0x2d56 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c7 16 	jmp	0x2d8e	; 0x2d8e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ab 16 	jmp	0x2d56	; 0x2d56 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c7 16 	jmp	0x2d8e	; 0x2d8e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ab 16 	jmp	0x2d56	; 0x2d56 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c7 16 	jmp	0x2d8e	; 0x2d8e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 af 16 	jmp	0x2d5e	; 0x2d5e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <main>:
volatile u16 App_u16Time3;
volatile u8 App_u8OnTime;
volatile u8 App_u8OffTime;

void main(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <main+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62

	LCD_voidInit();
     ca8:	0e 94 4a 09 	call	0x1294	; 0x1294 <LCD_voidInit>

	//Global Interrupt
	sei();
     cac:	78 94       	sei

	//PWM Configurations  On Time 64us, period Time 256us
	TIMER0_voidSetOCR0Value(99);
     cae:	83 e6       	ldi	r24, 0x63	; 99
     cb0:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <TIMER0_voidSetOCR0Value>
	DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	63 e0       	ldi	r22, 0x03	; 3
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_voidSetPinDirection>
	TIMER0_voidInit();
     cbe:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <TIMER0_voidInit>

	Timer1_voidInit(TIMER1_NORMAL_MODE, TIMER1_SCALER_8, TIMER1_OC1A_DISCONNECTED, TIMER1_OC1B_DISCONNECTED);
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	62 e0       	ldi	r22, 0x02	; 2
     cc6:	40 e0       	ldi	r20, 0x00	; 0
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	0e 94 4a 0c 	call	0x1894	; 0x1894 <Timer1_voidInit>

	//ICU
	Timer1_voidICUSetCallBack(EXTI_Function);
     cce:	8f ea       	ldi	r24, 0xAF	; 175
     cd0:	96 e0       	ldi	r25, 0x06	; 6
     cd2:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <Timer1_voidICUSetCallBack>
	Timer1_voidICUSetTriggerEdge(ICU_RISING_EDGE);
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <Timer1_voidICUSetTriggerEdge>
	DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN6, DIO_INPUT);
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	66 e0       	ldi	r22, 0x06	; 6
     ce0:	40 e0       	ldi	r20, 0x00	; 0
     ce2:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_voidSetPinDirection>
	Timer1_voidICUInterruptEnable();
     ce6:	0e 94 67 0e 	call	0x1cce	; 0x1cce <Timer1_voidICUInterruptEnable>


	u16 Period = 0;
     cea:	1a 82       	std	Y+2, r1	; 0x02
     cec:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		while(App_u8Flag != 3);
     cee:	80 91 90 00 	lds	r24, 0x0090
     cf2:	83 30       	cpi	r24, 0x03	; 3
     cf4:	e1 f7       	brne	.-8      	; 0xcee <main+0x50>

		Period = App_u8OffTime + App_u8OnTime;
     cf6:	80 91 91 00 	lds	r24, 0x0091
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	80 91 94 00 	lds	r24, 0x0094
     d02:	88 2f       	mov	r24, r24
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	82 0f       	add	r24, r18
     d08:	93 1f       	adc	r25, r19
     d0a:	9a 83       	std	Y+2, r25	; 0x02
     d0c:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidSetLocation(1, 0);
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	0e 94 22 09 	call	0x1244	; 0x1244 <LCD_voidSetLocation>
		LCD_voidSendString("Period ");
     d16:	80 e6       	ldi	r24, 0x60	; 96
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	0e 94 3f 08 	call	0x107e	; 0x107e <LCD_voidSendString>
		LCD_voidSendNumber(Period);
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	9a 81       	ldd	r25, Y+2	; 0x02
     d22:	cc 01       	movw	r24, r24
     d24:	a0 e0       	ldi	r26, 0x00	; 0
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	bc 01       	movw	r22, r24
     d2a:	cd 01       	movw	r24, r26
     d2c:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_voidSendNumber>

		LCD_voidSetLocation(2, 0);
     d30:	82 e0       	ldi	r24, 0x02	; 2
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	0e 94 22 09 	call	0x1244	; 0x1244 <LCD_voidSetLocation>
		LCD_voidSendString("T_on ");
     d38:	88 e6       	ldi	r24, 0x68	; 104
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 3f 08 	call	0x107e	; 0x107e <LCD_voidSendString>
		LCD_voidSendNumber(App_u8OnTime);
     d40:	80 91 94 00 	lds	r24, 0x0094
     d44:	88 2f       	mov	r24, r24
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	a0 e0       	ldi	r26, 0x00	; 0
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	bc 01       	movw	r22, r24
     d4e:	cd 01       	movw	r24, r26
     d50:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_voidSendNumber>

		App_u8Flag = 0;
     d54:	10 92 90 00 	sts	0x0090, r1
		Timer1_voidICUInterruptEnable();
     d58:	0e 94 67 0e 	call	0x1cce	; 0x1cce <Timer1_voidICUInterruptEnable>
     d5c:	c8 cf       	rjmp	.-112    	; 0xcee <main+0x50>

00000d5e <EXTI_Function>:

}


void EXTI_Function(void)
{
     d5e:	df 93       	push	r29
     d60:	cf 93       	push	r28
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
	if(App_u8Flag == 0)
     d66:	80 91 90 00 	lds	r24, 0x0090
     d6a:	88 23       	and	r24, r24
     d6c:	69 f4       	brne	.+26     	; 0xd88 <EXTI_Function+0x2a>
	{
		App_u16Time1 = Timer1_u16ReadICR1Value();
     d6e:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <Timer1_u16ReadICR1Value>
     d72:	90 93 8d 00 	sts	0x008D, r25
     d76:	80 93 8c 00 	sts	0x008C, r24

		//Set EXTI Falling Edge
		Timer1_voidICUSetTriggerEdge(ICU_FALLING_EDGE);
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <Timer1_voidICUSetTriggerEdge>
		App_u8Flag = 1;
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	80 93 90 00 	sts	0x0090, r24
     d86:	3c c0       	rjmp	.+120    	; 0xe00 <EXTI_Function+0xa2>
	}
	else if(App_u8Flag == 1)
     d88:	80 91 90 00 	lds	r24, 0x0090
     d8c:	81 30       	cpi	r24, 0x01	; 1
     d8e:	d9 f4       	brne	.+54     	; 0xdc6 <EXTI_Function+0x68>
	{
		App_u16Time2 = Timer1_u16ReadICR1Value();
     d90:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <Timer1_u16ReadICR1Value>
     d94:	90 93 93 00 	sts	0x0093, r25
     d98:	80 93 92 00 	sts	0x0092, r24
		Timer1_voidICUSetTriggerEdge(ICU_RISING_EDGE);
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <Timer1_voidICUSetTriggerEdge>
		App_u8OnTime = App_u16Time2 - App_u16Time1;
     da2:	80 91 92 00 	lds	r24, 0x0092
     da6:	90 91 93 00 	lds	r25, 0x0093
     daa:	28 2f       	mov	r18, r24
     dac:	80 91 8c 00 	lds	r24, 0x008C
     db0:	90 91 8d 00 	lds	r25, 0x008D
     db4:	92 2f       	mov	r25, r18
     db6:	98 1b       	sub	r25, r24
     db8:	89 2f       	mov	r24, r25
     dba:	80 93 94 00 	sts	0x0094, r24
		App_u8Flag = 2;
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	80 93 90 00 	sts	0x0090, r24
     dc4:	1d c0       	rjmp	.+58     	; 0xe00 <EXTI_Function+0xa2>
	}
	else if(App_u8Flag == 2)
     dc6:	80 91 90 00 	lds	r24, 0x0090
     dca:	82 30       	cpi	r24, 0x02	; 2
     dcc:	c9 f4       	brne	.+50     	; 0xe00 <EXTI_Function+0xa2>
	{
		App_u16Time3 = Timer1_u16ReadICR1Value();
     dce:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <Timer1_u16ReadICR1Value>
     dd2:	90 93 8f 00 	sts	0x008F, r25
     dd6:	80 93 8e 00 	sts	0x008E, r24
		App_u8OffTime = App_u16Time3 - App_u16Time2;
     dda:	80 91 8e 00 	lds	r24, 0x008E
     dde:	90 91 8f 00 	lds	r25, 0x008F
     de2:	28 2f       	mov	r18, r24
     de4:	80 91 92 00 	lds	r24, 0x0092
     de8:	90 91 93 00 	lds	r25, 0x0093
     dec:	92 2f       	mov	r25, r18
     dee:	98 1b       	sub	r25, r24
     df0:	89 2f       	mov	r24, r25
     df2:	80 93 91 00 	sts	0x0091, r24
		Timer1_voidICUInterruptDisable();
     df6:	0e 94 75 0e 	call	0x1cea	; 0x1cea <Timer1_voidICUInterruptDisable>
		App_u8Flag = 3;
     dfa:	83 e0       	ldi	r24, 0x03	; 3
     dfc:	80 93 90 00 	sts	0x0090, r24
	}

}
     e00:	cf 91       	pop	r28
     e02:	df 91       	pop	r29
     e04:	08 95       	ret

00000e06 <LCD_voidSendCommand>:
#include "LCD.h"

#include <util/delay.h>

void LCD_voidSendCommand (u8 Copy_U8Command)
{
     e06:	df 93       	push	r29
     e08:	cf 93       	push	r28
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	2f 97       	sbiw	r28, 0x0f	; 15
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue	(LCD_CONTROL_PORT , RS , DIO_LOW);
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	40 e0       	ldi	r20, 0x00	; 0
     e22:	0e 94 96 13 	call	0x272c	; 0x272c <DIO_voidSetPinValue>
	DIO_voidSetPinValue	(LCD_CONTROL_PORT , RW , DIO_LOW);
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	61 e0       	ldi	r22, 0x01	; 1
     e2a:	40 e0       	ldi	r20, 0x00	; 0
     e2c:	0e 94 96 13 	call	0x272c	; 0x272c <DIO_voidSetPinValue>
	DIO_voidSetPortValue	(LCD_DATA_PORT , Copy_U8Command);
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	6f 85       	ldd	r22, Y+15	; 0x0f
     e34:	0e 94 d6 15 	call	0x2bac	; 0x2bac <DIO_voidSetPortValue>
	DIO_voidSetPinValue	(LCD_CONTROL_PORT , EN , DIO_HIGH);
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	62 e0       	ldi	r22, 0x02	; 2
     e3c:	41 e0       	ldi	r20, 0x01	; 1
     e3e:	0e 94 96 13 	call	0x272c	; 0x272c <DIO_voidSetPinValue>
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	a0 e0       	ldi	r26, 0x00	; 0
     e48:	b0 e4       	ldi	r27, 0x40	; 64
     e4a:	8b 87       	std	Y+11, r24	; 0x0b
     e4c:	9c 87       	std	Y+12, r25	; 0x0c
     e4e:	ad 87       	std	Y+13, r26	; 0x0d
     e50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e52:	6b 85       	ldd	r22, Y+11	; 0x0b
     e54:	7c 85       	ldd	r23, Y+12	; 0x0c
     e56:	8d 85       	ldd	r24, Y+13	; 0x0d
     e58:	9e 85       	ldd	r25, Y+14	; 0x0e
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	4a ef       	ldi	r20, 0xFA	; 250
     e60:	54 e4       	ldi	r21, 0x44	; 68
     e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e66:	dc 01       	movw	r26, r24
     e68:	cb 01       	movw	r24, r22
     e6a:	8f 83       	std	Y+7, r24	; 0x07
     e6c:	98 87       	std	Y+8, r25	; 0x08
     e6e:	a9 87       	std	Y+9, r26	; 0x09
     e70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e72:	6f 81       	ldd	r22, Y+7	; 0x07
     e74:	78 85       	ldd	r23, Y+8	; 0x08
     e76:	89 85       	ldd	r24, Y+9	; 0x09
     e78:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	40 e8       	ldi	r20, 0x80	; 128
     e80:	5f e3       	ldi	r21, 0x3F	; 63
     e82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e86:	88 23       	and	r24, r24
     e88:	2c f4       	brge	.+10     	; 0xe94 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	9e 83       	std	Y+6, r25	; 0x06
     e90:	8d 83       	std	Y+5, r24	; 0x05
     e92:	3f c0       	rjmp	.+126    	; 0xf12 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     e94:	6f 81       	ldd	r22, Y+7	; 0x07
     e96:	78 85       	ldd	r23, Y+8	; 0x08
     e98:	89 85       	ldd	r24, Y+9	; 0x09
     e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	3f ef       	ldi	r19, 0xFF	; 255
     ea0:	4f e7       	ldi	r20, 0x7F	; 127
     ea2:	57 e4       	ldi	r21, 0x47	; 71
     ea4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ea8:	18 16       	cp	r1, r24
     eaa:	4c f5       	brge	.+82     	; 0xefe <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eac:	6b 85       	ldd	r22, Y+11	; 0x0b
     eae:	7c 85       	ldd	r23, Y+12	; 0x0c
     eb0:	8d 85       	ldd	r24, Y+13	; 0x0d
     eb2:	9e 85       	ldd	r25, Y+14	; 0x0e
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	40 e2       	ldi	r20, 0x20	; 32
     eba:	51 e4       	ldi	r21, 0x41	; 65
     ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	bc 01       	movw	r22, r24
     ec6:	cd 01       	movw	r24, r26
     ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	9e 83       	std	Y+6, r25	; 0x06
     ed2:	8d 83       	std	Y+5, r24	; 0x05
     ed4:	0f c0       	rjmp	.+30     	; 0xef4 <LCD_voidSendCommand+0xee>
     ed6:	88 ec       	ldi	r24, 0xC8	; 200
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	9c 83       	std	Y+4, r25	; 0x04
     edc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	9c 81       	ldd	r25, Y+4	; 0x04
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	f1 f7       	brne	.-4      	; 0xee2 <LCD_voidSendCommand+0xdc>
     ee6:	9c 83       	std	Y+4, r25	; 0x04
     ee8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eea:	8d 81       	ldd	r24, Y+5	; 0x05
     eec:	9e 81       	ldd	r25, Y+6	; 0x06
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	9e 83       	std	Y+6, r25	; 0x06
     ef2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef4:	8d 81       	ldd	r24, Y+5	; 0x05
     ef6:	9e 81       	ldd	r25, Y+6	; 0x06
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	69 f7       	brne	.-38     	; 0xed6 <LCD_voidSendCommand+0xd0>
     efc:	14 c0       	rjmp	.+40     	; 0xf26 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     efe:	6f 81       	ldd	r22, Y+7	; 0x07
     f00:	78 85       	ldd	r23, Y+8	; 0x08
     f02:	89 85       	ldd	r24, Y+9	; 0x09
     f04:	9a 85       	ldd	r25, Y+10	; 0x0a
     f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	9e 83       	std	Y+6, r25	; 0x06
     f10:	8d 83       	std	Y+5, r24	; 0x05
     f12:	8d 81       	ldd	r24, Y+5	; 0x05
     f14:	9e 81       	ldd	r25, Y+6	; 0x06
     f16:	9a 83       	std	Y+2, r25	; 0x02
     f18:	89 83       	std	Y+1, r24	; 0x01
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	9a 81       	ldd	r25, Y+2	; 0x02
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	f1 f7       	brne	.-4      	; 0xf1e <LCD_voidSendCommand+0x118>
     f22:	9a 83       	std	Y+2, r25	; 0x02
     f24:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue	(LCD_CONTROL_PORT , EN , DIO_LOW);
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	62 e0       	ldi	r22, 0x02	; 2
     f2a:	40 e0       	ldi	r20, 0x00	; 0
     f2c:	0e 94 96 13 	call	0x272c	; 0x272c <DIO_voidSetPinValue>
}
     f30:	2f 96       	adiw	r28, 0x0f	; 15
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	f8 94       	cli
     f36:	de bf       	out	0x3e, r29	; 62
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	cd bf       	out	0x3d, r28	; 61
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	08 95       	ret

00000f42 <LCD_voidSendChar>:


void LCD_voidSendChar    (u8 Copy_U8Char)
{
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
     f4a:	2f 97       	sbiw	r28, 0x0f	; 15
     f4c:	0f b6       	in	r0, 0x3f	; 63
     f4e:	f8 94       	cli
     f50:	de bf       	out	0x3e, r29	; 62
     f52:	0f be       	out	0x3f, r0	; 63
     f54:	cd bf       	out	0x3d, r28	; 61
     f56:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT , RS , DIO_HIGH);
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	41 e0       	ldi	r20, 0x01	; 1
     f5e:	0e 94 96 13 	call	0x272c	; 0x272c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT , RW , DIO_LOW);
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	61 e0       	ldi	r22, 0x01	; 1
     f66:	40 e0       	ldi	r20, 0x00	; 0
     f68:	0e 94 96 13 	call	0x272c	; 0x272c <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DATA_PORT , Copy_U8Char);
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	6f 85       	ldd	r22, Y+15	; 0x0f
     f70:	0e 94 d6 15 	call	0x2bac	; 0x2bac <DIO_voidSetPortValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT , EN , DIO_HIGH);
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	62 e0       	ldi	r22, 0x02	; 2
     f78:	41 e0       	ldi	r20, 0x01	; 1
     f7a:	0e 94 96 13 	call	0x272c	; 0x272c <DIO_voidSetPinValue>
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	a0 e0       	ldi	r26, 0x00	; 0
     f84:	b0 e4       	ldi	r27, 0x40	; 64
     f86:	8b 87       	std	Y+11, r24	; 0x0b
     f88:	9c 87       	std	Y+12, r25	; 0x0c
     f8a:	ad 87       	std	Y+13, r26	; 0x0d
     f8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f8e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f90:	7c 85       	ldd	r23, Y+12	; 0x0c
     f92:	8d 85       	ldd	r24, Y+13	; 0x0d
     f94:	9e 85       	ldd	r25, Y+14	; 0x0e
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	4a ef       	ldi	r20, 0xFA	; 250
     f9c:	54 e4       	ldi	r21, 0x44	; 68
     f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	8f 83       	std	Y+7, r24	; 0x07
     fa8:	98 87       	std	Y+8, r25	; 0x08
     faa:	a9 87       	std	Y+9, r26	; 0x09
     fac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fae:	6f 81       	ldd	r22, Y+7	; 0x07
     fb0:	78 85       	ldd	r23, Y+8	; 0x08
     fb2:	89 85       	ldd	r24, Y+9	; 0x09
     fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e8       	ldi	r20, 0x80	; 128
     fbc:	5f e3       	ldi	r21, 0x3F	; 63
     fbe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fc2:	88 23       	and	r24, r24
     fc4:	2c f4       	brge	.+10     	; 0xfd0 <LCD_voidSendChar+0x8e>
		__ticks = 1;
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	9e 83       	std	Y+6, r25	; 0x06
     fcc:	8d 83       	std	Y+5, r24	; 0x05
     fce:	3f c0       	rjmp	.+126    	; 0x104e <LCD_voidSendChar+0x10c>
	else if (__tmp > 65535)
     fd0:	6f 81       	ldd	r22, Y+7	; 0x07
     fd2:	78 85       	ldd	r23, Y+8	; 0x08
     fd4:	89 85       	ldd	r24, Y+9	; 0x09
     fd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	3f ef       	ldi	r19, 0xFF	; 255
     fdc:	4f e7       	ldi	r20, 0x7F	; 127
     fde:	57 e4       	ldi	r21, 0x47	; 71
     fe0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fe4:	18 16       	cp	r1, r24
     fe6:	4c f5       	brge	.+82     	; 0x103a <LCD_voidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe8:	6b 85       	ldd	r22, Y+11	; 0x0b
     fea:	7c 85       	ldd	r23, Y+12	; 0x0c
     fec:	8d 85       	ldd	r24, Y+13	; 0x0d
     fee:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	40 e2       	ldi	r20, 0x20	; 32
     ff6:	51 e4       	ldi	r21, 0x41	; 65
     ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ffc:	dc 01       	movw	r26, r24
     ffe:	cb 01       	movw	r24, r22
    1000:	bc 01       	movw	r22, r24
    1002:	cd 01       	movw	r24, r26
    1004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	9e 83       	std	Y+6, r25	; 0x06
    100e:	8d 83       	std	Y+5, r24	; 0x05
    1010:	0f c0       	rjmp	.+30     	; 0x1030 <LCD_voidSendChar+0xee>
    1012:	88 ec       	ldi	r24, 0xC8	; 200
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	9c 83       	std	Y+4, r25	; 0x04
    1018:	8b 83       	std	Y+3, r24	; 0x03
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	9c 81       	ldd	r25, Y+4	; 0x04
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	f1 f7       	brne	.-4      	; 0x101e <LCD_voidSendChar+0xdc>
    1022:	9c 83       	std	Y+4, r25	; 0x04
    1024:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1026:	8d 81       	ldd	r24, Y+5	; 0x05
    1028:	9e 81       	ldd	r25, Y+6	; 0x06
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	9e 83       	std	Y+6, r25	; 0x06
    102e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1030:	8d 81       	ldd	r24, Y+5	; 0x05
    1032:	9e 81       	ldd	r25, Y+6	; 0x06
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	69 f7       	brne	.-38     	; 0x1012 <LCD_voidSendChar+0xd0>
    1038:	14 c0       	rjmp	.+40     	; 0x1062 <LCD_voidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    103a:	6f 81       	ldd	r22, Y+7	; 0x07
    103c:	78 85       	ldd	r23, Y+8	; 0x08
    103e:	89 85       	ldd	r24, Y+9	; 0x09
    1040:	9a 85       	ldd	r25, Y+10	; 0x0a
    1042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	9e 83       	std	Y+6, r25	; 0x06
    104c:	8d 83       	std	Y+5, r24	; 0x05
    104e:	8d 81       	ldd	r24, Y+5	; 0x05
    1050:	9e 81       	ldd	r25, Y+6	; 0x06
    1052:	9a 83       	std	Y+2, r25	; 0x02
    1054:	89 83       	std	Y+1, r24	; 0x01
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	9a 81       	ldd	r25, Y+2	; 0x02
    105a:	01 97       	sbiw	r24, 0x01	; 1
    105c:	f1 f7       	brne	.-4      	; 0x105a <LCD_voidSendChar+0x118>
    105e:	9a 83       	std	Y+2, r25	; 0x02
    1060:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT , EN , DIO_LOW);
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	62 e0       	ldi	r22, 0x02	; 2
    1066:	40 e0       	ldi	r20, 0x00	; 0
    1068:	0e 94 96 13 	call	0x272c	; 0x272c <DIO_voidSetPinValue>
}
    106c:	2f 96       	adiw	r28, 0x0f	; 15
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <LCD_voidSendString>:

void LCD_voidSendString  (u8 *Copy_U8String)
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	00 d0       	rcall	.+0      	; 0x1084 <LCD_voidSendString+0x6>
    1084:	0f 92       	push	r0
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	9b 83       	std	Y+3, r25	; 0x03
    108c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8Counter ;
	for (Local_U8Counter = 0 ; Copy_U8String[Local_U8Counter] != '\0' ; Local_U8Counter++)
    108e:	19 82       	std	Y+1, r1	; 0x01
    1090:	0e c0       	rjmp	.+28     	; 0x10ae <LCD_voidSendString+0x30>
		LCD_voidSendChar(Copy_U8String[Local_U8Counter]);
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	9b 81       	ldd	r25, Y+3	; 0x03
    109c:	fc 01       	movw	r30, r24
    109e:	e2 0f       	add	r30, r18
    10a0:	f3 1f       	adc	r31, r19
    10a2:	80 81       	ld	r24, Z
    10a4:	0e 94 a1 07 	call	0xf42	; 0xf42 <LCD_voidSendChar>
}

void LCD_voidSendString  (u8 *Copy_U8String)
{
	u8 Local_U8Counter ;
	for (Local_U8Counter = 0 ; Copy_U8String[Local_U8Counter] != '\0' ; Local_U8Counter++)
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	8f 5f       	subi	r24, 0xFF	; 255
    10ac:	89 83       	std	Y+1, r24	; 0x01
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	9b 81       	ldd	r25, Y+3	; 0x03
    10b8:	fc 01       	movw	r30, r24
    10ba:	e2 0f       	add	r30, r18
    10bc:	f3 1f       	adc	r31, r19
    10be:	80 81       	ld	r24, Z
    10c0:	88 23       	and	r24, r24
    10c2:	39 f7       	brne	.-50     	; 0x1092 <LCD_voidSendString+0x14>
		LCD_voidSendChar(Copy_U8String[Local_U8Counter]);
}
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret

000010d0 <LCD_voidSendNumber>:

void LCD_voidSendNumber(s32 Copy_s32Number)
{
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	29 97       	sbiw	r28, 0x09	; 9
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	6e 83       	std	Y+6, r22	; 0x06
    10e6:	7f 83       	std	Y+7, r23	; 0x07
    10e8:	88 87       	std	Y+8, r24	; 0x08
    10ea:	99 87       	std	Y+9, r25	; 0x09
	u32 Local_u32Counter=1 ;
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	a0 e0       	ldi	r26, 0x00	; 0
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	8a 83       	std	Y+2, r24	; 0x02
    10f6:	9b 83       	std	Y+3, r25	; 0x03
    10f8:	ac 83       	std	Y+4, r26	; 0x04
    10fa:	bd 83       	std	Y+5, r27	; 0x05
	u8 Local_u32Digit=0 ;
    10fc:	19 82       	std	Y+1, r1	; 0x01

	/* print (-) if the number is negative */
	if(Copy_s32Number < 0)
    10fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1100:	9f 81       	ldd	r25, Y+7	; 0x07
    1102:	a8 85       	ldd	r26, Y+8	; 0x08
    1104:	b9 85       	ldd	r27, Y+9	; 0x09
    1106:	bb 23       	and	r27, r27
    1108:	94 f4       	brge	.+36     	; 0x112e <LCD_voidSendNumber+0x5e>
	{
		LCD_voidSendChar('-');
    110a:	8d e2       	ldi	r24, 0x2D	; 45
    110c:	0e 94 a1 07 	call	0xf42	; 0xf42 <LCD_voidSendChar>
		/* return the number to positive */
		Copy_s32Number = -Copy_s32Number;
    1110:	8e 81       	ldd	r24, Y+6	; 0x06
    1112:	9f 81       	ldd	r25, Y+7	; 0x07
    1114:	a8 85       	ldd	r26, Y+8	; 0x08
    1116:	b9 85       	ldd	r27, Y+9	; 0x09
    1118:	b0 95       	com	r27
    111a:	a0 95       	com	r26
    111c:	90 95       	com	r25
    111e:	81 95       	neg	r24
    1120:	9f 4f       	sbci	r25, 0xFF	; 255
    1122:	af 4f       	sbci	r26, 0xFF	; 255
    1124:	bf 4f       	sbci	r27, 0xFF	; 255
    1126:	8e 83       	std	Y+6, r24	; 0x06
    1128:	9f 83       	std	Y+7, r25	; 0x07
    112a:	a8 87       	std	Y+8, r26	; 0x08
    112c:	b9 87       	std	Y+9, r27	; 0x09
	}
	if (Copy_s32Number == 0)
    112e:	8e 81       	ldd	r24, Y+6	; 0x06
    1130:	9f 81       	ldd	r25, Y+7	; 0x07
    1132:	a8 85       	ldd	r26, Y+8	; 0x08
    1134:	b9 85       	ldd	r27, Y+9	; 0x09
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	a1 05       	cpc	r26, r1
    113a:	b1 05       	cpc	r27, r1
    113c:	b1 f4       	brne	.+44     	; 0x116a <LCD_voidSendNumber+0x9a>
		LCD_voidSendChar('0');
    113e:	80 e3       	ldi	r24, 0x30	; 48
    1140:	0e 94 a1 07 	call	0xf42	; 0xf42 <LCD_voidSendChar>
    1144:	76 c0       	rjmp	.+236    	; 0x1232 <LCD_voidSendNumber+0x162>
	else
	{
		while (Copy_s32Number/Local_u32Counter != 0)
		{
			Local_u32Counter *= 10;
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	9b 81       	ldd	r25, Y+3	; 0x03
    114a:	ac 81       	ldd	r26, Y+4	; 0x04
    114c:	bd 81       	ldd	r27, Y+5	; 0x05
    114e:	2a e0       	ldi	r18, 0x0A	; 10
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	50 e0       	ldi	r21, 0x00	; 0
    1156:	bc 01       	movw	r22, r24
    1158:	cd 01       	movw	r24, r26
    115a:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__mulsi3>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	8a 83       	std	Y+2, r24	; 0x02
    1164:	9b 83       	std	Y+3, r25	; 0x03
    1166:	ac 83       	std	Y+4, r26	; 0x04
    1168:	bd 83       	std	Y+5, r27	; 0x05
	}
	if (Copy_s32Number == 0)
		LCD_voidSendChar('0');
	else
	{
		while (Copy_s32Number/Local_u32Counter != 0)
    116a:	8e 81       	ldd	r24, Y+6	; 0x06
    116c:	9f 81       	ldd	r25, Y+7	; 0x07
    116e:	a8 85       	ldd	r26, Y+8	; 0x08
    1170:	b9 85       	ldd	r27, Y+9	; 0x09
    1172:	2a 81       	ldd	r18, Y+2	; 0x02
    1174:	3b 81       	ldd	r19, Y+3	; 0x03
    1176:	4c 81       	ldd	r20, Y+4	; 0x04
    1178:	5d 81       	ldd	r21, Y+5	; 0x05
    117a:	bc 01       	movw	r22, r24
    117c:	cd 01       	movw	r24, r26
    117e:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <__udivmodsi4>
    1182:	da 01       	movw	r26, r20
    1184:	c9 01       	movw	r24, r18
    1186:	00 97       	sbiw	r24, 0x00	; 0
    1188:	a1 05       	cpc	r26, r1
    118a:	b1 05       	cpc	r27, r1
    118c:	e1 f6       	brne	.-72     	; 0x1146 <LCD_voidSendNumber+0x76>
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	9b 81       	ldd	r25, Y+3	; 0x03
    1192:	ac 81       	ldd	r26, Y+4	; 0x04
    1194:	bd 81       	ldd	r27, Y+5	; 0x05
    1196:	2a e0       	ldi	r18, 0x0A	; 10
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	40 e0       	ldi	r20, 0x00	; 0
    119c:	50 e0       	ldi	r21, 0x00	; 0
    119e:	bc 01       	movw	r22, r24
    11a0:	cd 01       	movw	r24, r26
    11a2:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <__udivmodsi4>
    11a6:	da 01       	movw	r26, r20
    11a8:	c9 01       	movw	r24, r18
    11aa:	8a 83       	std	Y+2, r24	; 0x02
    11ac:	9b 83       	std	Y+3, r25	; 0x03
    11ae:	ac 83       	std	Y+4, r26	; 0x04
    11b0:	bd 83       	std	Y+5, r27	; 0x05
    11b2:	37 c0       	rjmp	.+110    	; 0x1222 <LCD_voidSendNumber+0x152>

		while (Local_u32Counter != 0)
		{
			Local_u32Digit = Copy_s32Number/Local_u32Counter;
    11b4:	8e 81       	ldd	r24, Y+6	; 0x06
    11b6:	9f 81       	ldd	r25, Y+7	; 0x07
    11b8:	a8 85       	ldd	r26, Y+8	; 0x08
    11ba:	b9 85       	ldd	r27, Y+9	; 0x09
    11bc:	2a 81       	ldd	r18, Y+2	; 0x02
    11be:	3b 81       	ldd	r19, Y+3	; 0x03
    11c0:	4c 81       	ldd	r20, Y+4	; 0x04
    11c2:	5d 81       	ldd	r21, Y+5	; 0x05
    11c4:	bc 01       	movw	r22, r24
    11c6:	cd 01       	movw	r24, r26
    11c8:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <__udivmodsi4>
    11cc:	da 01       	movw	r26, r20
    11ce:	c9 01       	movw	r24, r18
    11d0:	89 83       	std	Y+1, r24	; 0x01

			LCD_voidSendChar(Local_u32Digit + '0');
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	80 5d       	subi	r24, 0xD0	; 208
    11d6:	0e 94 a1 07 	call	0xf42	; 0xf42 <LCD_voidSendChar>

			Copy_s32Number = Copy_s32Number%Local_u32Counter;
    11da:	8e 81       	ldd	r24, Y+6	; 0x06
    11dc:	9f 81       	ldd	r25, Y+7	; 0x07
    11de:	a8 85       	ldd	r26, Y+8	; 0x08
    11e0:	b9 85       	ldd	r27, Y+9	; 0x09
    11e2:	2a 81       	ldd	r18, Y+2	; 0x02
    11e4:	3b 81       	ldd	r19, Y+3	; 0x03
    11e6:	4c 81       	ldd	r20, Y+4	; 0x04
    11e8:	5d 81       	ldd	r21, Y+5	; 0x05
    11ea:	bc 01       	movw	r22, r24
    11ec:	cd 01       	movw	r24, r26
    11ee:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <__udivmodsi4>
    11f2:	dc 01       	movw	r26, r24
    11f4:	cb 01       	movw	r24, r22
    11f6:	8e 83       	std	Y+6, r24	; 0x06
    11f8:	9f 83       	std	Y+7, r25	; 0x07
    11fa:	a8 87       	std	Y+8, r26	; 0x08
    11fc:	b9 87       	std	Y+9, r27	; 0x09

			Local_u32Counter /= 10;
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	9b 81       	ldd	r25, Y+3	; 0x03
    1202:	ac 81       	ldd	r26, Y+4	; 0x04
    1204:	bd 81       	ldd	r27, Y+5	; 0x05
    1206:	2a e0       	ldi	r18, 0x0A	; 10
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	40 e0       	ldi	r20, 0x00	; 0
    120c:	50 e0       	ldi	r21, 0x00	; 0
    120e:	bc 01       	movw	r22, r24
    1210:	cd 01       	movw	r24, r26
    1212:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <__udivmodsi4>
    1216:	da 01       	movw	r26, r20
    1218:	c9 01       	movw	r24, r18
    121a:	8a 83       	std	Y+2, r24	; 0x02
    121c:	9b 83       	std	Y+3, r25	; 0x03
    121e:	ac 83       	std	Y+4, r26	; 0x04
    1220:	bd 83       	std	Y+5, r27	; 0x05
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;

		while (Local_u32Counter != 0)
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	9b 81       	ldd	r25, Y+3	; 0x03
    1226:	ac 81       	ldd	r26, Y+4	; 0x04
    1228:	bd 81       	ldd	r27, Y+5	; 0x05
    122a:	00 97       	sbiw	r24, 0x00	; 0
    122c:	a1 05       	cpc	r26, r1
    122e:	b1 05       	cpc	r27, r1
    1230:	09 f6       	brne	.-126    	; 0x11b4 <LCD_voidSendNumber+0xe4>
			Copy_s32Number = Copy_s32Number%Local_u32Counter;

			Local_u32Counter /= 10;
		}
	}
}
    1232:	29 96       	adiw	r28, 0x09	; 9
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <LCD_voidSetLocation>:

void LCD_voidSetLocation (u8 Copy_U8LineNum , u8 Copy_U8CharNum)
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	00 d0       	rcall	.+0      	; 0x124a <LCD_voidSetLocation+0x6>
    124a:	00 d0       	rcall	.+0      	; 0x124c <LCD_voidSetLocation+0x8>
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	89 83       	std	Y+1, r24	; 0x01
    1252:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_U8LineNum)
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	3c 83       	std	Y+4, r19	; 0x04
    125c:	2b 83       	std	Y+3, r18	; 0x03
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9c 81       	ldd	r25, Y+4	; 0x04
    1262:	81 30       	cpi	r24, 0x01	; 1
    1264:	91 05       	cpc	r25, r1
    1266:	31 f0       	breq	.+12     	; 0x1274 <LCD_voidSetLocation+0x30>
    1268:	2b 81       	ldd	r18, Y+3	; 0x03
    126a:	3c 81       	ldd	r19, Y+4	; 0x04
    126c:	22 30       	cpi	r18, 0x02	; 2
    126e:	31 05       	cpc	r19, r1
    1270:	31 f0       	breq	.+12     	; 0x127e <LCD_voidSetLocation+0x3a>
    1272:	09 c0       	rjmp	.+18     	; 0x1286 <LCD_voidSetLocation+0x42>
	{
		case LCD_U8_LINE1 : LCD_voidSendCommand (0x80+Copy_U8CharNum) ; break ;
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	80 58       	subi	r24, 0x80	; 128
    1278:	0e 94 03 07 	call	0xe06	; 0xe06 <LCD_voidSendCommand>
    127c:	04 c0       	rjmp	.+8      	; 0x1286 <LCD_voidSetLocation+0x42>
		
		case LCD_U8_LINE2 : LCD_voidSendCommand (0xc0+Copy_U8CharNum) ; break ;
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	80 54       	subi	r24, 0x40	; 64
    1282:	0e 94 03 07 	call	0xe06	; 0xe06 <LCD_voidSendCommand>
	}
}
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <LCD_voidInit>:

void LCD_voidInit (void )
{
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	e8 97       	sbiw	r28, 0x38	; 56
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	f8 94       	cli
    12a2:	de bf       	out	0x3e, r29	; 62
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	cd bf       	out	0x3d, r28	; 61
	/*Set Data Port Output*/
	DIO_voidSetPortDirection(LCD_DATA_PORT , 0xff);
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	6f ef       	ldi	r22, 0xFF	; 255
    12ac:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <DIO_voidSetPortDirection>
	
	/*Set Pins of Control Port Output*/
	DIO_voidSetPinDirection(LCD_CONTROL_PORT , RS , DIO_OUTPUT);
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	41 e0       	ldi	r20, 0x01	; 1
    12b6:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT , RW , DIO_OUTPUT);
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	61 e0       	ldi	r22, 0x01	; 1
    12be:	41 e0       	ldi	r20, 0x01	; 1
    12c0:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT , EN , DIO_OUTPUT);
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	62 e0       	ldi	r22, 0x02	; 2
    12c8:	41 e0       	ldi	r20, 0x01	; 1
    12ca:	0e 94 96 12 	call	0x252c	; 0x252c <DIO_voidSetPinDirection>
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	ac e0       	ldi	r26, 0x0C	; 12
    12d4:	b2 e4       	ldi	r27, 0x42	; 66
    12d6:	8d ab       	std	Y+53, r24	; 0x35
    12d8:	9e ab       	std	Y+54, r25	; 0x36
    12da:	af ab       	std	Y+55, r26	; 0x37
    12dc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12de:	6d a9       	ldd	r22, Y+53	; 0x35
    12e0:	7e a9       	ldd	r23, Y+54	; 0x36
    12e2:	8f a9       	ldd	r24, Y+55	; 0x37
    12e4:	98 ad       	ldd	r25, Y+56	; 0x38
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	4a ef       	ldi	r20, 0xFA	; 250
    12ec:	54 e4       	ldi	r21, 0x44	; 68
    12ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	89 ab       	std	Y+49, r24	; 0x31
    12f8:	9a ab       	std	Y+50, r25	; 0x32
    12fa:	ab ab       	std	Y+51, r26	; 0x33
    12fc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1300:	7a a9       	ldd	r23, Y+50	; 0x32
    1302:	8b a9       	ldd	r24, Y+51	; 0x33
    1304:	9c a9       	ldd	r25, Y+52	; 0x34
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e8       	ldi	r20, 0x80	; 128
    130c:	5f e3       	ldi	r21, 0x3F	; 63
    130e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1312:	88 23       	and	r24, r24
    1314:	2c f4       	brge	.+10     	; 0x1320 <LCD_voidInit+0x8c>
		__ticks = 1;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	98 ab       	std	Y+48, r25	; 0x30
    131c:	8f a7       	std	Y+47, r24	; 0x2f
    131e:	3f c0       	rjmp	.+126    	; 0x139e <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    1320:	69 a9       	ldd	r22, Y+49	; 0x31
    1322:	7a a9       	ldd	r23, Y+50	; 0x32
    1324:	8b a9       	ldd	r24, Y+51	; 0x33
    1326:	9c a9       	ldd	r25, Y+52	; 0x34
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	3f ef       	ldi	r19, 0xFF	; 255
    132c:	4f e7       	ldi	r20, 0x7F	; 127
    132e:	57 e4       	ldi	r21, 0x47	; 71
    1330:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1334:	18 16       	cp	r1, r24
    1336:	4c f5       	brge	.+82     	; 0x138a <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1338:	6d a9       	ldd	r22, Y+53	; 0x35
    133a:	7e a9       	ldd	r23, Y+54	; 0x36
    133c:	8f a9       	ldd	r24, Y+55	; 0x37
    133e:	98 ad       	ldd	r25, Y+56	; 0x38
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 e2       	ldi	r20, 0x20	; 32
    1346:	51 e4       	ldi	r21, 0x41	; 65
    1348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	bc 01       	movw	r22, r24
    1352:	cd 01       	movw	r24, r26
    1354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	98 ab       	std	Y+48, r25	; 0x30
    135e:	8f a7       	std	Y+47, r24	; 0x2f
    1360:	0f c0       	rjmp	.+30     	; 0x1380 <LCD_voidInit+0xec>
    1362:	88 ec       	ldi	r24, 0xC8	; 200
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	9e a7       	std	Y+46, r25	; 0x2e
    1368:	8d a7       	std	Y+45, r24	; 0x2d
    136a:	8d a5       	ldd	r24, Y+45	; 0x2d
    136c:	9e a5       	ldd	r25, Y+46	; 0x2e
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	f1 f7       	brne	.-4      	; 0x136e <LCD_voidInit+0xda>
    1372:	9e a7       	std	Y+46, r25	; 0x2e
    1374:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1376:	8f a5       	ldd	r24, Y+47	; 0x2f
    1378:	98 a9       	ldd	r25, Y+48	; 0x30
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	98 ab       	std	Y+48, r25	; 0x30
    137e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1380:	8f a5       	ldd	r24, Y+47	; 0x2f
    1382:	98 a9       	ldd	r25, Y+48	; 0x30
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	69 f7       	brne	.-38     	; 0x1362 <LCD_voidInit+0xce>
    1388:	14 c0       	rjmp	.+40     	; 0x13b2 <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    138a:	69 a9       	ldd	r22, Y+49	; 0x31
    138c:	7a a9       	ldd	r23, Y+50	; 0x32
    138e:	8b a9       	ldd	r24, Y+51	; 0x33
    1390:	9c a9       	ldd	r25, Y+52	; 0x34
    1392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	98 ab       	std	Y+48, r25	; 0x30
    139c:	8f a7       	std	Y+47, r24	; 0x2f
    139e:	8f a5       	ldd	r24, Y+47	; 0x2f
    13a0:	98 a9       	ldd	r25, Y+48	; 0x30
    13a2:	9c a7       	std	Y+44, r25	; 0x2c
    13a4:	8b a7       	std	Y+43, r24	; 0x2b
    13a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    13a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <LCD_voidInit+0x116>
    13ae:	9c a7       	std	Y+44, r25	; 0x2c
    13b0:	8b a7       	std	Y+43, r24	; 0x2b
	
	/*Waiting after VDD rises to 4.5V*/
	_delay_ms(35);

	/*Function  Set*/
	LCD_voidSendCommand (LCD_FUNC_SET) ;
    13b2:	88 e3       	ldi	r24, 0x38	; 56
    13b4:	0e 94 03 07 	call	0xe06	; 0xe06 <LCD_voidSendCommand>
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	a0 e8       	ldi	r26, 0x80	; 128
    13be:	bf e3       	ldi	r27, 0x3F	; 63
    13c0:	8f a3       	std	Y+39, r24	; 0x27
    13c2:	98 a7       	std	Y+40, r25	; 0x28
    13c4:	a9 a7       	std	Y+41, r26	; 0x29
    13c6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c8:	6f a1       	ldd	r22, Y+39	; 0x27
    13ca:	78 a5       	ldd	r23, Y+40	; 0x28
    13cc:	89 a5       	ldd	r24, Y+41	; 0x29
    13ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	4a ef       	ldi	r20, 0xFA	; 250
    13d6:	54 e4       	ldi	r21, 0x44	; 68
    13d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	8b a3       	std	Y+35, r24	; 0x23
    13e2:	9c a3       	std	Y+36, r25	; 0x24
    13e4:	ad a3       	std	Y+37, r26	; 0x25
    13e6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13e8:	6b a1       	ldd	r22, Y+35	; 0x23
    13ea:	7c a1       	ldd	r23, Y+36	; 0x24
    13ec:	8d a1       	ldd	r24, Y+37	; 0x25
    13ee:	9e a1       	ldd	r25, Y+38	; 0x26
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e8       	ldi	r20, 0x80	; 128
    13f6:	5f e3       	ldi	r21, 0x3F	; 63
    13f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13fc:	88 23       	and	r24, r24
    13fe:	2c f4       	brge	.+10     	; 0x140a <LCD_voidInit+0x176>
		__ticks = 1;
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	9a a3       	std	Y+34, r25	; 0x22
    1406:	89 a3       	std	Y+33, r24	; 0x21
    1408:	3f c0       	rjmp	.+126    	; 0x1488 <LCD_voidInit+0x1f4>
	else if (__tmp > 65535)
    140a:	6b a1       	ldd	r22, Y+35	; 0x23
    140c:	7c a1       	ldd	r23, Y+36	; 0x24
    140e:	8d a1       	ldd	r24, Y+37	; 0x25
    1410:	9e a1       	ldd	r25, Y+38	; 0x26
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	3f ef       	ldi	r19, 0xFF	; 255
    1416:	4f e7       	ldi	r20, 0x7F	; 127
    1418:	57 e4       	ldi	r21, 0x47	; 71
    141a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    141e:	18 16       	cp	r1, r24
    1420:	4c f5       	brge	.+82     	; 0x1474 <LCD_voidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1422:	6f a1       	ldd	r22, Y+39	; 0x27
    1424:	78 a5       	ldd	r23, Y+40	; 0x28
    1426:	89 a5       	ldd	r24, Y+41	; 0x29
    1428:	9a a5       	ldd	r25, Y+42	; 0x2a
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	40 e2       	ldi	r20, 0x20	; 32
    1430:	51 e4       	ldi	r21, 0x41	; 65
    1432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	bc 01       	movw	r22, r24
    143c:	cd 01       	movw	r24, r26
    143e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	9a a3       	std	Y+34, r25	; 0x22
    1448:	89 a3       	std	Y+33, r24	; 0x21
    144a:	0f c0       	rjmp	.+30     	; 0x146a <LCD_voidInit+0x1d6>
    144c:	88 ec       	ldi	r24, 0xC8	; 200
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	98 a3       	std	Y+32, r25	; 0x20
    1452:	8f 8f       	std	Y+31, r24	; 0x1f
    1454:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1456:	98 a1       	ldd	r25, Y+32	; 0x20
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	f1 f7       	brne	.-4      	; 0x1458 <LCD_voidInit+0x1c4>
    145c:	98 a3       	std	Y+32, r25	; 0x20
    145e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1460:	89 a1       	ldd	r24, Y+33	; 0x21
    1462:	9a a1       	ldd	r25, Y+34	; 0x22
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	9a a3       	std	Y+34, r25	; 0x22
    1468:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    146a:	89 a1       	ldd	r24, Y+33	; 0x21
    146c:	9a a1       	ldd	r25, Y+34	; 0x22
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	69 f7       	brne	.-38     	; 0x144c <LCD_voidInit+0x1b8>
    1472:	14 c0       	rjmp	.+40     	; 0x149c <LCD_voidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1474:	6b a1       	ldd	r22, Y+35	; 0x23
    1476:	7c a1       	ldd	r23, Y+36	; 0x24
    1478:	8d a1       	ldd	r24, Y+37	; 0x25
    147a:	9e a1       	ldd	r25, Y+38	; 0x26
    147c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	9a a3       	std	Y+34, r25	; 0x22
    1486:	89 a3       	std	Y+33, r24	; 0x21
    1488:	89 a1       	ldd	r24, Y+33	; 0x21
    148a:	9a a1       	ldd	r25, Y+34	; 0x22
    148c:	9e 8f       	std	Y+30, r25	; 0x1e
    148e:	8d 8f       	std	Y+29, r24	; 0x1d
    1490:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1492:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	f1 f7       	brne	.-4      	; 0x1494 <LCD_voidInit+0x200>
    1498:	9e 8f       	std	Y+30, r25	; 0x1e
    149a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	
	/*ON/OFF Control*/
	LCD_voidSendCommand (LCD_ONOF);
    149c:	8c e0       	ldi	r24, 0x0C	; 12
    149e:	0e 94 03 07 	call	0xe06	; 0xe06 <LCD_voidSendCommand>
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	a0 e8       	ldi	r26, 0x80	; 128
    14a8:	bf e3       	ldi	r27, 0x3F	; 63
    14aa:	89 8f       	std	Y+25, r24	; 0x19
    14ac:	9a 8f       	std	Y+26, r25	; 0x1a
    14ae:	ab 8f       	std	Y+27, r26	; 0x1b
    14b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b2:	69 8d       	ldd	r22, Y+25	; 0x19
    14b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	4a ef       	ldi	r20, 0xFA	; 250
    14c0:	54 e4       	ldi	r21, 0x44	; 68
    14c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	8d 8b       	std	Y+21, r24	; 0x15
    14cc:	9e 8b       	std	Y+22, r25	; 0x16
    14ce:	af 8b       	std	Y+23, r26	; 0x17
    14d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14d2:	6d 89       	ldd	r22, Y+21	; 0x15
    14d4:	7e 89       	ldd	r23, Y+22	; 0x16
    14d6:	8f 89       	ldd	r24, Y+23	; 0x17
    14d8:	98 8d       	ldd	r25, Y+24	; 0x18
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	40 e8       	ldi	r20, 0x80	; 128
    14e0:	5f e3       	ldi	r21, 0x3F	; 63
    14e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14e6:	88 23       	and	r24, r24
    14e8:	2c f4       	brge	.+10     	; 0x14f4 <LCD_voidInit+0x260>
		__ticks = 1;
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	9c 8b       	std	Y+20, r25	; 0x14
    14f0:	8b 8b       	std	Y+19, r24	; 0x13
    14f2:	3f c0       	rjmp	.+126    	; 0x1572 <LCD_voidInit+0x2de>
	else if (__tmp > 65535)
    14f4:	6d 89       	ldd	r22, Y+21	; 0x15
    14f6:	7e 89       	ldd	r23, Y+22	; 0x16
    14f8:	8f 89       	ldd	r24, Y+23	; 0x17
    14fa:	98 8d       	ldd	r25, Y+24	; 0x18
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	3f ef       	ldi	r19, 0xFF	; 255
    1500:	4f e7       	ldi	r20, 0x7F	; 127
    1502:	57 e4       	ldi	r21, 0x47	; 71
    1504:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1508:	18 16       	cp	r1, r24
    150a:	4c f5       	brge	.+82     	; 0x155e <LCD_voidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150c:	69 8d       	ldd	r22, Y+25	; 0x19
    150e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1510:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1512:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e2       	ldi	r20, 0x20	; 32
    151a:	51 e4       	ldi	r21, 0x41	; 65
    151c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	bc 01       	movw	r22, r24
    1526:	cd 01       	movw	r24, r26
    1528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	9c 8b       	std	Y+20, r25	; 0x14
    1532:	8b 8b       	std	Y+19, r24	; 0x13
    1534:	0f c0       	rjmp	.+30     	; 0x1554 <LCD_voidInit+0x2c0>
    1536:	88 ec       	ldi	r24, 0xC8	; 200
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	9a 8b       	std	Y+18, r25	; 0x12
    153c:	89 8b       	std	Y+17, r24	; 0x11
    153e:	89 89       	ldd	r24, Y+17	; 0x11
    1540:	9a 89       	ldd	r25, Y+18	; 0x12
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <LCD_voidInit+0x2ae>
    1546:	9a 8b       	std	Y+18, r25	; 0x12
    1548:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154a:	8b 89       	ldd	r24, Y+19	; 0x13
    154c:	9c 89       	ldd	r25, Y+20	; 0x14
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	9c 8b       	std	Y+20, r25	; 0x14
    1552:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1554:	8b 89       	ldd	r24, Y+19	; 0x13
    1556:	9c 89       	ldd	r25, Y+20	; 0x14
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	69 f7       	brne	.-38     	; 0x1536 <LCD_voidInit+0x2a2>
    155c:	14 c0       	rjmp	.+40     	; 0x1586 <LCD_voidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    155e:	6d 89       	ldd	r22, Y+21	; 0x15
    1560:	7e 89       	ldd	r23, Y+22	; 0x16
    1562:	8f 89       	ldd	r24, Y+23	; 0x17
    1564:	98 8d       	ldd	r25, Y+24	; 0x18
    1566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	9c 8b       	std	Y+20, r25	; 0x14
    1570:	8b 8b       	std	Y+19, r24	; 0x13
    1572:	8b 89       	ldd	r24, Y+19	; 0x13
    1574:	9c 89       	ldd	r25, Y+20	; 0x14
    1576:	98 8b       	std	Y+16, r25	; 0x10
    1578:	8f 87       	std	Y+15, r24	; 0x0f
    157a:	8f 85       	ldd	r24, Y+15	; 0x0f
    157c:	98 89       	ldd	r25, Y+16	; 0x10
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	f1 f7       	brne	.-4      	; 0x157e <LCD_voidInit+0x2ea>
    1582:	98 8b       	std	Y+16, r25	; 0x10
    1584:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/*Function Clear*/
	LCD_voidSendCommand (LCD_CLEAR);
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	0e 94 03 07 	call	0xe06	; 0xe06 <LCD_voidSendCommand>
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	a0 e8       	ldi	r26, 0x80	; 128
    1592:	bf e3       	ldi	r27, 0x3F	; 63
    1594:	8b 87       	std	Y+11, r24	; 0x0b
    1596:	9c 87       	std	Y+12, r25	; 0x0c
    1598:	ad 87       	std	Y+13, r26	; 0x0d
    159a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    159c:	6b 85       	ldd	r22, Y+11	; 0x0b
    159e:	7c 85       	ldd	r23, Y+12	; 0x0c
    15a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	4a ef       	ldi	r20, 0xFA	; 250
    15aa:	54 e4       	ldi	r21, 0x44	; 68
    15ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	8f 83       	std	Y+7, r24	; 0x07
    15b6:	98 87       	std	Y+8, r25	; 0x08
    15b8:	a9 87       	std	Y+9, r26	; 0x09
    15ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15bc:	6f 81       	ldd	r22, Y+7	; 0x07
    15be:	78 85       	ldd	r23, Y+8	; 0x08
    15c0:	89 85       	ldd	r24, Y+9	; 0x09
    15c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	40 e8       	ldi	r20, 0x80	; 128
    15ca:	5f e3       	ldi	r21, 0x3F	; 63
    15cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15d0:	88 23       	and	r24, r24
    15d2:	2c f4       	brge	.+10     	; 0x15de <LCD_voidInit+0x34a>
		__ticks = 1;
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	9e 83       	std	Y+6, r25	; 0x06
    15da:	8d 83       	std	Y+5, r24	; 0x05
    15dc:	3f c0       	rjmp	.+126    	; 0x165c <LCD_voidInit+0x3c8>
	else if (__tmp > 65535)
    15de:	6f 81       	ldd	r22, Y+7	; 0x07
    15e0:	78 85       	ldd	r23, Y+8	; 0x08
    15e2:	89 85       	ldd	r24, Y+9	; 0x09
    15e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	3f ef       	ldi	r19, 0xFF	; 255
    15ea:	4f e7       	ldi	r20, 0x7F	; 127
    15ec:	57 e4       	ldi	r21, 0x47	; 71
    15ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15f2:	18 16       	cp	r1, r24
    15f4:	4c f5       	brge	.+82     	; 0x1648 <LCD_voidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    15fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	40 e2       	ldi	r20, 0x20	; 32
    1604:	51 e4       	ldi	r21, 0x41	; 65
    1606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	bc 01       	movw	r22, r24
    1610:	cd 01       	movw	r24, r26
    1612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	9e 83       	std	Y+6, r25	; 0x06
    161c:	8d 83       	std	Y+5, r24	; 0x05
    161e:	0f c0       	rjmp	.+30     	; 0x163e <LCD_voidInit+0x3aa>
    1620:	88 ec       	ldi	r24, 0xC8	; 200
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	9c 83       	std	Y+4, r25	; 0x04
    1626:	8b 83       	std	Y+3, r24	; 0x03
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	9c 81       	ldd	r25, Y+4	; 0x04
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	f1 f7       	brne	.-4      	; 0x162c <LCD_voidInit+0x398>
    1630:	9c 83       	std	Y+4, r25	; 0x04
    1632:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1634:	8d 81       	ldd	r24, Y+5	; 0x05
    1636:	9e 81       	ldd	r25, Y+6	; 0x06
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	9e 83       	std	Y+6, r25	; 0x06
    163c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    163e:	8d 81       	ldd	r24, Y+5	; 0x05
    1640:	9e 81       	ldd	r25, Y+6	; 0x06
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	69 f7       	brne	.-38     	; 0x1620 <LCD_voidInit+0x38c>
    1646:	14 c0       	rjmp	.+40     	; 0x1670 <LCD_voidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1648:	6f 81       	ldd	r22, Y+7	; 0x07
    164a:	78 85       	ldd	r23, Y+8	; 0x08
    164c:	89 85       	ldd	r24, Y+9	; 0x09
    164e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	9e 83       	std	Y+6, r25	; 0x06
    165a:	8d 83       	std	Y+5, r24	; 0x05
    165c:	8d 81       	ldd	r24, Y+5	; 0x05
    165e:	9e 81       	ldd	r25, Y+6	; 0x06
    1660:	9a 83       	std	Y+2, r25	; 0x02
    1662:	89 83       	std	Y+1, r24	; 0x01
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	9a 81       	ldd	r25, Y+2	; 0x02
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	f1 f7       	brne	.-4      	; 0x1668 <LCD_voidInit+0x3d4>
    166c:	9a 83       	std	Y+2, r25	; 0x02
    166e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    1670:	e8 96       	adiw	r28, 0x38	; 56
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	08 95       	ret

00001682 <LCD_voidDrawSpecialChar>:

void LCD_voidDrawSpecialChar (u8 Copy_U8CharAddress , u8 *Copy_U8SpecialChar)
{
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	6c 97       	sbiw	r28, 0x1c	; 28
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	8a 8f       	std	Y+26, r24	; 0x1a
    1698:	7c 8f       	std	Y+28, r23	; 0x1c
    169a:	6b 8f       	std	Y+27, r22	; 0x1b
	LCD_voidSendCommand(0b01000000+(Copy_U8CharAddress * 8));
    169c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    169e:	88 2f       	mov	r24, r24
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	08 96       	adiw	r24, 0x08	; 8
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0e 94 03 07 	call	0xe06	; 0xe06 <LCD_voidSendCommand>
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	a0 e2       	ldi	r26, 0x20	; 32
    16ba:	b2 e4       	ldi	r27, 0x42	; 66
    16bc:	8d 8b       	std	Y+21, r24	; 0x15
    16be:	9e 8b       	std	Y+22, r25	; 0x16
    16c0:	af 8b       	std	Y+23, r26	; 0x17
    16c2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16c4:	6d 89       	ldd	r22, Y+21	; 0x15
    16c6:	7e 89       	ldd	r23, Y+22	; 0x16
    16c8:	8f 89       	ldd	r24, Y+23	; 0x17
    16ca:	98 8d       	ldd	r25, Y+24	; 0x18
    16cc:	2b ea       	ldi	r18, 0xAB	; 171
    16ce:	3a ea       	ldi	r19, 0xAA	; 170
    16d0:	4a e2       	ldi	r20, 0x2A	; 42
    16d2:	50 e4       	ldi	r21, 0x40	; 64
    16d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	89 8b       	std	Y+17, r24	; 0x11
    16de:	9a 8b       	std	Y+18, r25	; 0x12
    16e0:	ab 8b       	std	Y+19, r26	; 0x13
    16e2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    16e4:	69 89       	ldd	r22, Y+17	; 0x11
    16e6:	7a 89       	ldd	r23, Y+18	; 0x12
    16e8:	8b 89       	ldd	r24, Y+19	; 0x13
    16ea:	9c 89       	ldd	r25, Y+20	; 0x14
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	40 e8       	ldi	r20, 0x80	; 128
    16f2:	5f e3       	ldi	r21, 0x3F	; 63
    16f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16f8:	88 23       	and	r24, r24
    16fa:	1c f4       	brge	.+6      	; 0x1702 <LCD_voidDrawSpecialChar+0x80>
		__ticks = 1;
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	88 8b       	std	Y+16, r24	; 0x10
    1700:	91 c0       	rjmp	.+290    	; 0x1824 <LCD_voidDrawSpecialChar+0x1a2>
	else if (__tmp > 255)
    1702:	69 89       	ldd	r22, Y+17	; 0x11
    1704:	7a 89       	ldd	r23, Y+18	; 0x12
    1706:	8b 89       	ldd	r24, Y+19	; 0x13
    1708:	9c 89       	ldd	r25, Y+20	; 0x14
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	4f e7       	ldi	r20, 0x7F	; 127
    1710:	53 e4       	ldi	r21, 0x43	; 67
    1712:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1716:	18 16       	cp	r1, r24
    1718:	0c f0       	brlt	.+2      	; 0x171c <LCD_voidDrawSpecialChar+0x9a>
    171a:	7b c0       	rjmp	.+246    	; 0x1812 <LCD_voidDrawSpecialChar+0x190>
	{
		_delay_ms(__us / 1000.0);
    171c:	6d 89       	ldd	r22, Y+21	; 0x15
    171e:	7e 89       	ldd	r23, Y+22	; 0x16
    1720:	8f 89       	ldd	r24, Y+23	; 0x17
    1722:	98 8d       	ldd	r25, Y+24	; 0x18
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	4a e7       	ldi	r20, 0x7A	; 122
    172a:	54 e4       	ldi	r21, 0x44	; 68
    172c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	8c 87       	std	Y+12, r24	; 0x0c
    1736:	9d 87       	std	Y+13, r25	; 0x0d
    1738:	ae 87       	std	Y+14, r26	; 0x0e
    173a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173c:	6c 85       	ldd	r22, Y+12	; 0x0c
    173e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1740:	8e 85       	ldd	r24, Y+14	; 0x0e
    1742:	9f 85       	ldd	r25, Y+15	; 0x0f
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	4a ef       	ldi	r20, 0xFA	; 250
    174a:	54 e4       	ldi	r21, 0x44	; 68
    174c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	88 87       	std	Y+8, r24	; 0x08
    1756:	99 87       	std	Y+9, r25	; 0x09
    1758:	aa 87       	std	Y+10, r26	; 0x0a
    175a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    175c:	68 85       	ldd	r22, Y+8	; 0x08
    175e:	79 85       	ldd	r23, Y+9	; 0x09
    1760:	8a 85       	ldd	r24, Y+10	; 0x0a
    1762:	9b 85       	ldd	r25, Y+11	; 0x0b
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	40 e8       	ldi	r20, 0x80	; 128
    176a:	5f e3       	ldi	r21, 0x3F	; 63
    176c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1770:	88 23       	and	r24, r24
    1772:	2c f4       	brge	.+10     	; 0x177e <LCD_voidDrawSpecialChar+0xfc>
		__ticks = 1;
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	9f 83       	std	Y+7, r25	; 0x07
    177a:	8e 83       	std	Y+6, r24	; 0x06
    177c:	3f c0       	rjmp	.+126    	; 0x17fc <LCD_voidDrawSpecialChar+0x17a>
	else if (__tmp > 65535)
    177e:	68 85       	ldd	r22, Y+8	; 0x08
    1780:	79 85       	ldd	r23, Y+9	; 0x09
    1782:	8a 85       	ldd	r24, Y+10	; 0x0a
    1784:	9b 85       	ldd	r25, Y+11	; 0x0b
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	3f ef       	ldi	r19, 0xFF	; 255
    178a:	4f e7       	ldi	r20, 0x7F	; 127
    178c:	57 e4       	ldi	r21, 0x47	; 71
    178e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1792:	18 16       	cp	r1, r24
    1794:	4c f5       	brge	.+82     	; 0x17e8 <LCD_voidDrawSpecialChar+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1796:	6c 85       	ldd	r22, Y+12	; 0x0c
    1798:	7d 85       	ldd	r23, Y+13	; 0x0d
    179a:	8e 85       	ldd	r24, Y+14	; 0x0e
    179c:	9f 85       	ldd	r25, Y+15	; 0x0f
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	40 e2       	ldi	r20, 0x20	; 32
    17a4:	51 e4       	ldi	r21, 0x41	; 65
    17a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	bc 01       	movw	r22, r24
    17b0:	cd 01       	movw	r24, r26
    17b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	9f 83       	std	Y+7, r25	; 0x07
    17bc:	8e 83       	std	Y+6, r24	; 0x06
    17be:	0f c0       	rjmp	.+30     	; 0x17de <LCD_voidDrawSpecialChar+0x15c>
    17c0:	88 ec       	ldi	r24, 0xC8	; 200
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	9d 83       	std	Y+5, r25	; 0x05
    17c6:	8c 83       	std	Y+4, r24	; 0x04
    17c8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ca:	9d 81       	ldd	r25, Y+5	; 0x05
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <LCD_voidDrawSpecialChar+0x14a>
    17d0:	9d 83       	std	Y+5, r25	; 0x05
    17d2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d4:	8e 81       	ldd	r24, Y+6	; 0x06
    17d6:	9f 81       	ldd	r25, Y+7	; 0x07
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	9f 83       	std	Y+7, r25	; 0x07
    17dc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17de:	8e 81       	ldd	r24, Y+6	; 0x06
    17e0:	9f 81       	ldd	r25, Y+7	; 0x07
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	69 f7       	brne	.-38     	; 0x17c0 <LCD_voidDrawSpecialChar+0x13e>
    17e6:	24 c0       	rjmp	.+72     	; 0x1830 <LCD_voidDrawSpecialChar+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e8:	68 85       	ldd	r22, Y+8	; 0x08
    17ea:	79 85       	ldd	r23, Y+9	; 0x09
    17ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    17ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    17f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	9f 83       	std	Y+7, r25	; 0x07
    17fa:	8e 83       	std	Y+6, r24	; 0x06
    17fc:	8e 81       	ldd	r24, Y+6	; 0x06
    17fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1800:	9b 83       	std	Y+3, r25	; 0x03
    1802:	8a 83       	std	Y+2, r24	; 0x02
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	9b 81       	ldd	r25, Y+3	; 0x03
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	f1 f7       	brne	.-4      	; 0x1808 <LCD_voidDrawSpecialChar+0x186>
    180c:	9b 83       	std	Y+3, r25	; 0x03
    180e:	8a 83       	std	Y+2, r24	; 0x02
    1810:	0f c0       	rjmp	.+30     	; 0x1830 <LCD_voidDrawSpecialChar+0x1ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1812:	69 89       	ldd	r22, Y+17	; 0x11
    1814:	7a 89       	ldd	r23, Y+18	; 0x12
    1816:	8b 89       	ldd	r24, Y+19	; 0x13
    1818:	9c 89       	ldd	r25, Y+20	; 0x14
    181a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	88 8b       	std	Y+16, r24	; 0x10
    1824:	88 89       	ldd	r24, Y+16	; 0x10
    1826:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	8a 95       	dec	r24
    182c:	f1 f7       	brne	.-4      	; 0x182a <LCD_voidDrawSpecialChar+0x1a8>
    182e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(40);
	u8 LCD_U8Counter ;
	for (LCD_U8Counter=0 ; LCD_U8Counter<8 ; LCD_U8Counter++)
    1830:	19 8e       	std	Y+25, r1	; 0x19
    1832:	0e c0       	rjmp	.+28     	; 0x1850 <LCD_voidDrawSpecialChar+0x1ce>
	{
		LCD_voidSendChar(Copy_U8SpecialChar[LCD_U8Counter]);
    1834:	89 8d       	ldd	r24, Y+25	; 0x19
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    183c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    183e:	fc 01       	movw	r30, r24
    1840:	e2 0f       	add	r30, r18
    1842:	f3 1f       	adc	r31, r19
    1844:	80 81       	ld	r24, Z
    1846:	0e 94 a1 07 	call	0xf42	; 0xf42 <LCD_voidSendChar>
void LCD_voidDrawSpecialChar (u8 Copy_U8CharAddress , u8 *Copy_U8SpecialChar)
{
	LCD_voidSendCommand(0b01000000+(Copy_U8CharAddress * 8));
	_delay_us(40);
	u8 LCD_U8Counter ;
	for (LCD_U8Counter=0 ; LCD_U8Counter<8 ; LCD_U8Counter++)
    184a:	89 8d       	ldd	r24, Y+25	; 0x19
    184c:	8f 5f       	subi	r24, 0xFF	; 255
    184e:	89 8f       	std	Y+25, r24	; 0x19
    1850:	89 8d       	ldd	r24, Y+25	; 0x19
    1852:	88 30       	cpi	r24, 0x08	; 8
    1854:	78 f3       	brcs	.-34     	; 0x1834 <LCD_voidDrawSpecialChar+0x1b2>
	{
		LCD_voidSendChar(Copy_U8SpecialChar[LCD_U8Counter]);
	}
}
    1856:	6c 96       	adiw	r28, 0x1c	; 28
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	de bf       	out	0x3e, r29	; 62
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	cd bf       	out	0x3d, r28	; 61
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <LCD_voidSendSpecialChar>:

void LCD_voidSendSpecialChar(u8 Copy_U8CharAddress , u8 Copy_U8LineNum , u8 Copy_U8CharNum)
{
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	00 d0       	rcall	.+0      	; 0x186e <LCD_voidSendSpecialChar+0x6>
    186e:	0f 92       	push	r0
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
    1874:	89 83       	std	Y+1, r24	; 0x01
    1876:	6a 83       	std	Y+2, r22	; 0x02
    1878:	4b 83       	std	Y+3, r20	; 0x03
	LCD_voidSetLocation(Copy_U8LineNum , Copy_U8CharNum);
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	6b 81       	ldd	r22, Y+3	; 0x03
    187e:	0e 94 22 09 	call	0x1244	; 0x1244 <LCD_voidSetLocation>
	LCD_voidSendChar(Copy_U8CharAddress);
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	0e 94 a1 07 	call	0xf42	; 0xf42 <LCD_voidSendChar>
}
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	cf 91       	pop	r28
    1890:	df 91       	pop	r29
    1892:	08 95       	ret

00001894 <Timer1_voidInit>:

static void (*Timer_ptrFunc[4])(void) = {NULL};


void Timer1_voidInit(u8 Copy_u8Mode, u8 Copy_u8Scaler, u8 Copy_u8OC1A, u8 Copy_u8OC1B)
{
    1894:	df 93       	push	r29
    1896:	cf 93       	push	r28
    1898:	00 d0       	rcall	.+0      	; 0x189a <Timer1_voidInit+0x6>
    189a:	00 d0       	rcall	.+0      	; 0x189c <Timer1_voidInit+0x8>
    189c:	00 d0       	rcall	.+0      	; 0x189e <Timer1_voidInit+0xa>
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
    18a2:	89 83       	std	Y+1, r24	; 0x01
    18a4:	6a 83       	std	Y+2, r22	; 0x02
    18a6:	4b 83       	std	Y+3, r20	; 0x03
    18a8:	2c 83       	std	Y+4, r18	; 0x04
    //Select Timer1 Mode
    switch (Copy_u8Mode)
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	3e 83       	std	Y+6, r19	; 0x06
    18b2:	2d 83       	std	Y+5, r18	; 0x05
    18b4:	8d 81       	ldd	r24, Y+5	; 0x05
    18b6:	9e 81       	ldd	r25, Y+6	; 0x06
    18b8:	8b 30       	cpi	r24, 0x0B	; 11
    18ba:	91 05       	cpc	r25, r1
    18bc:	09 f4       	brne	.+2      	; 0x18c0 <Timer1_voidInit+0x2c>
    18be:	56 c0       	rjmp	.+172    	; 0x196c <Timer1_voidInit+0xd8>
    18c0:	2d 81       	ldd	r18, Y+5	; 0x05
    18c2:	3e 81       	ldd	r19, Y+6	; 0x06
    18c4:	2c 30       	cpi	r18, 0x0C	; 12
    18c6:	31 05       	cpc	r19, r1
    18c8:	54 f4       	brge	.+20     	; 0x18de <Timer1_voidInit+0x4a>
    18ca:	8d 81       	ldd	r24, Y+5	; 0x05
    18cc:	9e 81       	ldd	r25, Y+6	; 0x06
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	99 f0       	breq	.+38     	; 0x18f8 <Timer1_voidInit+0x64>
    18d2:	2d 81       	ldd	r18, Y+5	; 0x05
    18d4:	3e 81       	ldd	r19, Y+6	; 0x06
    18d6:	24 30       	cpi	r18, 0x04	; 4
    18d8:	31 05       	cpc	r19, r1
    18da:	59 f1       	breq	.+86     	; 0x1932 <Timer1_voidInit+0x9e>
    18dc:	9d c0       	rjmp	.+314    	; 0x1a18 <Timer1_voidInit+0x184>
    18de:	8d 81       	ldd	r24, Y+5	; 0x05
    18e0:	9e 81       	ldd	r25, Y+6	; 0x06
    18e2:	8e 30       	cpi	r24, 0x0E	; 14
    18e4:	91 05       	cpc	r25, r1
    18e6:	09 f4       	brne	.+2      	; 0x18ea <Timer1_voidInit+0x56>
    18e8:	5e c0       	rjmp	.+188    	; 0x19a6 <Timer1_voidInit+0x112>
    18ea:	2d 81       	ldd	r18, Y+5	; 0x05
    18ec:	3e 81       	ldd	r19, Y+6	; 0x06
    18ee:	2f 30       	cpi	r18, 0x0F	; 15
    18f0:	31 05       	cpc	r19, r1
    18f2:	09 f4       	brne	.+2      	; 0x18f6 <Timer1_voidInit+0x62>
    18f4:	75 c0       	rjmp	.+234    	; 0x19e0 <Timer1_voidInit+0x14c>
    18f6:	90 c0       	rjmp	.+288    	; 0x1a18 <Timer1_voidInit+0x184>
    {
    case TIMER1_NORMAL_MODE:
        CLR_BIT(TCCR1A, WGM10);
    18f8:	af e4       	ldi	r26, 0x4F	; 79
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	ef e4       	ldi	r30, 0x4F	; 79
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	8e 7f       	andi	r24, 0xFE	; 254
    1904:	8c 93       	st	X, r24
        CLR_BIT(TCCR1A, WGM11);
    1906:	af e4       	ldi	r26, 0x4F	; 79
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	ef e4       	ldi	r30, 0x4F	; 79
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	8d 7f       	andi	r24, 0xFD	; 253
    1912:	8c 93       	st	X, r24
        CLR_BIT(TCCR1B, WGM12);
    1914:	ae e4       	ldi	r26, 0x4E	; 78
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	ee e4       	ldi	r30, 0x4E	; 78
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	87 7f       	andi	r24, 0xF7	; 247
    1920:	8c 93       	st	X, r24
        CLR_BIT(TCCR1B, WGM13);
    1922:	ae e4       	ldi	r26, 0x4E	; 78
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	ee e4       	ldi	r30, 0x4E	; 78
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	8f 7e       	andi	r24, 0xEF	; 239
    192e:	8c 93       	st	X, r24
    1930:	73 c0       	rjmp	.+230    	; 0x1a18 <Timer1_voidInit+0x184>
        break;
    case TIMER1_CTC_MODE_TOP_OCR1A:
        CLR_BIT(TCCR1A, WGM10);
    1932:	af e4       	ldi	r26, 0x4F	; 79
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	ef e4       	ldi	r30, 0x4F	; 79
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	8e 7f       	andi	r24, 0xFE	; 254
    193e:	8c 93       	st	X, r24
        CLR_BIT(TCCR1A, WGM11);
    1940:	af e4       	ldi	r26, 0x4F	; 79
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	ef e4       	ldi	r30, 0x4F	; 79
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	8d 7f       	andi	r24, 0xFD	; 253
    194c:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM12);
    194e:	ae e4       	ldi	r26, 0x4E	; 78
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	ee e4       	ldi	r30, 0x4E	; 78
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	88 60       	ori	r24, 0x08	; 8
    195a:	8c 93       	st	X, r24
        CLR_BIT(TCCR1B, WGM13);
    195c:	ae e4       	ldi	r26, 0x4E	; 78
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	ee e4       	ldi	r30, 0x4E	; 78
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	8f 7e       	andi	r24, 0xEF	; 239
    1968:	8c 93       	st	X, r24
    196a:	56 c0       	rjmp	.+172    	; 0x1a18 <Timer1_voidInit+0x184>
        break;
    case TIMER1_PHASE_CORRECT_MODE_TOP_OCR1A:
        SET_BIT(TCCR1A, WGM10);
    196c:	af e4       	ldi	r26, 0x4F	; 79
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	ef e4       	ldi	r30, 0x4F	; 79
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	81 60       	ori	r24, 0x01	; 1
    1978:	8c 93       	st	X, r24
        SET_BIT(TCCR1A, WGM11);
    197a:	af e4       	ldi	r26, 0x4F	; 79
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	ef e4       	ldi	r30, 0x4F	; 79
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	82 60       	ori	r24, 0x02	; 2
    1986:	8c 93       	st	X, r24
        CLR_BIT(TCCR1B, WGM12);
    1988:	ae e4       	ldi	r26, 0x4E	; 78
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	ee e4       	ldi	r30, 0x4E	; 78
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	87 7f       	andi	r24, 0xF7	; 247
    1994:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM13);
    1996:	ae e4       	ldi	r26, 0x4E	; 78
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	ee e4       	ldi	r30, 0x4E	; 78
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	80 61       	ori	r24, 0x10	; 16
    19a2:	8c 93       	st	X, r24
    19a4:	39 c0       	rjmp	.+114    	; 0x1a18 <Timer1_voidInit+0x184>
        break;
    case TIMER1_FAST_MODE_TOP_ICR1:
        CLR_BIT(TCCR1A, WGM10);
    19a6:	af e4       	ldi	r26, 0x4F	; 79
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	ef e4       	ldi	r30, 0x4F	; 79
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	8e 7f       	andi	r24, 0xFE	; 254
    19b2:	8c 93       	st	X, r24
        SET_BIT(TCCR1A, WGM11);
    19b4:	af e4       	ldi	r26, 0x4F	; 79
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	ef e4       	ldi	r30, 0x4F	; 79
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	82 60       	ori	r24, 0x02	; 2
    19c0:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM12);
    19c2:	ae e4       	ldi	r26, 0x4E	; 78
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	ee e4       	ldi	r30, 0x4E	; 78
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	88 60       	ori	r24, 0x08	; 8
    19ce:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM13);
    19d0:	ae e4       	ldi	r26, 0x4E	; 78
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	ee e4       	ldi	r30, 0x4E	; 78
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	80 61       	ori	r24, 0x10	; 16
    19dc:	8c 93       	st	X, r24
    19de:	1c c0       	rjmp	.+56     	; 0x1a18 <Timer1_voidInit+0x184>
        break;
    case TIMER1_FAST_MODE_TOP_OCR1A:
        SET_BIT(TCCR1A, WGM10);
    19e0:	af e4       	ldi	r26, 0x4F	; 79
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	ef e4       	ldi	r30, 0x4F	; 79
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	81 60       	ori	r24, 0x01	; 1
    19ec:	8c 93       	st	X, r24
        SET_BIT(TCCR1A, WGM11);
    19ee:	af e4       	ldi	r26, 0x4F	; 79
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	ef e4       	ldi	r30, 0x4F	; 79
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	82 60       	ori	r24, 0x02	; 2
    19fa:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM12);
    19fc:	ae e4       	ldi	r26, 0x4E	; 78
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	ee e4       	ldi	r30, 0x4E	; 78
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	88 60       	ori	r24, 0x08	; 8
    1a08:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM13);
    1a0a:	ae e4       	ldi	r26, 0x4E	; 78
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	ee e4       	ldi	r30, 0x4E	; 78
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	80 61       	ori	r24, 0x10	; 16
    1a16:	8c 93       	st	X, r24
        break;
    }
  
    
    //Config Action OC1A PIN
    CLR_BITS_IN_REG(TCCR1A, OC1A_CLR_MASK);
    1a18:	af e4       	ldi	r26, 0x4F	; 79
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	ef e4       	ldi	r30, 0x4F	; 79
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	8f 73       	andi	r24, 0x3F	; 63
    1a24:	8c 93       	st	X, r24
    SET_BITS_IN_REG(TCCR1A, Copy_u8OC1A);
    1a26:	af e4       	ldi	r26, 0x4F	; 79
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	ef e4       	ldi	r30, 0x4F	; 79
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	90 81       	ld	r25, Z
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	89 2b       	or	r24, r25
    1a34:	8c 93       	st	X, r24

    //Config Action OC1B PIN
    CLR_BITS_IN_REG(TCCR1A, OC1B_CLR_MASK);
    1a36:	af e4       	ldi	r26, 0x4F	; 79
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	ef e4       	ldi	r30, 0x4F	; 79
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	8f 7c       	andi	r24, 0xCF	; 207
    1a42:	8c 93       	st	X, r24
    SET_BITS_IN_REG(TCCR1A, Copy_u8OC1B);
    1a44:	af e4       	ldi	r26, 0x4F	; 79
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	ef e4       	ldi	r30, 0x4F	; 79
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	90 81       	ld	r25, Z
    1a4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a50:	89 2b       	or	r24, r25
    1a52:	8c 93       	st	X, r24

    //Select Clock Source
    //Clear CS12:10
    CLR_BITS_IN_REG(TCCR1B, CLK_SRC_CLR_MASK);
    1a54:	ae e4       	ldi	r26, 0x4E	; 78
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	ee e4       	ldi	r30, 0x4E	; 78
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	88 7f       	andi	r24, 0xF8	; 248
    1a60:	8c 93       	st	X, r24
    //Set Clock source
    SET_BITS_IN_REG(TCCR1B, Copy_u8Scaler);
    1a62:	ae e4       	ldi	r26, 0x4E	; 78
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	ee e4       	ldi	r30, 0x4E	; 78
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	90 81       	ld	r25, Z
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	89 2b       	or	r24, r25
    1a70:	8c 93       	st	X, r24
 
}
    1a72:	26 96       	adiw	r28, 0x06	; 6
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	f8 94       	cli
    1a78:	de bf       	out	0x3e, r29	; 62
    1a7a:	0f be       	out	0x3f, r0	; 63
    1a7c:	cd bf       	out	0x3d, r28	; 61
    1a7e:	cf 91       	pop	r28
    1a80:	df 91       	pop	r29
    1a82:	08 95       	ret

00001a84 <Timer1_voidSetPreloadValue>:

void Timer1_voidSetPreloadValue(u16 Copy_u16Value)
{
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	00 d0       	rcall	.+0      	; 0x1a8a <Timer1_voidSetPreloadValue+0x6>
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
    1a8e:	9a 83       	std	Y+2, r25	; 0x02
    1a90:	89 83       	std	Y+1, r24	; 0x01
    TCNT1 = Copy_u16Value;
    1a92:	ec e4       	ldi	r30, 0x4C	; 76
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9a:	91 83       	std	Z+1, r25	; 0x01
    1a9c:	80 83       	st	Z, r24
}
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	08 95       	ret

00001aa8 <Timer1_u16ReadValue>:

u16  Timer1_u16ReadValue(void)
{
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    return TCNT1;
    1ab0:	ec e4       	ldi	r30, 0x4C	; 76
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	91 81       	ldd	r25, Z+1	; 0x01
}
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <Timer1_voidSetOCR1AValue>:

void Timer1_voidSetOCR1AValue(u16 Copy_u16Value)
{
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	00 d0       	rcall	.+0      	; 0x1ac4 <Timer1_voidSetOCR1AValue+0x6>
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	9a 83       	std	Y+2, r25	; 0x02
    1aca:	89 83       	std	Y+1, r24	; 0x01
    OCR1A = Copy_u16Value;
    1acc:	ea e4       	ldi	r30, 0x4A	; 74
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad4:	91 83       	std	Z+1, r25	; 0x01
    1ad6:	80 83       	st	Z, r24
}
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <Timer1_voidSetOCR1BValue>:

void Timer1_voidSetOCR1BValue(u16 Copy_u16Value)
{
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	00 d0       	rcall	.+0      	; 0x1ae8 <Timer1_voidSetOCR1BValue+0x6>
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	9a 83       	std	Y+2, r25	; 0x02
    1aee:	89 83       	std	Y+1, r24	; 0x01
    OCR1B = Copy_u16Value;
    1af0:	e8 e4       	ldi	r30, 0x48	; 72
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	9a 81       	ldd	r25, Y+2	; 0x02
    1af8:	91 83       	std	Z+1, r25	; 0x01
    1afa:	80 83       	st	Z, r24
}
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	08 95       	ret

00001b06 <Timer1_voidSetICR1Value>:

void Timer1_voidSetICR1Value(u16 Copy_u16Value)
{
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <Timer1_voidSetICR1Value+0x6>
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
    1b10:	9a 83       	std	Y+2, r25	; 0x02
    1b12:	89 83       	std	Y+1, r24	; 0x01
    ICR1 = Copy_u16Value;
    1b14:	e6 e4       	ldi	r30, 0x46	; 70
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
    1b1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1c:	91 83       	std	Z+1, r25	; 0x01
    1b1e:	80 83       	st	Z, r24
}
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	cf 91       	pop	r28
    1b26:	df 91       	pop	r29
    1b28:	08 95       	ret

00001b2a <Timer1_voidOVFInterruptEnable>:

void Timer1_voidOVFInterruptEnable(void)
{
    1b2a:	df 93       	push	r29
    1b2c:	cf 93       	push	r28
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TOIE1);
    1b32:	a9 e5       	ldi	r26, 0x59	; 89
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e9 e5       	ldi	r30, 0x59	; 89
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	84 60       	ori	r24, 0x04	; 4
    1b3e:	8c 93       	st	X, r24
}
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <Timer1_voidOVFInterruptDisable>:

void Timer1_voidOVFInterruptDisable(void)
{
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, TOIE1);
    1b4e:	a9 e5       	ldi	r26, 0x59	; 89
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	e9 e5       	ldi	r30, 0x59	; 89
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	8b 7f       	andi	r24, 0xFB	; 251
    1b5a:	8c 93       	st	X, r24
}
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <Timer1_voidOC1AInterruptEnable>:

void Timer1_voidOC1AInterruptEnable(void)
{
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE1A);
    1b6a:	a9 e5       	ldi	r26, 0x59	; 89
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	e9 e5       	ldi	r30, 0x59	; 89
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	80 61       	ori	r24, 0x10	; 16
    1b76:	8c 93       	st	X, r24
}
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	08 95       	ret

00001b7e <Timer1_voidOC1AInterruptDisable>:

void Timer1_voidOC1AInterruptDisable(void)
{
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, OCIE1A);
    1b86:	a9 e5       	ldi	r26, 0x59	; 89
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e9 e5       	ldi	r30, 0x59	; 89
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	8f 7e       	andi	r24, 0xEF	; 239
    1b92:	8c 93       	st	X, r24
}
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <Timer1_voidOC1BInterruptEnable>:

void Timer1_voidOC1BInterruptEnable(void)
{
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE1B);
    1ba2:	a9 e5       	ldi	r26, 0x59	; 89
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e9 e5       	ldi	r30, 0x59	; 89
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	88 60       	ori	r24, 0x08	; 8
    1bae:	8c 93       	st	X, r24
}
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	08 95       	ret

00001bb6 <Timer1_voidOC1BInterruptDisable>:

void Timer1_voidOC1BInterruptDisable(void)
{
    1bb6:	df 93       	push	r29
    1bb8:	cf 93       	push	r28
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, OCIE1B);
    1bbe:	a9 e5       	ldi	r26, 0x59	; 89
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e9 e5       	ldi	r30, 0x59	; 89
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	87 7f       	andi	r24, 0xF7	; 247
    1bca:	8c 93       	st	X, r24
}
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <Timer1_voidOVFSetCallBack>:



void Timer1_voidOVFSetCallBack(void (*Copy_pfNotification)(void))
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <Timer1_voidOVFSetCallBack+0x6>
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	9a 83       	std	Y+2, r25	; 0x02
    1bde:	89 83       	std	Y+1, r24	; 0x01
    Timer_ptrFunc[0] = Copy_pfNotification;
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	9a 81       	ldd	r25, Y+2	; 0x02
    1be4:	90 93 77 00 	sts	0x0077, r25
    1be8:	80 93 76 00 	sts	0x0076, r24
}
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	cf 91       	pop	r28
    1bf2:	df 91       	pop	r29
    1bf4:	08 95       	ret

00001bf6 <Timer1_voidOC1ASetCallBack>:

void Timer1_voidOC1ASetCallBack(void (*Copy_pfNotification)(void))
{
    1bf6:	df 93       	push	r29
    1bf8:	cf 93       	push	r28
    1bfa:	00 d0       	rcall	.+0      	; 0x1bfc <Timer1_voidOC1ASetCallBack+0x6>
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	9a 83       	std	Y+2, r25	; 0x02
    1c02:	89 83       	std	Y+1, r24	; 0x01
    Timer_ptrFunc[1] = Copy_pfNotification;
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	9a 81       	ldd	r25, Y+2	; 0x02
    1c08:	90 93 79 00 	sts	0x0079, r25
    1c0c:	80 93 78 00 	sts	0x0078, r24
}
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	08 95       	ret

00001c1a <Timer1_voidOC1BSetCallBack>:

void Timer1_voidOC1BSetCallBack(void (*Copy_pfNotification)(void))
{
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <Timer1_voidOC1BSetCallBack+0x6>
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	9a 83       	std	Y+2, r25	; 0x02
    1c26:	89 83       	std	Y+1, r24	; 0x01
    Timer_ptrFunc[2] = Copy_pfNotification;
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
    1c2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2c:	90 93 7b 00 	sts	0x007B, r25
    1c30:	80 93 7a 00 	sts	0x007A, r24
}
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	cf 91       	pop	r28
    1c3a:	df 91       	pop	r29
    1c3c:	08 95       	ret

00001c3e <Timer1_voidICUSetCallBack>:


void Timer1_voidICUSetCallBack(void (*Copy_pfNotification)(void))
{
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	00 d0       	rcall	.+0      	; 0x1c44 <Timer1_voidICUSetCallBack+0x6>
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
    1c48:	9a 83       	std	Y+2, r25	; 0x02
    1c4a:	89 83       	std	Y+1, r24	; 0x01
    Timer_ptrFunc[3] = Copy_pfNotification;
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c50:	90 93 7d 00 	sts	0x007D, r25
    1c54:	80 93 7c 00 	sts	0x007C, r24
}
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	08 95       	ret

00001c62 <Timer1_voidICUSetTriggerEdge>:

void Timer1_voidICUSetTriggerEdge(u8 Copy_u8Edge)
{
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	00 d0       	rcall	.+0      	; 0x1c68 <Timer1_voidICUSetTriggerEdge+0x6>
    1c68:	0f 92       	push	r0
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8Edge)
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	3b 83       	std	Y+3, r19	; 0x03
    1c78:	2a 83       	std	Y+2, r18	; 0x02
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	31 f0       	breq	.+12     	; 0x1c8e <Timer1_voidICUSetTriggerEdge+0x2c>
    1c82:	2a 81       	ldd	r18, Y+2	; 0x02
    1c84:	3b 81       	ldd	r19, Y+3	; 0x03
    1c86:	21 30       	cpi	r18, 0x01	; 1
    1c88:	31 05       	cpc	r19, r1
    1c8a:	49 f0       	breq	.+18     	; 0x1c9e <Timer1_voidICUSetTriggerEdge+0x3c>
    1c8c:	0f c0       	rjmp	.+30     	; 0x1cac <Timer1_voidICUSetTriggerEdge+0x4a>
    {
    case ICU_FALLING_EDGE:
        CLR_BIT(TCCR1B, ICES1);
    1c8e:	ae e4       	ldi	r26, 0x4E	; 78
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	ee e4       	ldi	r30, 0x4E	; 78
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	8f 7b       	andi	r24, 0xBF	; 191
    1c9a:	8c 93       	st	X, r24
    1c9c:	07 c0       	rjmp	.+14     	; 0x1cac <Timer1_voidICUSetTriggerEdge+0x4a>
        break;
    case ICU_RISING_EDGE:
        SET_BIT(TCCR1B, ICES1);
    1c9e:	ae e4       	ldi	r26, 0x4E	; 78
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	ee e4       	ldi	r30, 0x4E	; 78
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	80 64       	ori	r24, 0x40	; 64
    1caa:	8c 93       	st	X, r24
        break;
    
    default:
        break;
    }
}
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	08 95       	ret

00001cb8 <Timer1_u16ReadICR1Value>:


u16  Timer1_u16ReadICR1Value(void)
{
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    return ICR1;
    1cc0:	e6 e4       	ldi	r30, 0x46	; 70
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	91 81       	ldd	r25, Z+1	; 0x01
}
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <Timer1_voidICUInterruptEnable>:

void Timer1_voidICUInterruptEnable(void)
{
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TICIE1);
    1cd6:	a9 e5       	ldi	r26, 0x59	; 89
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e9 e5       	ldi	r30, 0x59	; 89
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	80 62       	ori	r24, 0x20	; 32
    1ce2:	8c 93       	st	X, r24
}
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	08 95       	ret

00001cea <Timer1_voidICUInterruptDisable>:

void Timer1_voidICUInterruptDisable(void)
{
    1cea:	df 93       	push	r29
    1cec:	cf 93       	push	r28
    1cee:	cd b7       	in	r28, 0x3d	; 61
    1cf0:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, TICIE1);
    1cf2:	a9 e5       	ldi	r26, 0x59	; 89
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e9 e5       	ldi	r30, 0x59	; 89
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	8f 7d       	andi	r24, 0xDF	; 223
    1cfe:	8c 93       	st	X, r24
}
    1d00:	cf 91       	pop	r28
    1d02:	df 91       	pop	r29
    1d04:	08 95       	ret

00001d06 <__vector_9>:


ISR(TIMER1_OVF_vect)
{
    1d06:	1f 92       	push	r1
    1d08:	0f 92       	push	r0
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	0f 92       	push	r0
    1d0e:	11 24       	eor	r1, r1
    1d10:	2f 93       	push	r18
    1d12:	3f 93       	push	r19
    1d14:	4f 93       	push	r20
    1d16:	5f 93       	push	r21
    1d18:	6f 93       	push	r22
    1d1a:	7f 93       	push	r23
    1d1c:	8f 93       	push	r24
    1d1e:	9f 93       	push	r25
    1d20:	af 93       	push	r26
    1d22:	bf 93       	push	r27
    1d24:	ef 93       	push	r30
    1d26:	ff 93       	push	r31
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    if(Timer_ptrFunc[0] != NULL)
    1d30:	80 91 76 00 	lds	r24, 0x0076
    1d34:	90 91 77 00 	lds	r25, 0x0077
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	29 f0       	breq	.+10     	; 0x1d46 <__vector_9+0x40>
    {
        Timer_ptrFunc[0]();
    1d3c:	e0 91 76 00 	lds	r30, 0x0076
    1d40:	f0 91 77 00 	lds	r31, 0x0077
    1d44:	09 95       	icall
    }
}
    1d46:	cf 91       	pop	r28
    1d48:	df 91       	pop	r29
    1d4a:	ff 91       	pop	r31
    1d4c:	ef 91       	pop	r30
    1d4e:	bf 91       	pop	r27
    1d50:	af 91       	pop	r26
    1d52:	9f 91       	pop	r25
    1d54:	8f 91       	pop	r24
    1d56:	7f 91       	pop	r23
    1d58:	6f 91       	pop	r22
    1d5a:	5f 91       	pop	r21
    1d5c:	4f 91       	pop	r20
    1d5e:	3f 91       	pop	r19
    1d60:	2f 91       	pop	r18
    1d62:	0f 90       	pop	r0
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	0f 90       	pop	r0
    1d68:	1f 90       	pop	r1
    1d6a:	18 95       	reti

00001d6c <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1d6c:	1f 92       	push	r1
    1d6e:	0f 92       	push	r0
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	0f 92       	push	r0
    1d74:	11 24       	eor	r1, r1
    1d76:	2f 93       	push	r18
    1d78:	3f 93       	push	r19
    1d7a:	4f 93       	push	r20
    1d7c:	5f 93       	push	r21
    1d7e:	6f 93       	push	r22
    1d80:	7f 93       	push	r23
    1d82:	8f 93       	push	r24
    1d84:	9f 93       	push	r25
    1d86:	af 93       	push	r26
    1d88:	bf 93       	push	r27
    1d8a:	ef 93       	push	r30
    1d8c:	ff 93       	push	r31
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
    if(Timer_ptrFunc[1] != NULL)
    1d96:	80 91 78 00 	lds	r24, 0x0078
    1d9a:	90 91 79 00 	lds	r25, 0x0079
    1d9e:	00 97       	sbiw	r24, 0x00	; 0
    1da0:	29 f0       	breq	.+10     	; 0x1dac <__vector_7+0x40>
    {
        Timer_ptrFunc[1]();
    1da2:	e0 91 78 00 	lds	r30, 0x0078
    1da6:	f0 91 79 00 	lds	r31, 0x0079
    1daa:	09 95       	icall
    }
}
    1dac:	cf 91       	pop	r28
    1dae:	df 91       	pop	r29
    1db0:	ff 91       	pop	r31
    1db2:	ef 91       	pop	r30
    1db4:	bf 91       	pop	r27
    1db6:	af 91       	pop	r26
    1db8:	9f 91       	pop	r25
    1dba:	8f 91       	pop	r24
    1dbc:	7f 91       	pop	r23
    1dbe:	6f 91       	pop	r22
    1dc0:	5f 91       	pop	r21
    1dc2:	4f 91       	pop	r20
    1dc4:	3f 91       	pop	r19
    1dc6:	2f 91       	pop	r18
    1dc8:	0f 90       	pop	r0
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	0f 90       	pop	r0
    1dce:	1f 90       	pop	r1
    1dd0:	18 95       	reti

00001dd2 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
    1dd2:	1f 92       	push	r1
    1dd4:	0f 92       	push	r0
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	0f 92       	push	r0
    1dda:	11 24       	eor	r1, r1
    1ddc:	2f 93       	push	r18
    1dde:	3f 93       	push	r19
    1de0:	4f 93       	push	r20
    1de2:	5f 93       	push	r21
    1de4:	6f 93       	push	r22
    1de6:	7f 93       	push	r23
    1de8:	8f 93       	push	r24
    1dea:	9f 93       	push	r25
    1dec:	af 93       	push	r26
    1dee:	bf 93       	push	r27
    1df0:	ef 93       	push	r30
    1df2:	ff 93       	push	r31
    1df4:	df 93       	push	r29
    1df6:	cf 93       	push	r28
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    if(Timer_ptrFunc[2] != NULL)
    1dfc:	80 91 7a 00 	lds	r24, 0x007A
    1e00:	90 91 7b 00 	lds	r25, 0x007B
    1e04:	00 97       	sbiw	r24, 0x00	; 0
    1e06:	29 f0       	breq	.+10     	; 0x1e12 <__vector_8+0x40>
    {
        Timer_ptrFunc[2]();
    1e08:	e0 91 7a 00 	lds	r30, 0x007A
    1e0c:	f0 91 7b 00 	lds	r31, 0x007B
    1e10:	09 95       	icall
    }
}
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	ff 91       	pop	r31
    1e18:	ef 91       	pop	r30
    1e1a:	bf 91       	pop	r27
    1e1c:	af 91       	pop	r26
    1e1e:	9f 91       	pop	r25
    1e20:	8f 91       	pop	r24
    1e22:	7f 91       	pop	r23
    1e24:	6f 91       	pop	r22
    1e26:	5f 91       	pop	r21
    1e28:	4f 91       	pop	r20
    1e2a:	3f 91       	pop	r19
    1e2c:	2f 91       	pop	r18
    1e2e:	0f 90       	pop	r0
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	0f 90       	pop	r0
    1e34:	1f 90       	pop	r1
    1e36:	18 95       	reti

00001e38 <__vector_6>:

ISR(TIMER1_CAPT_vect)
{
    1e38:	1f 92       	push	r1
    1e3a:	0f 92       	push	r0
    1e3c:	0f b6       	in	r0, 0x3f	; 63
    1e3e:	0f 92       	push	r0
    1e40:	11 24       	eor	r1, r1
    1e42:	2f 93       	push	r18
    1e44:	3f 93       	push	r19
    1e46:	4f 93       	push	r20
    1e48:	5f 93       	push	r21
    1e4a:	6f 93       	push	r22
    1e4c:	7f 93       	push	r23
    1e4e:	8f 93       	push	r24
    1e50:	9f 93       	push	r25
    1e52:	af 93       	push	r26
    1e54:	bf 93       	push	r27
    1e56:	ef 93       	push	r30
    1e58:	ff 93       	push	r31
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    if(Timer_ptrFunc[3] != NULL)
    1e62:	80 91 7c 00 	lds	r24, 0x007C
    1e66:	90 91 7d 00 	lds	r25, 0x007D
    1e6a:	00 97       	sbiw	r24, 0x00	; 0
    1e6c:	29 f0       	breq	.+10     	; 0x1e78 <__vector_6+0x40>
    {
        Timer_ptrFunc[3]();
    1e6e:	e0 91 7c 00 	lds	r30, 0x007C
    1e72:	f0 91 7d 00 	lds	r31, 0x007D
    1e76:	09 95       	icall
    }
}
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	ff 91       	pop	r31
    1e7e:	ef 91       	pop	r30
    1e80:	bf 91       	pop	r27
    1e82:	af 91       	pop	r26
    1e84:	9f 91       	pop	r25
    1e86:	8f 91       	pop	r24
    1e88:	7f 91       	pop	r23
    1e8a:	6f 91       	pop	r22
    1e8c:	5f 91       	pop	r21
    1e8e:	4f 91       	pop	r20
    1e90:	3f 91       	pop	r19
    1e92:	2f 91       	pop	r18
    1e94:	0f 90       	pop	r0
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	0f 90       	pop	r0
    1e9a:	1f 90       	pop	r1
    1e9c:	18 95       	reti

00001e9e <TIMER0_voidInit>:

void (*TIMER0_PFvoidOVFCall) (void) = ((void *)0);
void (*TIMER0_PFvoidCTCCall) (void) = ((void *)0);

void TIMER0_voidInit (void)
{
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
	/*4- Enable CTC Interrupt*/
	SET_BIT (TIMSK , OCIE0);

#elif	TIMER0_MODE == TIMER0_FPWM_MODE
	/*1- Select Timer0 Mode ==> Fast PWM Mode*/
	SET_BIT (TCCR0 , WGM00);
    1ea6:	a3 e5       	ldi	r26, 0x53	; 83
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e3 e5       	ldi	r30, 0x53	; 83
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	80 64       	ori	r24, 0x40	; 64
    1eb2:	8c 93       	st	X, r24
	SET_BIT (TCCR0 , WGM01);
    1eb4:	a3 e5       	ldi	r26, 0x53	; 83
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e3 e5       	ldi	r30, 0x53	; 83
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	88 60       	ori	r24, 0x08	; 8
    1ec0:	8c 93       	st	X, r24
	/*2- Select OC0 Action */
	CLR_BIT (TCCR0 , COM00);
    1ec2:	a3 e5       	ldi	r26, 0x53	; 83
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e3 e5       	ldi	r30, 0x53	; 83
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	8f 7e       	andi	r24, 0xEF	; 239
    1ece:	8c 93       	st	X, r24
	SET_BIT (TCCR0 , COM01);
    1ed0:	a3 e5       	ldi	r26, 0x53	; 83
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	e3 e5       	ldi	r30, 0x53	; 83
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	80 62       	ori	r24, 0x20	; 32
    1edc:	8c 93       	st	X, r24
	/*2- Select Prescaler ==> /8*/
	CLR_BIT (TCCR0 , CS00);
    1ede:	a3 e5       	ldi	r26, 0x53	; 83
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e3 e5       	ldi	r30, 0x53	; 83
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	8e 7f       	andi	r24, 0xFE	; 254
    1eea:	8c 93       	st	X, r24
	SET_BIT (TCCR0 , CS01);
    1eec:	a3 e5       	ldi	r26, 0x53	; 83
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e3 e5       	ldi	r30, 0x53	; 83
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	82 60       	ori	r24, 0x02	; 2
    1ef8:	8c 93       	st	X, r24
	CLR_BIT (TCCR0 , CS02);
    1efa:	a3 e5       	ldi	r26, 0x53	; 83
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	e3 e5       	ldi	r30, 0x53	; 83
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	8b 7f       	andi	r24, 0xFB	; 251
    1f06:	8c 93       	st	X, r24
	SET_BIT (TCCR0 , CS01);
	CLR_BIT (TCCR0 , CS02);

#endif

}
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	08 95       	ret

00001f0e <TIMER0_voidSetCallBack>:

void TIMER0_voidSetCallBack (void (*Copy_PFvoidName) (void))
{
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <TIMER0_voidSetCallBack+0x6>
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	9a 83       	std	Y+2, r25	; 0x02
    1f1a:	89 83       	std	Y+1, r24	; 0x01
#if TIMER0_MODE == TIMER0_OVF_MODE
	TIMER0_PFvoidOVFCall = Copy_PFvoidName ;
#elif TIMER0_MODE == TIMER0_CTC_MODE
	TIMER0_PFvoidCTCCall = Copy_PFvoidName ;
#endif
}
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret

00001f26 <TIMER0_voidSetOCR0Value>:


void TIMER0_voidSetOCR0Value (u8 Copy_u8OCR0Value)
{
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	0f 92       	push	r0
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
    1f30:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8OCR0Value ;
    1f32:	ec e5       	ldi	r30, 0x5C	; 92
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	80 83       	st	Z, r24
}
    1f3a:	0f 90       	pop	r0
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	08 95       	ret

00001f42 <__vector_11>:


ISR(TIMER0_OVF_vect)
{
    1f42:	1f 92       	push	r1
    1f44:	0f 92       	push	r0
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	0f 92       	push	r0
    1f4a:	11 24       	eor	r1, r1
    1f4c:	2f 93       	push	r18
    1f4e:	3f 93       	push	r19
    1f50:	4f 93       	push	r20
    1f52:	5f 93       	push	r21
    1f54:	6f 93       	push	r22
    1f56:	7f 93       	push	r23
    1f58:	8f 93       	push	r24
    1f5a:	9f 93       	push	r25
    1f5c:	af 93       	push	r26
    1f5e:	bf 93       	push	r27
    1f60:	ef 93       	push	r30
    1f62:	ff 93       	push	r31
    1f64:	df 93       	push	r29
    1f66:	cf 93       	push	r28
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16OVFCounter = 0 ;
	Local_u16OVFCounter ++ ;
    1f6c:	80 91 82 00 	lds	r24, 0x0082
    1f70:	90 91 83 00 	lds	r25, 0x0083
    1f74:	01 96       	adiw	r24, 0x01	; 1
    1f76:	90 93 83 00 	sts	0x0083, r25
    1f7a:	80 93 82 00 	sts	0x0082, r24
	if (Local_u16OVFCounter == 3907)
    1f7e:	80 91 82 00 	lds	r24, 0x0082
    1f82:	90 91 83 00 	lds	r25, 0x0083
    1f86:	2f e0       	ldi	r18, 0x0F	; 15
    1f88:	83 34       	cpi	r24, 0x43	; 67
    1f8a:	92 07       	cpc	r25, r18
    1f8c:	69 f4       	brne	.+26     	; 0x1fa8 <__vector_11+0x66>
	{
		/*Set Preload Value ==> 192*/
		TCNT0 = 192 ;
    1f8e:	e2 e5       	ldi	r30, 0x52	; 82
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 ec       	ldi	r24, 0xC0	; 192
    1f94:	80 83       	st	Z, r24
		/*Clear Counter */ 
		Local_u16OVFCounter = 0 ;
    1f96:	10 92 83 00 	sts	0x0083, r1
    1f9a:	10 92 82 00 	sts	0x0082, r1
		/*Action*/
		TIMER0_PFvoidOVFCall();
    1f9e:	e0 91 7e 00 	lds	r30, 0x007E
    1fa2:	f0 91 7f 00 	lds	r31, 0x007F
    1fa6:	09 95       	icall
	}
}
    1fa8:	cf 91       	pop	r28
    1faa:	df 91       	pop	r29
    1fac:	ff 91       	pop	r31
    1fae:	ef 91       	pop	r30
    1fb0:	bf 91       	pop	r27
    1fb2:	af 91       	pop	r26
    1fb4:	9f 91       	pop	r25
    1fb6:	8f 91       	pop	r24
    1fb8:	7f 91       	pop	r23
    1fba:	6f 91       	pop	r22
    1fbc:	5f 91       	pop	r21
    1fbe:	4f 91       	pop	r20
    1fc0:	3f 91       	pop	r19
    1fc2:	2f 91       	pop	r18
    1fc4:	0f 90       	pop	r0
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	0f 90       	pop	r0
    1fca:	1f 90       	pop	r1
    1fcc:	18 95       	reti

00001fce <__vector_10>:


ISR(TIMER0_COMP_vect)
{
    1fce:	1f 92       	push	r1
    1fd0:	0f 92       	push	r0
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	0f 92       	push	r0
    1fd6:	11 24       	eor	r1, r1
    1fd8:	2f 93       	push	r18
    1fda:	3f 93       	push	r19
    1fdc:	4f 93       	push	r20
    1fde:	5f 93       	push	r21
    1fe0:	6f 93       	push	r22
    1fe2:	7f 93       	push	r23
    1fe4:	8f 93       	push	r24
    1fe6:	9f 93       	push	r25
    1fe8:	af 93       	push	r26
    1fea:	bf 93       	push	r27
    1fec:	ef 93       	push	r30
    1fee:	ff 93       	push	r31
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CTCCounter = 0 ;
	Local_u16CTCCounter ++ ;
    1ff8:	80 91 84 00 	lds	r24, 0x0084
    1ffc:	90 91 85 00 	lds	r25, 0x0085
    2000:	01 96       	adiw	r24, 0x01	; 1
    2002:	90 93 85 00 	sts	0x0085, r25
    2006:	80 93 84 00 	sts	0x0084, r24
	if (Local_u16CTCCounter == 10000)
    200a:	80 91 84 00 	lds	r24, 0x0084
    200e:	90 91 85 00 	lds	r25, 0x0085
    2012:	27 e2       	ldi	r18, 0x27	; 39
    2014:	80 31       	cpi	r24, 0x10	; 16
    2016:	92 07       	cpc	r25, r18
    2018:	49 f4       	brne	.+18     	; 0x202c <__vector_10+0x5e>
	{
		/*Action*/
		TIMER0_PFvoidCTCCall();
    201a:	e0 91 80 00 	lds	r30, 0x0080
    201e:	f0 91 81 00 	lds	r31, 0x0081
    2022:	09 95       	icall
		/*Clear Counter*/
		Local_u16CTCCounter = 0 ;
    2024:	10 92 85 00 	sts	0x0085, r1
    2028:	10 92 84 00 	sts	0x0084, r1
	}
}
    202c:	cf 91       	pop	r28
    202e:	df 91       	pop	r29
    2030:	ff 91       	pop	r31
    2032:	ef 91       	pop	r30
    2034:	bf 91       	pop	r27
    2036:	af 91       	pop	r26
    2038:	9f 91       	pop	r25
    203a:	8f 91       	pop	r24
    203c:	7f 91       	pop	r23
    203e:	6f 91       	pop	r22
    2040:	5f 91       	pop	r21
    2042:	4f 91       	pop	r20
    2044:	3f 91       	pop	r19
    2046:	2f 91       	pop	r18
    2048:	0f 90       	pop	r0
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	0f 90       	pop	r0
    204e:	1f 90       	pop	r1
    2050:	18 95       	reti

00002052 <ADC_voidInit>:
#include "../01-DIO/DIO.h"
#include "ADC.h"


void ADC_voidInit (void)
{
    2052:	df 93       	push	r29
    2054:	cf 93       	push	r28
    2056:	cd b7       	in	r28, 0x3d	; 61
    2058:	de b7       	in	r29, 0x3e	; 62
	/*Enable ADC*/
	SET_BIT(ADCSRA , ADEN);
    205a:	a6 e2       	ldi	r26, 0x26	; 38
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e6 e2       	ldi	r30, 0x26	; 38
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	80 68       	ori	r24, 0x80	; 128
    2066:	8c 93       	st	X, r24
	
	/*Select V Rer ==> AVCC = 5V */
	SET_BIT (ADMUX , REFS0);
    2068:	a7 e2       	ldi	r26, 0x27	; 39
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	e7 e2       	ldi	r30, 0x27	; 39
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	80 64       	ori	r24, 0x40	; 64
    2074:	8c 93       	st	X, r24
	CLR_BIT (ADMUX , REFS1);
    2076:	a7 e2       	ldi	r26, 0x27	; 39
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	e7 e2       	ldi	r30, 0x27	; 39
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	8f 77       	andi	r24, 0x7F	; 127
    2082:	8c 93       	st	X, r24
	
	/*Right Adjust*/
	CLR_BIT (ADMUX , ADLAR);
    2084:	a7 e2       	ldi	r26, 0x27	; 39
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	e7 e2       	ldi	r30, 0x27	; 39
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	8f 7d       	andi	r24, 0xDF	; 223
    2090:	8c 93       	st	X, r24
	
	/*Disable Auto Trig*/
	CLR_BIT (ADCSRA , ADATE);
    2092:	a6 e2       	ldi	r26, 0x26	; 38
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	e6 e2       	ldi	r30, 0x26	; 38
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	8f 7d       	andi	r24, 0xDF	; 223
    209e:	8c 93       	st	X, r24
	
	/*Select Prescaler*/
	CLR_BIT (ADCSRA , ADPS0);
    20a0:	a6 e2       	ldi	r26, 0x26	; 38
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e6 e2       	ldi	r30, 0x26	; 38
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	8e 7f       	andi	r24, 0xFE	; 254
    20ac:	8c 93       	st	X, r24
	SET_BIT (ADCSRA , ADPS1);
    20ae:	a6 e2       	ldi	r26, 0x26	; 38
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	e6 e2       	ldi	r30, 0x26	; 38
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	82 60       	ori	r24, 0x02	; 2
    20ba:	8c 93       	st	X, r24
	SET_BIT (ADCSRA , ADPS2);
    20bc:	a6 e2       	ldi	r26, 0x26	; 38
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	e6 e2       	ldi	r30, 0x26	; 38
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	80 81       	ld	r24, Z
    20c6:	84 60       	ori	r24, 0x04	; 4
    20c8:	8c 93       	st	X, r24
}
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	08 95       	ret

000020d0 <ADC_u16GetDigitalValue>:
u16  ADC_u16GetDigitalValue (u8 Copy_u8ChannelNum)
{
    20d0:	df 93       	push	r29
    20d2:	cf 93       	push	r28
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <ADC_u16GetDigitalValue+0x6>
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
    20da:	89 83       	std	Y+1, r24	; 0x01
	/*Select Channel*/
	ADMUX &= ADC_CHANNEL_RESET ;
    20dc:	a7 e2       	ldi	r26, 0x27	; 39
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e7 e2       	ldi	r30, 0x27	; 39
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	80 7e       	andi	r24, 0xE0	; 224
    20e8:	8c 93       	st	X, r24
	ADMUX |= Copy_u8ChannelNum ;
    20ea:	a7 e2       	ldi	r26, 0x27	; 39
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e7 e2       	ldi	r30, 0x27	; 39
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	90 81       	ld	r25, Z
    20f4:	89 81       	ldd	r24, Y+1	; 0x01
    20f6:	89 2b       	or	r24, r25
    20f8:	8c 93       	st	X, r24
	
	/*Start Conversion*/
	SET_BIT (ADCSRA , ADSC);
    20fa:	a6 e2       	ldi	r26, 0x26	; 38
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e6 e2       	ldi	r30, 0x26	; 38
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	80 64       	ori	r24, 0x40	; 64
    2106:	8c 93       	st	X, r24
	
	/*wait flag = 1*/
	while (GET_BIT(ADCSRA , ADIF) == 0);
    2108:	e6 e2       	ldi	r30, 0x26	; 38
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
	
	/*Clear flag*/
	SET_BIT (ADCSRA , ADIF);
    210e:	a6 e2       	ldi	r26, 0x26	; 38
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	e6 e2       	ldi	r30, 0x26	; 38
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	80 61       	ori	r24, 0x10	; 16
    211a:	8c 93       	st	X, r24
	
	/*Read the digital value*/
	return ADC_REG ;
    211c:	e4 e2       	ldi	r30, 0x24	; 36
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	91 81       	ldd	r25, Z+1	; 0x01
}
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	08 95       	ret

0000212e <INT_voidEnable>:
#include "INT.h"

static void (*INT_voidPFCall[3]) (void) = {0} ;

void INT_voidEnable (u8 Copy_u8INTIndex , u8 Copy_u8Edge)
{
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
    2136:	2a 97       	sbiw	r28, 0x0a	; 10
    2138:	0f b6       	in	r0, 0x3f	; 63
    213a:	f8 94       	cli
    213c:	de bf       	out	0x3e, r29	; 62
    213e:	0f be       	out	0x3f, r0	; 63
    2140:	cd bf       	out	0x3d, r28	; 61
    2142:	89 83       	std	Y+1, r24	; 0x01
    2144:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8INTIndex)
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	28 2f       	mov	r18, r24
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	3a 87       	std	Y+10, r19	; 0x0a
    214e:	29 87       	std	Y+9, r18	; 0x09
    2150:	89 85       	ldd	r24, Y+9	; 0x09
    2152:	9a 85       	ldd	r25, Y+10	; 0x0a
    2154:	81 30       	cpi	r24, 0x01	; 1
    2156:	91 05       	cpc	r25, r1
    2158:	09 f4       	brne	.+2      	; 0x215c <INT_voidEnable+0x2e>
    215a:	6d c0       	rjmp	.+218    	; 0x2236 <INT_voidEnable+0x108>
    215c:	29 85       	ldd	r18, Y+9	; 0x09
    215e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2160:	22 30       	cpi	r18, 0x02	; 2
    2162:	31 05       	cpc	r19, r1
    2164:	09 f4       	brne	.+2      	; 0x2168 <INT_voidEnable+0x3a>
    2166:	c9 c0       	rjmp	.+402    	; 0x22fa <INT_voidEnable+0x1cc>
    2168:	89 85       	ldd	r24, Y+9	; 0x09
    216a:	9a 85       	ldd	r25, Y+10	; 0x0a
    216c:	00 97       	sbiw	r24, 0x00	; 0
    216e:	09 f0       	breq	.+2      	; 0x2172 <INT_voidEnable+0x44>
    2170:	e9 c0       	rjmp	.+466    	; 0x2344 <INT_voidEnable+0x216>
	{
		case EXT_INT0 :
			/*Edge Select*/
			switch (Copy_u8Edge)
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	28 2f       	mov	r18, r24
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	38 87       	std	Y+8, r19	; 0x08
    217a:	2f 83       	std	Y+7, r18	; 0x07
    217c:	8f 81       	ldd	r24, Y+7	; 0x07
    217e:	98 85       	ldd	r25, Y+8	; 0x08
    2180:	81 30       	cpi	r24, 0x01	; 1
    2182:	91 05       	cpc	r25, r1
    2184:	21 f1       	breq	.+72     	; 0x21ce <INT_voidEnable+0xa0>
    2186:	2f 81       	ldd	r18, Y+7	; 0x07
    2188:	38 85       	ldd	r19, Y+8	; 0x08
    218a:	22 30       	cpi	r18, 0x02	; 2
    218c:	31 05       	cpc	r19, r1
    218e:	2c f4       	brge	.+10     	; 0x219a <INT_voidEnable+0x6c>
    2190:	8f 81       	ldd	r24, Y+7	; 0x07
    2192:	98 85       	ldd	r25, Y+8	; 0x08
    2194:	00 97       	sbiw	r24, 0x00	; 0
    2196:	61 f0       	breq	.+24     	; 0x21b0 <INT_voidEnable+0x82>
    2198:	46 c0       	rjmp	.+140    	; 0x2226 <INT_voidEnable+0xf8>
    219a:	2f 81       	ldd	r18, Y+7	; 0x07
    219c:	38 85       	ldd	r19, Y+8	; 0x08
    219e:	22 30       	cpi	r18, 0x02	; 2
    21a0:	31 05       	cpc	r19, r1
    21a2:	21 f1       	breq	.+72     	; 0x21ec <INT_voidEnable+0xbe>
    21a4:	8f 81       	ldd	r24, Y+7	; 0x07
    21a6:	98 85       	ldd	r25, Y+8	; 0x08
    21a8:	83 30       	cpi	r24, 0x03	; 3
    21aa:	91 05       	cpc	r25, r1
    21ac:	71 f1       	breq	.+92     	; 0x220a <INT_voidEnable+0xdc>
    21ae:	3b c0       	rjmp	.+118    	; 0x2226 <INT_voidEnable+0xf8>
			{
				case INT_FALLING_EDGE 		: 
					CLR_BIT (MCUCR , ISC00);
    21b0:	a5 e5       	ldi	r26, 0x55	; 85
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e5 e5       	ldi	r30, 0x55	; 85
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	8e 7f       	andi	r24, 0xFE	; 254
    21bc:	8c 93       	st	X, r24
					SET_BIT (MCUCR , ISC01);
    21be:	a5 e5       	ldi	r26, 0x55	; 85
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	e5 e5       	ldi	r30, 0x55	; 85
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	82 60       	ori	r24, 0x02	; 2
    21ca:	8c 93       	st	X, r24
    21cc:	2c c0       	rjmp	.+88     	; 0x2226 <INT_voidEnable+0xf8>
					break ;
				case INT_RISING_EDGE  		:
					SET_BIT (MCUCR , ISC00);
    21ce:	a5 e5       	ldi	r26, 0x55	; 85
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	e5 e5       	ldi	r30, 0x55	; 85
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	81 60       	ori	r24, 0x01	; 1
    21da:	8c 93       	st	X, r24
					SET_BIT (MCUCR , ISC01);
    21dc:	a5 e5       	ldi	r26, 0x55	; 85
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	e5 e5       	ldi	r30, 0x55	; 85
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	82 60       	ori	r24, 0x02	; 2
    21e8:	8c 93       	st	X, r24
    21ea:	1d c0       	rjmp	.+58     	; 0x2226 <INT_voidEnable+0xf8>
					break ;
				case INT_ANY_LOGICAL_CHANGE :
					SET_BIT (MCUCR , ISC00);
    21ec:	a5 e5       	ldi	r26, 0x55	; 85
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	e5 e5       	ldi	r30, 0x55	; 85
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	81 60       	ori	r24, 0x01	; 1
    21f8:	8c 93       	st	X, r24
					CLR_BIT (MCUCR , ISC01);
    21fa:	a5 e5       	ldi	r26, 0x55	; 85
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	e5 e5       	ldi	r30, 0x55	; 85
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
    2204:	8d 7f       	andi	r24, 0xFD	; 253
    2206:	8c 93       	st	X, r24
    2208:	0e c0       	rjmp	.+28     	; 0x2226 <INT_voidEnable+0xf8>
					break ;
				case INT_LOW_LEVEL 			:
					CLR_BIT (MCUCR , ISC00);
    220a:	a5 e5       	ldi	r26, 0x55	; 85
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	e5 e5       	ldi	r30, 0x55	; 85
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	8e 7f       	andi	r24, 0xFE	; 254
    2216:	8c 93       	st	X, r24
					CLR_BIT (MCUCR , ISC01);
    2218:	a5 e5       	ldi	r26, 0x55	; 85
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	e5 e5       	ldi	r30, 0x55	; 85
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	8d 7f       	andi	r24, 0xFD	; 253
    2224:	8c 93       	st	X, r24
					break ;
			}
			/*INT0 Enable*/
			SET_BIT (GICR , INT0);
    2226:	ab e5       	ldi	r26, 0x5B	; 91
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	eb e5       	ldi	r30, 0x5B	; 91
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	80 64       	ori	r24, 0x40	; 64
    2232:	8c 93       	st	X, r24
    2234:	87 c0       	rjmp	.+270    	; 0x2344 <INT_voidEnable+0x216>
			break ;
		case EXT_INT1 :
			/*Edge Select*/
			switch (Copy_u8Edge)
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	28 2f       	mov	r18, r24
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	3e 83       	std	Y+6, r19	; 0x06
    223e:	2d 83       	std	Y+5, r18	; 0x05
    2240:	8d 81       	ldd	r24, Y+5	; 0x05
    2242:	9e 81       	ldd	r25, Y+6	; 0x06
    2244:	81 30       	cpi	r24, 0x01	; 1
    2246:	91 05       	cpc	r25, r1
    2248:	21 f1       	breq	.+72     	; 0x2292 <INT_voidEnable+0x164>
    224a:	2d 81       	ldd	r18, Y+5	; 0x05
    224c:	3e 81       	ldd	r19, Y+6	; 0x06
    224e:	22 30       	cpi	r18, 0x02	; 2
    2250:	31 05       	cpc	r19, r1
    2252:	2c f4       	brge	.+10     	; 0x225e <INT_voidEnable+0x130>
    2254:	8d 81       	ldd	r24, Y+5	; 0x05
    2256:	9e 81       	ldd	r25, Y+6	; 0x06
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	61 f0       	breq	.+24     	; 0x2274 <INT_voidEnable+0x146>
    225c:	46 c0       	rjmp	.+140    	; 0x22ea <INT_voidEnable+0x1bc>
    225e:	2d 81       	ldd	r18, Y+5	; 0x05
    2260:	3e 81       	ldd	r19, Y+6	; 0x06
    2262:	22 30       	cpi	r18, 0x02	; 2
    2264:	31 05       	cpc	r19, r1
    2266:	21 f1       	breq	.+72     	; 0x22b0 <INT_voidEnable+0x182>
    2268:	8d 81       	ldd	r24, Y+5	; 0x05
    226a:	9e 81       	ldd	r25, Y+6	; 0x06
    226c:	83 30       	cpi	r24, 0x03	; 3
    226e:	91 05       	cpc	r25, r1
    2270:	71 f1       	breq	.+92     	; 0x22ce <INT_voidEnable+0x1a0>
    2272:	3b c0       	rjmp	.+118    	; 0x22ea <INT_voidEnable+0x1bc>
			{
				case INT_FALLING_EDGE 		: 
					CLR_BIT (MCUCR , ISC10);
    2274:	a5 e5       	ldi	r26, 0x55	; 85
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e5 e5       	ldi	r30, 0x55	; 85
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	8b 7f       	andi	r24, 0xFB	; 251
    2280:	8c 93       	st	X, r24
					SET_BIT (MCUCR , ISC11);
    2282:	a5 e5       	ldi	r26, 0x55	; 85
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	e5 e5       	ldi	r30, 0x55	; 85
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	88 60       	ori	r24, 0x08	; 8
    228e:	8c 93       	st	X, r24
    2290:	2c c0       	rjmp	.+88     	; 0x22ea <INT_voidEnable+0x1bc>
					break ;
				case INT_RISING_EDGE  		:
					SET_BIT (MCUCR , ISC10);
    2292:	a5 e5       	ldi	r26, 0x55	; 85
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e5 e5       	ldi	r30, 0x55	; 85
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	84 60       	ori	r24, 0x04	; 4
    229e:	8c 93       	st	X, r24
					SET_BIT (MCUCR , ISC11);
    22a0:	a5 e5       	ldi	r26, 0x55	; 85
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	e5 e5       	ldi	r30, 0x55	; 85
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	88 60       	ori	r24, 0x08	; 8
    22ac:	8c 93       	st	X, r24
    22ae:	1d c0       	rjmp	.+58     	; 0x22ea <INT_voidEnable+0x1bc>
					break ;
				case INT_ANY_LOGICAL_CHANGE :
					SET_BIT (MCUCR , ISC10);
    22b0:	a5 e5       	ldi	r26, 0x55	; 85
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	e5 e5       	ldi	r30, 0x55	; 85
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	84 60       	ori	r24, 0x04	; 4
    22bc:	8c 93       	st	X, r24
					CLR_BIT (MCUCR , ISC11);
    22be:	a5 e5       	ldi	r26, 0x55	; 85
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e5 e5       	ldi	r30, 0x55	; 85
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	87 7f       	andi	r24, 0xF7	; 247
    22ca:	8c 93       	st	X, r24
    22cc:	0e c0       	rjmp	.+28     	; 0x22ea <INT_voidEnable+0x1bc>
					break ;
				case INT_LOW_LEVEL 			:
					CLR_BIT (MCUCR , ISC10);
    22ce:	a5 e5       	ldi	r26, 0x55	; 85
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	e5 e5       	ldi	r30, 0x55	; 85
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	8b 7f       	andi	r24, 0xFB	; 251
    22da:	8c 93       	st	X, r24
					CLR_BIT (MCUCR , ISC11);
    22dc:	a5 e5       	ldi	r26, 0x55	; 85
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	e5 e5       	ldi	r30, 0x55	; 85
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	87 7f       	andi	r24, 0xF7	; 247
    22e8:	8c 93       	st	X, r24
					break ;
			}
			/*INT1 Enable*/
			SET_BIT (GICR , INT1);
    22ea:	ab e5       	ldi	r26, 0x5B	; 91
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	eb e5       	ldi	r30, 0x5B	; 91
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	80 68       	ori	r24, 0x80	; 128
    22f6:	8c 93       	st	X, r24
    22f8:	25 c0       	rjmp	.+74     	; 0x2344 <INT_voidEnable+0x216>
			break ;
		case EXT_INT2 :
			/*Edge Select*/
			switch (Copy_u8Edge)
    22fa:	8a 81       	ldd	r24, Y+2	; 0x02
    22fc:	28 2f       	mov	r18, r24
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	3c 83       	std	Y+4, r19	; 0x04
    2302:	2b 83       	std	Y+3, r18	; 0x03
    2304:	8b 81       	ldd	r24, Y+3	; 0x03
    2306:	9c 81       	ldd	r25, Y+4	; 0x04
    2308:	00 97       	sbiw	r24, 0x00	; 0
    230a:	31 f0       	breq	.+12     	; 0x2318 <INT_voidEnable+0x1ea>
    230c:	2b 81       	ldd	r18, Y+3	; 0x03
    230e:	3c 81       	ldd	r19, Y+4	; 0x04
    2310:	21 30       	cpi	r18, 0x01	; 1
    2312:	31 05       	cpc	r19, r1
    2314:	49 f0       	breq	.+18     	; 0x2328 <INT_voidEnable+0x1fa>
    2316:	0f c0       	rjmp	.+30     	; 0x2336 <INT_voidEnable+0x208>
			{
			case INT_FALLING_EDGE 		: 
				CLR_BIT(MCUCSR , ISC2);
    2318:	a4 e5       	ldi	r26, 0x54	; 84
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	e4 e5       	ldi	r30, 0x54	; 84
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	8f 7b       	andi	r24, 0xBF	; 191
    2324:	8c 93       	st	X, r24
    2326:	07 c0       	rjmp	.+14     	; 0x2336 <INT_voidEnable+0x208>
				break ;
			case INT_RISING_EDGE  		:
				SET_BIT(MCUCSR , ISC2);
    2328:	a4 e5       	ldi	r26, 0x54	; 84
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	e4 e5       	ldi	r30, 0x54	; 84
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	80 64       	ori	r24, 0x40	; 64
    2334:	8c 93       	st	X, r24
				break ;
			}
			/*INT2 Enable*/
			SET_BIT(GICR , INT2);
    2336:	ab e5       	ldi	r26, 0x5B	; 91
    2338:	b0 e0       	ldi	r27, 0x00	; 0
    233a:	eb e5       	ldi	r30, 0x5B	; 91
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	80 62       	ori	r24, 0x20	; 32
    2342:	8c 93       	st	X, r24
			break ;
	}
}
    2344:	2a 96       	adiw	r28, 0x0a	; 10
    2346:	0f b6       	in	r0, 0x3f	; 63
    2348:	f8 94       	cli
    234a:	de bf       	out	0x3e, r29	; 62
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	cd bf       	out	0x3d, r28	; 61
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	08 95       	ret

00002356 <INT_voidDisable>:


void INT_voidDisable (u8 Copy_u8INTIndex)
{
    2356:	df 93       	push	r29
    2358:	cf 93       	push	r28
    235a:	00 d0       	rcall	.+0      	; 0x235c <INT_voidDisable+0x6>
    235c:	0f 92       	push	r0
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
    2362:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8INTIndex)
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	28 2f       	mov	r18, r24
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	3b 83       	std	Y+3, r19	; 0x03
    236c:	2a 83       	std	Y+2, r18	; 0x02
    236e:	8a 81       	ldd	r24, Y+2	; 0x02
    2370:	9b 81       	ldd	r25, Y+3	; 0x03
    2372:	81 30       	cpi	r24, 0x01	; 1
    2374:	91 05       	cpc	r25, r1
    2376:	89 f0       	breq	.+34     	; 0x239a <INT_voidDisable+0x44>
    2378:	2a 81       	ldd	r18, Y+2	; 0x02
    237a:	3b 81       	ldd	r19, Y+3	; 0x03
    237c:	22 30       	cpi	r18, 0x02	; 2
    237e:	31 05       	cpc	r19, r1
    2380:	a1 f0       	breq	.+40     	; 0x23aa <INT_voidDisable+0x54>
    2382:	8a 81       	ldd	r24, Y+2	; 0x02
    2384:	9b 81       	ldd	r25, Y+3	; 0x03
    2386:	00 97       	sbiw	r24, 0x00	; 0
    2388:	b9 f4       	brne	.+46     	; 0x23b8 <INT_voidDisable+0x62>
	{
		case EXT_INT0 :  CLR_BIT (GICR , INT0) ; break ;
    238a:	ab e5       	ldi	r26, 0x5B	; 91
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	eb e5       	ldi	r30, 0x5B	; 91
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	8f 7b       	andi	r24, 0xBF	; 191
    2396:	8c 93       	st	X, r24
    2398:	0f c0       	rjmp	.+30     	; 0x23b8 <INT_voidDisable+0x62>
		case EXT_INT1 :  CLR_BIT (GICR , INT1) ; break ;
    239a:	ab e5       	ldi	r26, 0x5B	; 91
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	eb e5       	ldi	r30, 0x5B	; 91
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	8f 77       	andi	r24, 0x7F	; 127
    23a6:	8c 93       	st	X, r24
    23a8:	07 c0       	rjmp	.+14     	; 0x23b8 <INT_voidDisable+0x62>
		case EXT_INT2 :  CLR_BIT (GICR , INT2) ; break ;
    23aa:	ab e5       	ldi	r26, 0x5B	; 91
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	eb e5       	ldi	r30, 0x5B	; 91
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	8f 7d       	andi	r24, 0xDF	; 223
    23b6:	8c 93       	st	X, r24
		
	}
}
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	08 95       	ret

000023c4 <INT_voidSetCallBack>:

void INT_voidSetCallBack (u8 Copy_u8Index , void (*Copy_voidPFNameFunc) (void))
{
    23c4:	df 93       	push	r29
    23c6:	cf 93       	push	r28
    23c8:	00 d0       	rcall	.+0      	; 0x23ca <INT_voidSetCallBack+0x6>
    23ca:	0f 92       	push	r0
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	89 83       	std	Y+1, r24	; 0x01
    23d2:	7b 83       	std	Y+3, r23	; 0x03
    23d4:	6a 83       	std	Y+2, r22	; 0x02
	INT_voidPFCall[Copy_u8Index] = Copy_voidPFNameFunc ;
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	88 2f       	mov	r24, r24
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	fc 01       	movw	r30, r24
    23e2:	ea 57       	subi	r30, 0x7A	; 122
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	8a 81       	ldd	r24, Y+2	; 0x02
    23e8:	9b 81       	ldd	r25, Y+3	; 0x03
    23ea:	91 83       	std	Z+1, r25	; 0x01
    23ec:	80 83       	st	Z, r24
}
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	cf 91       	pop	r28
    23f6:	df 91       	pop	r29
    23f8:	08 95       	ret

000023fa <__vector_1>:

ISR(INT0_vect)
{
    23fa:	1f 92       	push	r1
    23fc:	0f 92       	push	r0
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	0f 92       	push	r0
    2402:	11 24       	eor	r1, r1
    2404:	2f 93       	push	r18
    2406:	3f 93       	push	r19
    2408:	4f 93       	push	r20
    240a:	5f 93       	push	r21
    240c:	6f 93       	push	r22
    240e:	7f 93       	push	r23
    2410:	8f 93       	push	r24
    2412:	9f 93       	push	r25
    2414:	af 93       	push	r26
    2416:	bf 93       	push	r27
    2418:	ef 93       	push	r30
    241a:	ff 93       	push	r31
    241c:	df 93       	push	r29
    241e:	cf 93       	push	r28
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
	if (INT_voidPFCall[0] != NULL)
    2424:	80 91 86 00 	lds	r24, 0x0086
    2428:	90 91 87 00 	lds	r25, 0x0087
    242c:	00 97       	sbiw	r24, 0x00	; 0
    242e:	29 f0       	breq	.+10     	; 0x243a <__vector_1+0x40>
	INT_voidPFCall[0]();
    2430:	e0 91 86 00 	lds	r30, 0x0086
    2434:	f0 91 87 00 	lds	r31, 0x0087
    2438:	09 95       	icall
}
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	ff 91       	pop	r31
    2440:	ef 91       	pop	r30
    2442:	bf 91       	pop	r27
    2444:	af 91       	pop	r26
    2446:	9f 91       	pop	r25
    2448:	8f 91       	pop	r24
    244a:	7f 91       	pop	r23
    244c:	6f 91       	pop	r22
    244e:	5f 91       	pop	r21
    2450:	4f 91       	pop	r20
    2452:	3f 91       	pop	r19
    2454:	2f 91       	pop	r18
    2456:	0f 90       	pop	r0
    2458:	0f be       	out	0x3f, r0	; 63
    245a:	0f 90       	pop	r0
    245c:	1f 90       	pop	r1
    245e:	18 95       	reti

00002460 <__vector_2>:

ISR(INT1_vect)
{
    2460:	1f 92       	push	r1
    2462:	0f 92       	push	r0
    2464:	0f b6       	in	r0, 0x3f	; 63
    2466:	0f 92       	push	r0
    2468:	11 24       	eor	r1, r1
    246a:	2f 93       	push	r18
    246c:	3f 93       	push	r19
    246e:	4f 93       	push	r20
    2470:	5f 93       	push	r21
    2472:	6f 93       	push	r22
    2474:	7f 93       	push	r23
    2476:	8f 93       	push	r24
    2478:	9f 93       	push	r25
    247a:	af 93       	push	r26
    247c:	bf 93       	push	r27
    247e:	ef 93       	push	r30
    2480:	ff 93       	push	r31
    2482:	df 93       	push	r29
    2484:	cf 93       	push	r28
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
	if (INT_voidPFCall[1] != NULL)
    248a:	80 91 88 00 	lds	r24, 0x0088
    248e:	90 91 89 00 	lds	r25, 0x0089
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	29 f0       	breq	.+10     	; 0x24a0 <__vector_2+0x40>
	INT_voidPFCall[1]();
    2496:	e0 91 88 00 	lds	r30, 0x0088
    249a:	f0 91 89 00 	lds	r31, 0x0089
    249e:	09 95       	icall
}
    24a0:	cf 91       	pop	r28
    24a2:	df 91       	pop	r29
    24a4:	ff 91       	pop	r31
    24a6:	ef 91       	pop	r30
    24a8:	bf 91       	pop	r27
    24aa:	af 91       	pop	r26
    24ac:	9f 91       	pop	r25
    24ae:	8f 91       	pop	r24
    24b0:	7f 91       	pop	r23
    24b2:	6f 91       	pop	r22
    24b4:	5f 91       	pop	r21
    24b6:	4f 91       	pop	r20
    24b8:	3f 91       	pop	r19
    24ba:	2f 91       	pop	r18
    24bc:	0f 90       	pop	r0
    24be:	0f be       	out	0x3f, r0	; 63
    24c0:	0f 90       	pop	r0
    24c2:	1f 90       	pop	r1
    24c4:	18 95       	reti

000024c6 <__vector_3>:
ISR(INT2_vect)
{
    24c6:	1f 92       	push	r1
    24c8:	0f 92       	push	r0
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	0f 92       	push	r0
    24ce:	11 24       	eor	r1, r1
    24d0:	2f 93       	push	r18
    24d2:	3f 93       	push	r19
    24d4:	4f 93       	push	r20
    24d6:	5f 93       	push	r21
    24d8:	6f 93       	push	r22
    24da:	7f 93       	push	r23
    24dc:	8f 93       	push	r24
    24de:	9f 93       	push	r25
    24e0:	af 93       	push	r26
    24e2:	bf 93       	push	r27
    24e4:	ef 93       	push	r30
    24e6:	ff 93       	push	r31
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
	if (INT_voidPFCall[2] != NULL)
    24f0:	80 91 8a 00 	lds	r24, 0x008A
    24f4:	90 91 8b 00 	lds	r25, 0x008B
    24f8:	00 97       	sbiw	r24, 0x00	; 0
    24fa:	29 f0       	breq	.+10     	; 0x2506 <__vector_3+0x40>
	INT_voidPFCall[2]();
    24fc:	e0 91 8a 00 	lds	r30, 0x008A
    2500:	f0 91 8b 00 	lds	r31, 0x008B
    2504:	09 95       	icall
}
    2506:	cf 91       	pop	r28
    2508:	df 91       	pop	r29
    250a:	ff 91       	pop	r31
    250c:	ef 91       	pop	r30
    250e:	bf 91       	pop	r27
    2510:	af 91       	pop	r26
    2512:	9f 91       	pop	r25
    2514:	8f 91       	pop	r24
    2516:	7f 91       	pop	r23
    2518:	6f 91       	pop	r22
    251a:	5f 91       	pop	r21
    251c:	4f 91       	pop	r20
    251e:	3f 91       	pop	r19
    2520:	2f 91       	pop	r18
    2522:	0f 90       	pop	r0
    2524:	0f be       	out	0x3f, r0	; 63
    2526:	0f 90       	pop	r0
    2528:	1f 90       	pop	r1
    252a:	18 95       	reti

0000252c <DIO_voidSetPinDirection>:
#include "../../01-LIB/BIT_MATH.h"

#include "DIO.h"

void DIO_voidSetPinDirection (u8 Copy_u8Port , u8 Copy_u8Pin  , u8 Copy_u8Direction)
{
    252c:	df 93       	push	r29
    252e:	cf 93       	push	r28
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
    2534:	27 97       	sbiw	r28, 0x07	; 7
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	de bf       	out	0x3e, r29	; 62
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	cd bf       	out	0x3d, r28	; 61
    2540:	89 83       	std	Y+1, r24	; 0x01
    2542:	6a 83       	std	Y+2, r22	; 0x02
    2544:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Direction == DIO_OUTPUT)
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	81 30       	cpi	r24, 0x01	; 1
    254a:	09 f0       	breq	.+2      	; 0x254e <DIO_voidSetPinDirection+0x22>
    254c:	6f c0       	rjmp	.+222    	; 0x262c <DIO_voidSetPinDirection+0x100>
	{
		switch (Copy_u8Port)
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	28 2f       	mov	r18, r24
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	3f 83       	std	Y+7, r19	; 0x07
    2556:	2e 83       	std	Y+6, r18	; 0x06
    2558:	8e 81       	ldd	r24, Y+6	; 0x06
    255a:	9f 81       	ldd	r25, Y+7	; 0x07
    255c:	81 30       	cpi	r24, 0x01	; 1
    255e:	91 05       	cpc	r25, r1
    2560:	49 f1       	breq	.+82     	; 0x25b4 <DIO_voidSetPinDirection+0x88>
    2562:	2e 81       	ldd	r18, Y+6	; 0x06
    2564:	3f 81       	ldd	r19, Y+7	; 0x07
    2566:	22 30       	cpi	r18, 0x02	; 2
    2568:	31 05       	cpc	r19, r1
    256a:	2c f4       	brge	.+10     	; 0x2576 <DIO_voidSetPinDirection+0x4a>
    256c:	8e 81       	ldd	r24, Y+6	; 0x06
    256e:	9f 81       	ldd	r25, Y+7	; 0x07
    2570:	00 97       	sbiw	r24, 0x00	; 0
    2572:	61 f0       	breq	.+24     	; 0x258c <DIO_voidSetPinDirection+0x60>
    2574:	d2 c0       	rjmp	.+420    	; 0x271a <DIO_voidSetPinDirection+0x1ee>
    2576:	2e 81       	ldd	r18, Y+6	; 0x06
    2578:	3f 81       	ldd	r19, Y+7	; 0x07
    257a:	22 30       	cpi	r18, 0x02	; 2
    257c:	31 05       	cpc	r19, r1
    257e:	71 f1       	breq	.+92     	; 0x25dc <DIO_voidSetPinDirection+0xb0>
    2580:	8e 81       	ldd	r24, Y+6	; 0x06
    2582:	9f 81       	ldd	r25, Y+7	; 0x07
    2584:	83 30       	cpi	r24, 0x03	; 3
    2586:	91 05       	cpc	r25, r1
    2588:	e9 f1       	breq	.+122    	; 0x2604 <DIO_voidSetPinDirection+0xd8>
    258a:	c7 c0       	rjmp	.+398    	; 0x271a <DIO_voidSetPinDirection+0x1ee>
		{
			case DIO_PORTA : SET_BIT(DDRA , Copy_u8Pin); break ;
    258c:	aa e3       	ldi	r26, 0x3A	; 58
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	ea e3       	ldi	r30, 0x3A	; 58
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	48 2f       	mov	r20, r24
    2598:	8a 81       	ldd	r24, Y+2	; 0x02
    259a:	28 2f       	mov	r18, r24
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	02 2e       	mov	r0, r18
    25a4:	02 c0       	rjmp	.+4      	; 0x25aa <DIO_voidSetPinDirection+0x7e>
    25a6:	88 0f       	add	r24, r24
    25a8:	99 1f       	adc	r25, r25
    25aa:	0a 94       	dec	r0
    25ac:	e2 f7       	brpl	.-8      	; 0x25a6 <DIO_voidSetPinDirection+0x7a>
    25ae:	84 2b       	or	r24, r20
    25b0:	8c 93       	st	X, r24
    25b2:	b3 c0       	rjmp	.+358    	; 0x271a <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTB : SET_BIT(DDRB , Copy_u8Pin); break ;
    25b4:	a7 e3       	ldi	r26, 0x37	; 55
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	e7 e3       	ldi	r30, 0x37	; 55
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	48 2f       	mov	r20, r24
    25c0:	8a 81       	ldd	r24, Y+2	; 0x02
    25c2:	28 2f       	mov	r18, r24
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	02 2e       	mov	r0, r18
    25cc:	02 c0       	rjmp	.+4      	; 0x25d2 <DIO_voidSetPinDirection+0xa6>
    25ce:	88 0f       	add	r24, r24
    25d0:	99 1f       	adc	r25, r25
    25d2:	0a 94       	dec	r0
    25d4:	e2 f7       	brpl	.-8      	; 0x25ce <DIO_voidSetPinDirection+0xa2>
    25d6:	84 2b       	or	r24, r20
    25d8:	8c 93       	st	X, r24
    25da:	9f c0       	rjmp	.+318    	; 0x271a <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTC : SET_BIT(DDRC , Copy_u8Pin); break ;
    25dc:	a4 e3       	ldi	r26, 0x34	; 52
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	e4 e3       	ldi	r30, 0x34	; 52
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	80 81       	ld	r24, Z
    25e6:	48 2f       	mov	r20, r24
    25e8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ea:	28 2f       	mov	r18, r24
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	02 2e       	mov	r0, r18
    25f4:	02 c0       	rjmp	.+4      	; 0x25fa <DIO_voidSetPinDirection+0xce>
    25f6:	88 0f       	add	r24, r24
    25f8:	99 1f       	adc	r25, r25
    25fa:	0a 94       	dec	r0
    25fc:	e2 f7       	brpl	.-8      	; 0x25f6 <DIO_voidSetPinDirection+0xca>
    25fe:	84 2b       	or	r24, r20
    2600:	8c 93       	st	X, r24
    2602:	8b c0       	rjmp	.+278    	; 0x271a <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTD : SET_BIT(DDRD , Copy_u8Pin); break ;
    2604:	a1 e3       	ldi	r26, 0x31	; 49
    2606:	b0 e0       	ldi	r27, 0x00	; 0
    2608:	e1 e3       	ldi	r30, 0x31	; 49
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	80 81       	ld	r24, Z
    260e:	48 2f       	mov	r20, r24
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	28 2f       	mov	r18, r24
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	02 2e       	mov	r0, r18
    261c:	02 c0       	rjmp	.+4      	; 0x2622 <DIO_voidSetPinDirection+0xf6>
    261e:	88 0f       	add	r24, r24
    2620:	99 1f       	adc	r25, r25
    2622:	0a 94       	dec	r0
    2624:	e2 f7       	brpl	.-8      	; 0x261e <DIO_voidSetPinDirection+0xf2>
    2626:	84 2b       	or	r24, r20
    2628:	8c 93       	st	X, r24
    262a:	77 c0       	rjmp	.+238    	; 0x271a <DIO_voidSetPinDirection+0x1ee>
		}
	}
	else if (Copy_u8Direction == DIO_INPUT)
    262c:	8b 81       	ldd	r24, Y+3	; 0x03
    262e:	88 23       	and	r24, r24
    2630:	09 f0       	breq	.+2      	; 0x2634 <DIO_voidSetPinDirection+0x108>
    2632:	73 c0       	rjmp	.+230    	; 0x271a <DIO_voidSetPinDirection+0x1ee>
	{
		switch (Copy_u8Port)
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	28 2f       	mov	r18, r24
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	3d 83       	std	Y+5, r19	; 0x05
    263c:	2c 83       	std	Y+4, r18	; 0x04
    263e:	8c 81       	ldd	r24, Y+4	; 0x04
    2640:	9d 81       	ldd	r25, Y+5	; 0x05
    2642:	81 30       	cpi	r24, 0x01	; 1
    2644:	91 05       	cpc	r25, r1
    2646:	59 f1       	breq	.+86     	; 0x269e <DIO_voidSetPinDirection+0x172>
    2648:	2c 81       	ldd	r18, Y+4	; 0x04
    264a:	3d 81       	ldd	r19, Y+5	; 0x05
    264c:	22 30       	cpi	r18, 0x02	; 2
    264e:	31 05       	cpc	r19, r1
    2650:	2c f4       	brge	.+10     	; 0x265c <DIO_voidSetPinDirection+0x130>
    2652:	8c 81       	ldd	r24, Y+4	; 0x04
    2654:	9d 81       	ldd	r25, Y+5	; 0x05
    2656:	00 97       	sbiw	r24, 0x00	; 0
    2658:	69 f0       	breq	.+26     	; 0x2674 <DIO_voidSetPinDirection+0x148>
    265a:	5f c0       	rjmp	.+190    	; 0x271a <DIO_voidSetPinDirection+0x1ee>
    265c:	2c 81       	ldd	r18, Y+4	; 0x04
    265e:	3d 81       	ldd	r19, Y+5	; 0x05
    2660:	22 30       	cpi	r18, 0x02	; 2
    2662:	31 05       	cpc	r19, r1
    2664:	89 f1       	breq	.+98     	; 0x26c8 <DIO_voidSetPinDirection+0x19c>
    2666:	8c 81       	ldd	r24, Y+4	; 0x04
    2668:	9d 81       	ldd	r25, Y+5	; 0x05
    266a:	83 30       	cpi	r24, 0x03	; 3
    266c:	91 05       	cpc	r25, r1
    266e:	09 f4       	brne	.+2      	; 0x2672 <DIO_voidSetPinDirection+0x146>
    2670:	40 c0       	rjmp	.+128    	; 0x26f2 <DIO_voidSetPinDirection+0x1c6>
    2672:	53 c0       	rjmp	.+166    	; 0x271a <DIO_voidSetPinDirection+0x1ee>
		{
			case DIO_PORTA : CLR_BIT(DDRA , Copy_u8Pin); break ;
    2674:	aa e3       	ldi	r26, 0x3A	; 58
    2676:	b0 e0       	ldi	r27, 0x00	; 0
    2678:	ea e3       	ldi	r30, 0x3A	; 58
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	80 81       	ld	r24, Z
    267e:	48 2f       	mov	r20, r24
    2680:	8a 81       	ldd	r24, Y+2	; 0x02
    2682:	28 2f       	mov	r18, r24
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	02 2e       	mov	r0, r18
    268c:	02 c0       	rjmp	.+4      	; 0x2692 <DIO_voidSetPinDirection+0x166>
    268e:	88 0f       	add	r24, r24
    2690:	99 1f       	adc	r25, r25
    2692:	0a 94       	dec	r0
    2694:	e2 f7       	brpl	.-8      	; 0x268e <DIO_voidSetPinDirection+0x162>
    2696:	80 95       	com	r24
    2698:	84 23       	and	r24, r20
    269a:	8c 93       	st	X, r24
    269c:	3e c0       	rjmp	.+124    	; 0x271a <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTB : CLR_BIT(DDRB , Copy_u8Pin); break ;
    269e:	a7 e3       	ldi	r26, 0x37	; 55
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	e7 e3       	ldi	r30, 0x37	; 55
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	48 2f       	mov	r20, r24
    26aa:	8a 81       	ldd	r24, Y+2	; 0x02
    26ac:	28 2f       	mov	r18, r24
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	02 2e       	mov	r0, r18
    26b6:	02 c0       	rjmp	.+4      	; 0x26bc <DIO_voidSetPinDirection+0x190>
    26b8:	88 0f       	add	r24, r24
    26ba:	99 1f       	adc	r25, r25
    26bc:	0a 94       	dec	r0
    26be:	e2 f7       	brpl	.-8      	; 0x26b8 <DIO_voidSetPinDirection+0x18c>
    26c0:	80 95       	com	r24
    26c2:	84 23       	and	r24, r20
    26c4:	8c 93       	st	X, r24
    26c6:	29 c0       	rjmp	.+82     	; 0x271a <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTC : CLR_BIT(DDRC , Copy_u8Pin); break ;
    26c8:	a4 e3       	ldi	r26, 0x34	; 52
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	e4 e3       	ldi	r30, 0x34	; 52
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	48 2f       	mov	r20, r24
    26d4:	8a 81       	ldd	r24, Y+2	; 0x02
    26d6:	28 2f       	mov	r18, r24
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	02 2e       	mov	r0, r18
    26e0:	02 c0       	rjmp	.+4      	; 0x26e6 <DIO_voidSetPinDirection+0x1ba>
    26e2:	88 0f       	add	r24, r24
    26e4:	99 1f       	adc	r25, r25
    26e6:	0a 94       	dec	r0
    26e8:	e2 f7       	brpl	.-8      	; 0x26e2 <DIO_voidSetPinDirection+0x1b6>
    26ea:	80 95       	com	r24
    26ec:	84 23       	and	r24, r20
    26ee:	8c 93       	st	X, r24
    26f0:	14 c0       	rjmp	.+40     	; 0x271a <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTD : CLR_BIT(DDRD , Copy_u8Pin); break ;
    26f2:	a1 e3       	ldi	r26, 0x31	; 49
    26f4:	b0 e0       	ldi	r27, 0x00	; 0
    26f6:	e1 e3       	ldi	r30, 0x31	; 49
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	80 81       	ld	r24, Z
    26fc:	48 2f       	mov	r20, r24
    26fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2700:	28 2f       	mov	r18, r24
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	02 2e       	mov	r0, r18
    270a:	02 c0       	rjmp	.+4      	; 0x2710 <DIO_voidSetPinDirection+0x1e4>
    270c:	88 0f       	add	r24, r24
    270e:	99 1f       	adc	r25, r25
    2710:	0a 94       	dec	r0
    2712:	e2 f7       	brpl	.-8      	; 0x270c <DIO_voidSetPinDirection+0x1e0>
    2714:	80 95       	com	r24
    2716:	84 23       	and	r24, r20
    2718:	8c 93       	st	X, r24
		}
	}
	
}
    271a:	27 96       	adiw	r28, 0x07	; 7
    271c:	0f b6       	in	r0, 0x3f	; 63
    271e:	f8 94       	cli
    2720:	de bf       	out	0x3e, r29	; 62
    2722:	0f be       	out	0x3f, r0	; 63
    2724:	cd bf       	out	0x3d, r28	; 61
    2726:	cf 91       	pop	r28
    2728:	df 91       	pop	r29
    272a:	08 95       	ret

0000272c <DIO_voidSetPinValue>:

void DIO_voidSetPinValue (u8 Copy_u8Port , u8 Copy_u8Pin  , u8 Copy_u8State)
{
    272c:	df 93       	push	r29
    272e:	cf 93       	push	r28
    2730:	cd b7       	in	r28, 0x3d	; 61
    2732:	de b7       	in	r29, 0x3e	; 62
    2734:	27 97       	sbiw	r28, 0x07	; 7
    2736:	0f b6       	in	r0, 0x3f	; 63
    2738:	f8 94       	cli
    273a:	de bf       	out	0x3e, r29	; 62
    273c:	0f be       	out	0x3f, r0	; 63
    273e:	cd bf       	out	0x3d, r28	; 61
    2740:	89 83       	std	Y+1, r24	; 0x01
    2742:	6a 83       	std	Y+2, r22	; 0x02
    2744:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8State == DIO_HIGH)
    2746:	8b 81       	ldd	r24, Y+3	; 0x03
    2748:	81 30       	cpi	r24, 0x01	; 1
    274a:	09 f0       	breq	.+2      	; 0x274e <DIO_voidSetPinValue+0x22>
    274c:	6f c0       	rjmp	.+222    	; 0x282c <DIO_voidSetPinValue+0x100>
	{
		switch (Copy_u8Port)
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	28 2f       	mov	r18, r24
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	3f 83       	std	Y+7, r19	; 0x07
    2756:	2e 83       	std	Y+6, r18	; 0x06
    2758:	8e 81       	ldd	r24, Y+6	; 0x06
    275a:	9f 81       	ldd	r25, Y+7	; 0x07
    275c:	81 30       	cpi	r24, 0x01	; 1
    275e:	91 05       	cpc	r25, r1
    2760:	49 f1       	breq	.+82     	; 0x27b4 <DIO_voidSetPinValue+0x88>
    2762:	2e 81       	ldd	r18, Y+6	; 0x06
    2764:	3f 81       	ldd	r19, Y+7	; 0x07
    2766:	22 30       	cpi	r18, 0x02	; 2
    2768:	31 05       	cpc	r19, r1
    276a:	2c f4       	brge	.+10     	; 0x2776 <DIO_voidSetPinValue+0x4a>
    276c:	8e 81       	ldd	r24, Y+6	; 0x06
    276e:	9f 81       	ldd	r25, Y+7	; 0x07
    2770:	00 97       	sbiw	r24, 0x00	; 0
    2772:	61 f0       	breq	.+24     	; 0x278c <DIO_voidSetPinValue+0x60>
    2774:	d2 c0       	rjmp	.+420    	; 0x291a <DIO_voidSetPinValue+0x1ee>
    2776:	2e 81       	ldd	r18, Y+6	; 0x06
    2778:	3f 81       	ldd	r19, Y+7	; 0x07
    277a:	22 30       	cpi	r18, 0x02	; 2
    277c:	31 05       	cpc	r19, r1
    277e:	71 f1       	breq	.+92     	; 0x27dc <DIO_voidSetPinValue+0xb0>
    2780:	8e 81       	ldd	r24, Y+6	; 0x06
    2782:	9f 81       	ldd	r25, Y+7	; 0x07
    2784:	83 30       	cpi	r24, 0x03	; 3
    2786:	91 05       	cpc	r25, r1
    2788:	e9 f1       	breq	.+122    	; 0x2804 <DIO_voidSetPinValue+0xd8>
    278a:	c7 c0       	rjmp	.+398    	; 0x291a <DIO_voidSetPinValue+0x1ee>
		{
			case DIO_PORTA : SET_BIT(PORTA , Copy_u8Pin); break ;
    278c:	ab e3       	ldi	r26, 0x3B	; 59
    278e:	b0 e0       	ldi	r27, 0x00	; 0
    2790:	eb e3       	ldi	r30, 0x3B	; 59
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	48 2f       	mov	r20, r24
    2798:	8a 81       	ldd	r24, Y+2	; 0x02
    279a:	28 2f       	mov	r18, r24
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	02 2e       	mov	r0, r18
    27a4:	02 c0       	rjmp	.+4      	; 0x27aa <DIO_voidSetPinValue+0x7e>
    27a6:	88 0f       	add	r24, r24
    27a8:	99 1f       	adc	r25, r25
    27aa:	0a 94       	dec	r0
    27ac:	e2 f7       	brpl	.-8      	; 0x27a6 <DIO_voidSetPinValue+0x7a>
    27ae:	84 2b       	or	r24, r20
    27b0:	8c 93       	st	X, r24
    27b2:	b3 c0       	rjmp	.+358    	; 0x291a <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTB : SET_BIT(PORTB , Copy_u8Pin); break ;
    27b4:	a8 e3       	ldi	r26, 0x38	; 56
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	e8 e3       	ldi	r30, 0x38	; 56
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	48 2f       	mov	r20, r24
    27c0:	8a 81       	ldd	r24, Y+2	; 0x02
    27c2:	28 2f       	mov	r18, r24
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	02 2e       	mov	r0, r18
    27cc:	02 c0       	rjmp	.+4      	; 0x27d2 <DIO_voidSetPinValue+0xa6>
    27ce:	88 0f       	add	r24, r24
    27d0:	99 1f       	adc	r25, r25
    27d2:	0a 94       	dec	r0
    27d4:	e2 f7       	brpl	.-8      	; 0x27ce <DIO_voidSetPinValue+0xa2>
    27d6:	84 2b       	or	r24, r20
    27d8:	8c 93       	st	X, r24
    27da:	9f c0       	rjmp	.+318    	; 0x291a <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTC : SET_BIT(PORTC , Copy_u8Pin); break ;
    27dc:	a5 e3       	ldi	r26, 0x35	; 53
    27de:	b0 e0       	ldi	r27, 0x00	; 0
    27e0:	e5 e3       	ldi	r30, 0x35	; 53
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	80 81       	ld	r24, Z
    27e6:	48 2f       	mov	r20, r24
    27e8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ea:	28 2f       	mov	r18, r24
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	02 2e       	mov	r0, r18
    27f4:	02 c0       	rjmp	.+4      	; 0x27fa <DIO_voidSetPinValue+0xce>
    27f6:	88 0f       	add	r24, r24
    27f8:	99 1f       	adc	r25, r25
    27fa:	0a 94       	dec	r0
    27fc:	e2 f7       	brpl	.-8      	; 0x27f6 <DIO_voidSetPinValue+0xca>
    27fe:	84 2b       	or	r24, r20
    2800:	8c 93       	st	X, r24
    2802:	8b c0       	rjmp	.+278    	; 0x291a <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTD : SET_BIT(PORTD , Copy_u8Pin); break ;
    2804:	a2 e3       	ldi	r26, 0x32	; 50
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	e2 e3       	ldi	r30, 0x32	; 50
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	80 81       	ld	r24, Z
    280e:	48 2f       	mov	r20, r24
    2810:	8a 81       	ldd	r24, Y+2	; 0x02
    2812:	28 2f       	mov	r18, r24
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	02 2e       	mov	r0, r18
    281c:	02 c0       	rjmp	.+4      	; 0x2822 <DIO_voidSetPinValue+0xf6>
    281e:	88 0f       	add	r24, r24
    2820:	99 1f       	adc	r25, r25
    2822:	0a 94       	dec	r0
    2824:	e2 f7       	brpl	.-8      	; 0x281e <DIO_voidSetPinValue+0xf2>
    2826:	84 2b       	or	r24, r20
    2828:	8c 93       	st	X, r24
    282a:	77 c0       	rjmp	.+238    	; 0x291a <DIO_voidSetPinValue+0x1ee>
		}
	}
	else if (Copy_u8State == DIO_LOW)
    282c:	8b 81       	ldd	r24, Y+3	; 0x03
    282e:	88 23       	and	r24, r24
    2830:	09 f0       	breq	.+2      	; 0x2834 <DIO_voidSetPinValue+0x108>
    2832:	73 c0       	rjmp	.+230    	; 0x291a <DIO_voidSetPinValue+0x1ee>
	{
		switch (Copy_u8Port)
    2834:	89 81       	ldd	r24, Y+1	; 0x01
    2836:	28 2f       	mov	r18, r24
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	3d 83       	std	Y+5, r19	; 0x05
    283c:	2c 83       	std	Y+4, r18	; 0x04
    283e:	8c 81       	ldd	r24, Y+4	; 0x04
    2840:	9d 81       	ldd	r25, Y+5	; 0x05
    2842:	81 30       	cpi	r24, 0x01	; 1
    2844:	91 05       	cpc	r25, r1
    2846:	59 f1       	breq	.+86     	; 0x289e <DIO_voidSetPinValue+0x172>
    2848:	2c 81       	ldd	r18, Y+4	; 0x04
    284a:	3d 81       	ldd	r19, Y+5	; 0x05
    284c:	22 30       	cpi	r18, 0x02	; 2
    284e:	31 05       	cpc	r19, r1
    2850:	2c f4       	brge	.+10     	; 0x285c <DIO_voidSetPinValue+0x130>
    2852:	8c 81       	ldd	r24, Y+4	; 0x04
    2854:	9d 81       	ldd	r25, Y+5	; 0x05
    2856:	00 97       	sbiw	r24, 0x00	; 0
    2858:	69 f0       	breq	.+26     	; 0x2874 <DIO_voidSetPinValue+0x148>
    285a:	5f c0       	rjmp	.+190    	; 0x291a <DIO_voidSetPinValue+0x1ee>
    285c:	2c 81       	ldd	r18, Y+4	; 0x04
    285e:	3d 81       	ldd	r19, Y+5	; 0x05
    2860:	22 30       	cpi	r18, 0x02	; 2
    2862:	31 05       	cpc	r19, r1
    2864:	89 f1       	breq	.+98     	; 0x28c8 <DIO_voidSetPinValue+0x19c>
    2866:	8c 81       	ldd	r24, Y+4	; 0x04
    2868:	9d 81       	ldd	r25, Y+5	; 0x05
    286a:	83 30       	cpi	r24, 0x03	; 3
    286c:	91 05       	cpc	r25, r1
    286e:	09 f4       	brne	.+2      	; 0x2872 <DIO_voidSetPinValue+0x146>
    2870:	40 c0       	rjmp	.+128    	; 0x28f2 <DIO_voidSetPinValue+0x1c6>
    2872:	53 c0       	rjmp	.+166    	; 0x291a <DIO_voidSetPinValue+0x1ee>
		{
			case DIO_PORTA : CLR_BIT(PORTA , Copy_u8Pin); break ;
    2874:	ab e3       	ldi	r26, 0x3B	; 59
    2876:	b0 e0       	ldi	r27, 0x00	; 0
    2878:	eb e3       	ldi	r30, 0x3B	; 59
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	80 81       	ld	r24, Z
    287e:	48 2f       	mov	r20, r24
    2880:	8a 81       	ldd	r24, Y+2	; 0x02
    2882:	28 2f       	mov	r18, r24
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	02 2e       	mov	r0, r18
    288c:	02 c0       	rjmp	.+4      	; 0x2892 <DIO_voidSetPinValue+0x166>
    288e:	88 0f       	add	r24, r24
    2890:	99 1f       	adc	r25, r25
    2892:	0a 94       	dec	r0
    2894:	e2 f7       	brpl	.-8      	; 0x288e <DIO_voidSetPinValue+0x162>
    2896:	80 95       	com	r24
    2898:	84 23       	and	r24, r20
    289a:	8c 93       	st	X, r24
    289c:	3e c0       	rjmp	.+124    	; 0x291a <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTB : CLR_BIT(PORTB , Copy_u8Pin); break ;
    289e:	a8 e3       	ldi	r26, 0x38	; 56
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	e8 e3       	ldi	r30, 0x38	; 56
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	48 2f       	mov	r20, r24
    28aa:	8a 81       	ldd	r24, Y+2	; 0x02
    28ac:	28 2f       	mov	r18, r24
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	02 2e       	mov	r0, r18
    28b6:	02 c0       	rjmp	.+4      	; 0x28bc <DIO_voidSetPinValue+0x190>
    28b8:	88 0f       	add	r24, r24
    28ba:	99 1f       	adc	r25, r25
    28bc:	0a 94       	dec	r0
    28be:	e2 f7       	brpl	.-8      	; 0x28b8 <DIO_voidSetPinValue+0x18c>
    28c0:	80 95       	com	r24
    28c2:	84 23       	and	r24, r20
    28c4:	8c 93       	st	X, r24
    28c6:	29 c0       	rjmp	.+82     	; 0x291a <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTC : CLR_BIT(PORTC , Copy_u8Pin); break ;
    28c8:	a5 e3       	ldi	r26, 0x35	; 53
    28ca:	b0 e0       	ldi	r27, 0x00	; 0
    28cc:	e5 e3       	ldi	r30, 0x35	; 53
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	80 81       	ld	r24, Z
    28d2:	48 2f       	mov	r20, r24
    28d4:	8a 81       	ldd	r24, Y+2	; 0x02
    28d6:	28 2f       	mov	r18, r24
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	02 2e       	mov	r0, r18
    28e0:	02 c0       	rjmp	.+4      	; 0x28e6 <DIO_voidSetPinValue+0x1ba>
    28e2:	88 0f       	add	r24, r24
    28e4:	99 1f       	adc	r25, r25
    28e6:	0a 94       	dec	r0
    28e8:	e2 f7       	brpl	.-8      	; 0x28e2 <DIO_voidSetPinValue+0x1b6>
    28ea:	80 95       	com	r24
    28ec:	84 23       	and	r24, r20
    28ee:	8c 93       	st	X, r24
    28f0:	14 c0       	rjmp	.+40     	; 0x291a <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTD : CLR_BIT(PORTD , Copy_u8Pin); break ;
    28f2:	a2 e3       	ldi	r26, 0x32	; 50
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	e2 e3       	ldi	r30, 0x32	; 50
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	80 81       	ld	r24, Z
    28fc:	48 2f       	mov	r20, r24
    28fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2900:	28 2f       	mov	r18, r24
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	02 2e       	mov	r0, r18
    290a:	02 c0       	rjmp	.+4      	; 0x2910 <DIO_voidSetPinValue+0x1e4>
    290c:	88 0f       	add	r24, r24
    290e:	99 1f       	adc	r25, r25
    2910:	0a 94       	dec	r0
    2912:	e2 f7       	brpl	.-8      	; 0x290c <DIO_voidSetPinValue+0x1e0>
    2914:	80 95       	com	r24
    2916:	84 23       	and	r24, r20
    2918:	8c 93       	st	X, r24
		}
	}
}
    291a:	27 96       	adiw	r28, 0x07	; 7
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	cd bf       	out	0x3d, r28	; 61
    2926:	cf 91       	pop	r28
    2928:	df 91       	pop	r29
    292a:	08 95       	ret

0000292c <DIO_u8GetPinValue>:

u8 	 DIO_u8GetPinValue (u8 Copy_u8Port , u8 Copy_u8Pin)
{
    292c:	df 93       	push	r29
    292e:	cf 93       	push	r28
    2930:	00 d0       	rcall	.+0      	; 0x2932 <DIO_u8GetPinValue+0x6>
    2932:	00 d0       	rcall	.+0      	; 0x2934 <DIO_u8GetPinValue+0x8>
    2934:	00 d0       	rcall	.+0      	; 0x2936 <DIO_u8GetPinValue+0xa>
    2936:	cd b7       	in	r28, 0x3d	; 61
    2938:	de b7       	in	r29, 0x3e	; 62
    293a:	89 83       	std	Y+1, r24	; 0x01
    293c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    293e:	89 81       	ldd	r24, Y+1	; 0x01
    2940:	28 2f       	mov	r18, r24
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	3d 83       	std	Y+5, r19	; 0x05
    2946:	2c 83       	std	Y+4, r18	; 0x04
    2948:	4c 81       	ldd	r20, Y+4	; 0x04
    294a:	5d 81       	ldd	r21, Y+5	; 0x05
    294c:	41 30       	cpi	r20, 0x01	; 1
    294e:	51 05       	cpc	r21, r1
    2950:	49 f1       	breq	.+82     	; 0x29a4 <DIO_u8GetPinValue+0x78>
    2952:	8c 81       	ldd	r24, Y+4	; 0x04
    2954:	9d 81       	ldd	r25, Y+5	; 0x05
    2956:	82 30       	cpi	r24, 0x02	; 2
    2958:	91 05       	cpc	r25, r1
    295a:	34 f4       	brge	.+12     	; 0x2968 <DIO_u8GetPinValue+0x3c>
    295c:	2c 81       	ldd	r18, Y+4	; 0x04
    295e:	3d 81       	ldd	r19, Y+5	; 0x05
    2960:	21 15       	cp	r18, r1
    2962:	31 05       	cpc	r19, r1
    2964:	61 f0       	breq	.+24     	; 0x297e <DIO_u8GetPinValue+0x52>
    2966:	57 c0       	rjmp	.+174    	; 0x2a16 <DIO_u8GetPinValue+0xea>
    2968:	4c 81       	ldd	r20, Y+4	; 0x04
    296a:	5d 81       	ldd	r21, Y+5	; 0x05
    296c:	42 30       	cpi	r20, 0x02	; 2
    296e:	51 05       	cpc	r21, r1
    2970:	61 f1       	breq	.+88     	; 0x29ca <DIO_u8GetPinValue+0x9e>
    2972:	8c 81       	ldd	r24, Y+4	; 0x04
    2974:	9d 81       	ldd	r25, Y+5	; 0x05
    2976:	83 30       	cpi	r24, 0x03	; 3
    2978:	91 05       	cpc	r25, r1
    297a:	d1 f1       	breq	.+116    	; 0x29f0 <DIO_u8GetPinValue+0xc4>
    297c:	4c c0       	rjmp	.+152    	; 0x2a16 <DIO_u8GetPinValue+0xea>
	{
		case DIO_PORTA : return GET_BIT(PINA , Copy_u8Pin);
    297e:	e9 e3       	ldi	r30, 0x39	; 57
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	80 81       	ld	r24, Z
    2984:	28 2f       	mov	r18, r24
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	8a 81       	ldd	r24, Y+2	; 0x02
    298a:	88 2f       	mov	r24, r24
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	a9 01       	movw	r20, r18
    2990:	02 c0       	rjmp	.+4      	; 0x2996 <DIO_u8GetPinValue+0x6a>
    2992:	55 95       	asr	r21
    2994:	47 95       	ror	r20
    2996:	8a 95       	dec	r24
    2998:	e2 f7       	brpl	.-8      	; 0x2992 <DIO_u8GetPinValue+0x66>
    299a:	ca 01       	movw	r24, r20
    299c:	58 2f       	mov	r21, r24
    299e:	51 70       	andi	r21, 0x01	; 1
    29a0:	5b 83       	std	Y+3, r21	; 0x03
    29a2:	3a c0       	rjmp	.+116    	; 0x2a18 <DIO_u8GetPinValue+0xec>
		case DIO_PORTB : return GET_BIT(PINB , Copy_u8Pin);
    29a4:	e6 e3       	ldi	r30, 0x36	; 54
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	80 81       	ld	r24, Z
    29aa:	28 2f       	mov	r18, r24
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	8a 81       	ldd	r24, Y+2	; 0x02
    29b0:	88 2f       	mov	r24, r24
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	a9 01       	movw	r20, r18
    29b6:	02 c0       	rjmp	.+4      	; 0x29bc <DIO_u8GetPinValue+0x90>
    29b8:	55 95       	asr	r21
    29ba:	47 95       	ror	r20
    29bc:	8a 95       	dec	r24
    29be:	e2 f7       	brpl	.-8      	; 0x29b8 <DIO_u8GetPinValue+0x8c>
    29c0:	ca 01       	movw	r24, r20
    29c2:	58 2f       	mov	r21, r24
    29c4:	51 70       	andi	r21, 0x01	; 1
    29c6:	5b 83       	std	Y+3, r21	; 0x03
    29c8:	27 c0       	rjmp	.+78     	; 0x2a18 <DIO_u8GetPinValue+0xec>
		case DIO_PORTC : return GET_BIT(PINC , Copy_u8Pin);
    29ca:	e3 e3       	ldi	r30, 0x33	; 51
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	80 81       	ld	r24, Z
    29d0:	28 2f       	mov	r18, r24
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	8a 81       	ldd	r24, Y+2	; 0x02
    29d6:	88 2f       	mov	r24, r24
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	a9 01       	movw	r20, r18
    29dc:	02 c0       	rjmp	.+4      	; 0x29e2 <DIO_u8GetPinValue+0xb6>
    29de:	55 95       	asr	r21
    29e0:	47 95       	ror	r20
    29e2:	8a 95       	dec	r24
    29e4:	e2 f7       	brpl	.-8      	; 0x29de <DIO_u8GetPinValue+0xb2>
    29e6:	ca 01       	movw	r24, r20
    29e8:	58 2f       	mov	r21, r24
    29ea:	51 70       	andi	r21, 0x01	; 1
    29ec:	5b 83       	std	Y+3, r21	; 0x03
    29ee:	14 c0       	rjmp	.+40     	; 0x2a18 <DIO_u8GetPinValue+0xec>
		case DIO_PORTD : return GET_BIT(PIND , Copy_u8Pin);
    29f0:	e0 e3       	ldi	r30, 0x30	; 48
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	80 81       	ld	r24, Z
    29f6:	28 2f       	mov	r18, r24
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	8a 81       	ldd	r24, Y+2	; 0x02
    29fc:	88 2f       	mov	r24, r24
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	a9 01       	movw	r20, r18
    2a02:	02 c0       	rjmp	.+4      	; 0x2a08 <DIO_u8GetPinValue+0xdc>
    2a04:	55 95       	asr	r21
    2a06:	47 95       	ror	r20
    2a08:	8a 95       	dec	r24
    2a0a:	e2 f7       	brpl	.-8      	; 0x2a04 <DIO_u8GetPinValue+0xd8>
    2a0c:	ca 01       	movw	r24, r20
    2a0e:	58 2f       	mov	r21, r24
    2a10:	51 70       	andi	r21, 0x01	; 1
    2a12:	5b 83       	std	Y+3, r21	; 0x03
    2a14:	01 c0       	rjmp	.+2      	; 0x2a18 <DIO_u8GetPinValue+0xec>
    2a16:	02 c0       	rjmp	.+4      	; 0x2a1c <DIO_u8GetPinValue+0xf0>
	}
}
    2a18:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1a:	8e 83       	std	Y+6, r24	; 0x06
    2a1c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a1e:	26 96       	adiw	r28, 0x06	; 6
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	f8 94       	cli
    2a24:	de bf       	out	0x3e, r29	; 62
    2a26:	0f be       	out	0x3f, r0	; 63
    2a28:	cd bf       	out	0x3d, r28	; 61
    2a2a:	cf 91       	pop	r28
    2a2c:	df 91       	pop	r29
    2a2e:	08 95       	ret

00002a30 <DIO_voidTogglePin>:

void DIO_voidTogglePin 	 (u8 Copy_u8Port , u8 Copy_u8Pin)
{
    2a30:	df 93       	push	r29
    2a32:	cf 93       	push	r28
    2a34:	00 d0       	rcall	.+0      	; 0x2a36 <DIO_voidTogglePin+0x6>
    2a36:	00 d0       	rcall	.+0      	; 0x2a38 <DIO_voidTogglePin+0x8>
    2a38:	cd b7       	in	r28, 0x3d	; 61
    2a3a:	de b7       	in	r29, 0x3e	; 62
    2a3c:	89 83       	std	Y+1, r24	; 0x01
    2a3e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	28 2f       	mov	r18, r24
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	3c 83       	std	Y+4, r19	; 0x04
    2a48:	2b 83       	std	Y+3, r18	; 0x03
    2a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4e:	81 30       	cpi	r24, 0x01	; 1
    2a50:	91 05       	cpc	r25, r1
    2a52:	49 f1       	breq	.+82     	; 0x2aa6 <DIO_voidTogglePin+0x76>
    2a54:	2b 81       	ldd	r18, Y+3	; 0x03
    2a56:	3c 81       	ldd	r19, Y+4	; 0x04
    2a58:	22 30       	cpi	r18, 0x02	; 2
    2a5a:	31 05       	cpc	r19, r1
    2a5c:	2c f4       	brge	.+10     	; 0x2a68 <DIO_voidTogglePin+0x38>
    2a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a60:	9c 81       	ldd	r25, Y+4	; 0x04
    2a62:	00 97       	sbiw	r24, 0x00	; 0
    2a64:	61 f0       	breq	.+24     	; 0x2a7e <DIO_voidTogglePin+0x4e>
    2a66:	5a c0       	rjmp	.+180    	; 0x2b1c <DIO_voidTogglePin+0xec>
    2a68:	2b 81       	ldd	r18, Y+3	; 0x03
    2a6a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a6c:	22 30       	cpi	r18, 0x02	; 2
    2a6e:	31 05       	cpc	r19, r1
    2a70:	71 f1       	breq	.+92     	; 0x2ace <DIO_voidTogglePin+0x9e>
    2a72:	8b 81       	ldd	r24, Y+3	; 0x03
    2a74:	9c 81       	ldd	r25, Y+4	; 0x04
    2a76:	83 30       	cpi	r24, 0x03	; 3
    2a78:	91 05       	cpc	r25, r1
    2a7a:	e9 f1       	breq	.+122    	; 0x2af6 <DIO_voidTogglePin+0xc6>
    2a7c:	4f c0       	rjmp	.+158    	; 0x2b1c <DIO_voidTogglePin+0xec>
	{
		case DIO_PORTA : TOGGLE_BIT(PORTA , Copy_u8Pin); break ;
    2a7e:	ab e3       	ldi	r26, 0x3B	; 59
    2a80:	b0 e0       	ldi	r27, 0x00	; 0
    2a82:	eb e3       	ldi	r30, 0x3B	; 59
    2a84:	f0 e0       	ldi	r31, 0x00	; 0
    2a86:	80 81       	ld	r24, Z
    2a88:	48 2f       	mov	r20, r24
    2a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8c:	28 2f       	mov	r18, r24
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	02 2e       	mov	r0, r18
    2a96:	02 c0       	rjmp	.+4      	; 0x2a9c <DIO_voidTogglePin+0x6c>
    2a98:	88 0f       	add	r24, r24
    2a9a:	99 1f       	adc	r25, r25
    2a9c:	0a 94       	dec	r0
    2a9e:	e2 f7       	brpl	.-8      	; 0x2a98 <DIO_voidTogglePin+0x68>
    2aa0:	84 27       	eor	r24, r20
    2aa2:	8c 93       	st	X, r24
    2aa4:	3b c0       	rjmp	.+118    	; 0x2b1c <DIO_voidTogglePin+0xec>
		case DIO_PORTB : TOGGLE_BIT(PORTB , Copy_u8Pin); break ;
    2aa6:	a8 e3       	ldi	r26, 0x38	; 56
    2aa8:	b0 e0       	ldi	r27, 0x00	; 0
    2aaa:	e8 e3       	ldi	r30, 0x38	; 56
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	80 81       	ld	r24, Z
    2ab0:	48 2f       	mov	r20, r24
    2ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab4:	28 2f       	mov	r18, r24
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	02 2e       	mov	r0, r18
    2abe:	02 c0       	rjmp	.+4      	; 0x2ac4 <DIO_voidTogglePin+0x94>
    2ac0:	88 0f       	add	r24, r24
    2ac2:	99 1f       	adc	r25, r25
    2ac4:	0a 94       	dec	r0
    2ac6:	e2 f7       	brpl	.-8      	; 0x2ac0 <DIO_voidTogglePin+0x90>
    2ac8:	84 27       	eor	r24, r20
    2aca:	8c 93       	st	X, r24
    2acc:	27 c0       	rjmp	.+78     	; 0x2b1c <DIO_voidTogglePin+0xec>
		case DIO_PORTC : TOGGLE_BIT(PORTC , Copy_u8Pin); break ;
    2ace:	a5 e3       	ldi	r26, 0x35	; 53
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	e5 e3       	ldi	r30, 0x35	; 53
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	48 2f       	mov	r20, r24
    2ada:	8a 81       	ldd	r24, Y+2	; 0x02
    2adc:	28 2f       	mov	r18, r24
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	02 2e       	mov	r0, r18
    2ae6:	02 c0       	rjmp	.+4      	; 0x2aec <DIO_voidTogglePin+0xbc>
    2ae8:	88 0f       	add	r24, r24
    2aea:	99 1f       	adc	r25, r25
    2aec:	0a 94       	dec	r0
    2aee:	e2 f7       	brpl	.-8      	; 0x2ae8 <DIO_voidTogglePin+0xb8>
    2af0:	84 27       	eor	r24, r20
    2af2:	8c 93       	st	X, r24
    2af4:	13 c0       	rjmp	.+38     	; 0x2b1c <DIO_voidTogglePin+0xec>
		case DIO_PORTD : TOGGLE_BIT(PORTD , Copy_u8Pin); break ;
    2af6:	a2 e3       	ldi	r26, 0x32	; 50
    2af8:	b0 e0       	ldi	r27, 0x00	; 0
    2afa:	e2 e3       	ldi	r30, 0x32	; 50
    2afc:	f0 e0       	ldi	r31, 0x00	; 0
    2afe:	80 81       	ld	r24, Z
    2b00:	48 2f       	mov	r20, r24
    2b02:	8a 81       	ldd	r24, Y+2	; 0x02
    2b04:	28 2f       	mov	r18, r24
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	02 2e       	mov	r0, r18
    2b0e:	02 c0       	rjmp	.+4      	; 0x2b14 <DIO_voidTogglePin+0xe4>
    2b10:	88 0f       	add	r24, r24
    2b12:	99 1f       	adc	r25, r25
    2b14:	0a 94       	dec	r0
    2b16:	e2 f7       	brpl	.-8      	; 0x2b10 <DIO_voidTogglePin+0xe0>
    2b18:	84 27       	eor	r24, r20
    2b1a:	8c 93       	st	X, r24
	}
}
    2b1c:	0f 90       	pop	r0
    2b1e:	0f 90       	pop	r0
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	cf 91       	pop	r28
    2b26:	df 91       	pop	r29
    2b28:	08 95       	ret

00002b2a <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection (u8 Copy_u8Port , u8 Copy_u8Direction)
{
    2b2a:	df 93       	push	r29
    2b2c:	cf 93       	push	r28
    2b2e:	00 d0       	rcall	.+0      	; 0x2b30 <DIO_voidSetPortDirection+0x6>
    2b30:	00 d0       	rcall	.+0      	; 0x2b32 <DIO_voidSetPortDirection+0x8>
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
    2b36:	89 83       	std	Y+1, r24	; 0x01
    2b38:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    2b3a:	89 81       	ldd	r24, Y+1	; 0x01
    2b3c:	28 2f       	mov	r18, r24
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	3c 83       	std	Y+4, r19	; 0x04
    2b42:	2b 83       	std	Y+3, r18	; 0x03
    2b44:	8b 81       	ldd	r24, Y+3	; 0x03
    2b46:	9c 81       	ldd	r25, Y+4	; 0x04
    2b48:	81 30       	cpi	r24, 0x01	; 1
    2b4a:	91 05       	cpc	r25, r1
    2b4c:	d1 f0       	breq	.+52     	; 0x2b82 <DIO_voidSetPortDirection+0x58>
    2b4e:	2b 81       	ldd	r18, Y+3	; 0x03
    2b50:	3c 81       	ldd	r19, Y+4	; 0x04
    2b52:	22 30       	cpi	r18, 0x02	; 2
    2b54:	31 05       	cpc	r19, r1
    2b56:	2c f4       	brge	.+10     	; 0x2b62 <DIO_voidSetPortDirection+0x38>
    2b58:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5c:	00 97       	sbiw	r24, 0x00	; 0
    2b5e:	61 f0       	breq	.+24     	; 0x2b78 <DIO_voidSetPortDirection+0x4e>
    2b60:	1e c0       	rjmp	.+60     	; 0x2b9e <DIO_voidSetPortDirection+0x74>
    2b62:	2b 81       	ldd	r18, Y+3	; 0x03
    2b64:	3c 81       	ldd	r19, Y+4	; 0x04
    2b66:	22 30       	cpi	r18, 0x02	; 2
    2b68:	31 05       	cpc	r19, r1
    2b6a:	81 f0       	breq	.+32     	; 0x2b8c <DIO_voidSetPortDirection+0x62>
    2b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b70:	83 30       	cpi	r24, 0x03	; 3
    2b72:	91 05       	cpc	r25, r1
    2b74:	81 f0       	breq	.+32     	; 0x2b96 <DIO_voidSetPortDirection+0x6c>
    2b76:	13 c0       	rjmp	.+38     	; 0x2b9e <DIO_voidSetPortDirection+0x74>
	{
		case DIO_PORTA : DDRA = Copy_u8Direction ; break ;
    2b78:	ea e3       	ldi	r30, 0x3A	; 58
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7e:	80 83       	st	Z, r24
    2b80:	0e c0       	rjmp	.+28     	; 0x2b9e <DIO_voidSetPortDirection+0x74>
	    case DIO_PORTB : DDRB = Copy_u8Direction ; break ;
    2b82:	e7 e3       	ldi	r30, 0x37	; 55
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	8a 81       	ldd	r24, Y+2	; 0x02
    2b88:	80 83       	st	Z, r24
    2b8a:	09 c0       	rjmp	.+18     	; 0x2b9e <DIO_voidSetPortDirection+0x74>
        case DIO_PORTC : DDRC = Copy_u8Direction ; break ;
    2b8c:	e4 e3       	ldi	r30, 0x34	; 52
    2b8e:	f0 e0       	ldi	r31, 0x00	; 0
    2b90:	8a 81       	ldd	r24, Y+2	; 0x02
    2b92:	80 83       	st	Z, r24
    2b94:	04 c0       	rjmp	.+8      	; 0x2b9e <DIO_voidSetPortDirection+0x74>
        case DIO_PORTD : DDRD = Copy_u8Direction ; break ;
    2b96:	e1 e3       	ldi	r30, 0x31	; 49
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9c:	80 83       	st	Z, r24
	}
}
    2b9e:	0f 90       	pop	r0
    2ba0:	0f 90       	pop	r0
    2ba2:	0f 90       	pop	r0
    2ba4:	0f 90       	pop	r0
    2ba6:	cf 91       	pop	r28
    2ba8:	df 91       	pop	r29
    2baa:	08 95       	ret

00002bac <DIO_voidSetPortValue>:
void DIO_voidSetPortValue (u8 Copy_u8Port , u8 Copy_u8Value)
{
    2bac:	df 93       	push	r29
    2bae:	cf 93       	push	r28
    2bb0:	00 d0       	rcall	.+0      	; 0x2bb2 <DIO_voidSetPortValue+0x6>
    2bb2:	00 d0       	rcall	.+0      	; 0x2bb4 <DIO_voidSetPortValue+0x8>
    2bb4:	cd b7       	in	r28, 0x3d	; 61
    2bb6:	de b7       	in	r29, 0x3e	; 62
    2bb8:	89 83       	std	Y+1, r24	; 0x01
    2bba:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    2bbc:	89 81       	ldd	r24, Y+1	; 0x01
    2bbe:	28 2f       	mov	r18, r24
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	3c 83       	std	Y+4, r19	; 0x04
    2bc4:	2b 83       	std	Y+3, r18	; 0x03
    2bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bca:	81 30       	cpi	r24, 0x01	; 1
    2bcc:	91 05       	cpc	r25, r1
    2bce:	d1 f0       	breq	.+52     	; 0x2c04 <DIO_voidSetPortValue+0x58>
    2bd0:	2b 81       	ldd	r18, Y+3	; 0x03
    2bd2:	3c 81       	ldd	r19, Y+4	; 0x04
    2bd4:	22 30       	cpi	r18, 0x02	; 2
    2bd6:	31 05       	cpc	r19, r1
    2bd8:	2c f4       	brge	.+10     	; 0x2be4 <DIO_voidSetPortValue+0x38>
    2bda:	8b 81       	ldd	r24, Y+3	; 0x03
    2bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bde:	00 97       	sbiw	r24, 0x00	; 0
    2be0:	61 f0       	breq	.+24     	; 0x2bfa <DIO_voidSetPortValue+0x4e>
    2be2:	1e c0       	rjmp	.+60     	; 0x2c20 <DIO_voidSetPortValue+0x74>
    2be4:	2b 81       	ldd	r18, Y+3	; 0x03
    2be6:	3c 81       	ldd	r19, Y+4	; 0x04
    2be8:	22 30       	cpi	r18, 0x02	; 2
    2bea:	31 05       	cpc	r19, r1
    2bec:	81 f0       	breq	.+32     	; 0x2c0e <DIO_voidSetPortValue+0x62>
    2bee:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf2:	83 30       	cpi	r24, 0x03	; 3
    2bf4:	91 05       	cpc	r25, r1
    2bf6:	81 f0       	breq	.+32     	; 0x2c18 <DIO_voidSetPortValue+0x6c>
    2bf8:	13 c0       	rjmp	.+38     	; 0x2c20 <DIO_voidSetPortValue+0x74>
		{
			case DIO_PORTA : PORTA = Copy_u8Value ; break ;
    2bfa:	eb e3       	ldi	r30, 0x3B	; 59
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2c00:	80 83       	st	Z, r24
    2c02:	0e c0       	rjmp	.+28     	; 0x2c20 <DIO_voidSetPortValue+0x74>
			case DIO_PORTB : PORTB = Copy_u8Value ; break ;
    2c04:	e8 e3       	ldi	r30, 0x38	; 56
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0a:	80 83       	st	Z, r24
    2c0c:	09 c0       	rjmp	.+18     	; 0x2c20 <DIO_voidSetPortValue+0x74>
			case DIO_PORTC : PORTC = Copy_u8Value ; break ;
    2c0e:	e5 e3       	ldi	r30, 0x35	; 53
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	8a 81       	ldd	r24, Y+2	; 0x02
    2c14:	80 83       	st	Z, r24
    2c16:	04 c0       	rjmp	.+8      	; 0x2c20 <DIO_voidSetPortValue+0x74>
			case DIO_PORTD : PORTD = Copy_u8Value ; break ;
    2c18:	e2 e3       	ldi	r30, 0x32	; 50
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1e:	80 83       	st	Z, r24
		}
}
    2c20:	0f 90       	pop	r0
    2c22:	0f 90       	pop	r0
    2c24:	0f 90       	pop	r0
    2c26:	0f 90       	pop	r0
    2c28:	cf 91       	pop	r28
    2c2a:	df 91       	pop	r29
    2c2c:	08 95       	ret

00002c2e <DIO_u8GetPortValue>:

u8   DIO_u8GetPortValue (u8 Copy_u8Port)
{
    2c2e:	df 93       	push	r29
    2c30:	cf 93       	push	r28
    2c32:	00 d0       	rcall	.+0      	; 0x2c34 <DIO_u8GetPortValue+0x6>
    2c34:	00 d0       	rcall	.+0      	; 0x2c36 <DIO_u8GetPortValue+0x8>
    2c36:	0f 92       	push	r0
    2c38:	cd b7       	in	r28, 0x3d	; 61
    2c3a:	de b7       	in	r29, 0x3e	; 62
    2c3c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Port)
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	28 2f       	mov	r18, r24
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	3c 83       	std	Y+4, r19	; 0x04
    2c46:	2b 83       	std	Y+3, r18	; 0x03
    2c48:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4c:	81 30       	cpi	r24, 0x01	; 1
    2c4e:	91 05       	cpc	r25, r1
    2c50:	d1 f0       	breq	.+52     	; 0x2c86 <DIO_u8GetPortValue+0x58>
    2c52:	2b 81       	ldd	r18, Y+3	; 0x03
    2c54:	3c 81       	ldd	r19, Y+4	; 0x04
    2c56:	22 30       	cpi	r18, 0x02	; 2
    2c58:	31 05       	cpc	r19, r1
    2c5a:	2c f4       	brge	.+10     	; 0x2c66 <DIO_u8GetPortValue+0x38>
    2c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c60:	00 97       	sbiw	r24, 0x00	; 0
    2c62:	61 f0       	breq	.+24     	; 0x2c7c <DIO_u8GetPortValue+0x4e>
    2c64:	1f c0       	rjmp	.+62     	; 0x2ca4 <DIO_u8GetPortValue+0x76>
    2c66:	2b 81       	ldd	r18, Y+3	; 0x03
    2c68:	3c 81       	ldd	r19, Y+4	; 0x04
    2c6a:	22 30       	cpi	r18, 0x02	; 2
    2c6c:	31 05       	cpc	r19, r1
    2c6e:	81 f0       	breq	.+32     	; 0x2c90 <DIO_u8GetPortValue+0x62>
    2c70:	8b 81       	ldd	r24, Y+3	; 0x03
    2c72:	9c 81       	ldd	r25, Y+4	; 0x04
    2c74:	83 30       	cpi	r24, 0x03	; 3
    2c76:	91 05       	cpc	r25, r1
    2c78:	81 f0       	breq	.+32     	; 0x2c9a <DIO_u8GetPortValue+0x6c>
    2c7a:	14 c0       	rjmp	.+40     	; 0x2ca4 <DIO_u8GetPortValue+0x76>
		{
			case DIO_PORTA : return PINA ;
    2c7c:	e9 e3       	ldi	r30, 0x39	; 57
    2c7e:	f0 e0       	ldi	r31, 0x00	; 0
    2c80:	90 81       	ld	r25, Z
    2c82:	9a 83       	std	Y+2, r25	; 0x02
    2c84:	10 c0       	rjmp	.+32     	; 0x2ca6 <DIO_u8GetPortValue+0x78>
			case DIO_PORTB : return PINB ;
    2c86:	e6 e3       	ldi	r30, 0x36	; 54
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	20 81       	ld	r18, Z
    2c8c:	2a 83       	std	Y+2, r18	; 0x02
    2c8e:	0b c0       	rjmp	.+22     	; 0x2ca6 <DIO_u8GetPortValue+0x78>
			case DIO_PORTC : return PINC ;
    2c90:	e3 e3       	ldi	r30, 0x33	; 51
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	30 81       	ld	r19, Z
    2c96:	3a 83       	std	Y+2, r19	; 0x02
    2c98:	06 c0       	rjmp	.+12     	; 0x2ca6 <DIO_u8GetPortValue+0x78>
			case DIO_PORTD : return PIND ;
    2c9a:	e0 e3       	ldi	r30, 0x30	; 48
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	80 81       	ld	r24, Z
    2ca0:	8a 83       	std	Y+2, r24	; 0x02
    2ca2:	01 c0       	rjmp	.+2      	; 0x2ca6 <DIO_u8GetPortValue+0x78>
    2ca4:	02 c0       	rjmp	.+4      	; 0x2caa <DIO_u8GetPortValue+0x7c>
		}
}
    2ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca8:	9d 83       	std	Y+5, r25	; 0x05
    2caa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cac:	0f 90       	pop	r0
    2cae:	0f 90       	pop	r0
    2cb0:	0f 90       	pop	r0
    2cb2:	0f 90       	pop	r0
    2cb4:	0f 90       	pop	r0
    2cb6:	cf 91       	pop	r28
    2cb8:	df 91       	pop	r29
    2cba:	08 95       	ret

00002cbc <__mulsi3>:
    2cbc:	62 9f       	mul	r22, r18
    2cbe:	d0 01       	movw	r26, r0
    2cc0:	73 9f       	mul	r23, r19
    2cc2:	f0 01       	movw	r30, r0
    2cc4:	82 9f       	mul	r24, r18
    2cc6:	e0 0d       	add	r30, r0
    2cc8:	f1 1d       	adc	r31, r1
    2cca:	64 9f       	mul	r22, r20
    2ccc:	e0 0d       	add	r30, r0
    2cce:	f1 1d       	adc	r31, r1
    2cd0:	92 9f       	mul	r25, r18
    2cd2:	f0 0d       	add	r31, r0
    2cd4:	83 9f       	mul	r24, r19
    2cd6:	f0 0d       	add	r31, r0
    2cd8:	74 9f       	mul	r23, r20
    2cda:	f0 0d       	add	r31, r0
    2cdc:	65 9f       	mul	r22, r21
    2cde:	f0 0d       	add	r31, r0
    2ce0:	99 27       	eor	r25, r25
    2ce2:	72 9f       	mul	r23, r18
    2ce4:	b0 0d       	add	r27, r0
    2ce6:	e1 1d       	adc	r30, r1
    2ce8:	f9 1f       	adc	r31, r25
    2cea:	63 9f       	mul	r22, r19
    2cec:	b0 0d       	add	r27, r0
    2cee:	e1 1d       	adc	r30, r1
    2cf0:	f9 1f       	adc	r31, r25
    2cf2:	bd 01       	movw	r22, r26
    2cf4:	cf 01       	movw	r24, r30
    2cf6:	11 24       	eor	r1, r1
    2cf8:	08 95       	ret

00002cfa <__udivmodsi4>:
    2cfa:	a1 e2       	ldi	r26, 0x21	; 33
    2cfc:	1a 2e       	mov	r1, r26
    2cfe:	aa 1b       	sub	r26, r26
    2d00:	bb 1b       	sub	r27, r27
    2d02:	fd 01       	movw	r30, r26
    2d04:	0d c0       	rjmp	.+26     	; 0x2d20 <__udivmodsi4_ep>

00002d06 <__udivmodsi4_loop>:
    2d06:	aa 1f       	adc	r26, r26
    2d08:	bb 1f       	adc	r27, r27
    2d0a:	ee 1f       	adc	r30, r30
    2d0c:	ff 1f       	adc	r31, r31
    2d0e:	a2 17       	cp	r26, r18
    2d10:	b3 07       	cpc	r27, r19
    2d12:	e4 07       	cpc	r30, r20
    2d14:	f5 07       	cpc	r31, r21
    2d16:	20 f0       	brcs	.+8      	; 0x2d20 <__udivmodsi4_ep>
    2d18:	a2 1b       	sub	r26, r18
    2d1a:	b3 0b       	sbc	r27, r19
    2d1c:	e4 0b       	sbc	r30, r20
    2d1e:	f5 0b       	sbc	r31, r21

00002d20 <__udivmodsi4_ep>:
    2d20:	66 1f       	adc	r22, r22
    2d22:	77 1f       	adc	r23, r23
    2d24:	88 1f       	adc	r24, r24
    2d26:	99 1f       	adc	r25, r25
    2d28:	1a 94       	dec	r1
    2d2a:	69 f7       	brne	.-38     	; 0x2d06 <__udivmodsi4_loop>
    2d2c:	60 95       	com	r22
    2d2e:	70 95       	com	r23
    2d30:	80 95       	com	r24
    2d32:	90 95       	com	r25
    2d34:	9b 01       	movw	r18, r22
    2d36:	ac 01       	movw	r20, r24
    2d38:	bd 01       	movw	r22, r26
    2d3a:	cf 01       	movw	r24, r30
    2d3c:	08 95       	ret

00002d3e <__prologue_saves__>:
    2d3e:	2f 92       	push	r2
    2d40:	3f 92       	push	r3
    2d42:	4f 92       	push	r4
    2d44:	5f 92       	push	r5
    2d46:	6f 92       	push	r6
    2d48:	7f 92       	push	r7
    2d4a:	8f 92       	push	r8
    2d4c:	9f 92       	push	r9
    2d4e:	af 92       	push	r10
    2d50:	bf 92       	push	r11
    2d52:	cf 92       	push	r12
    2d54:	df 92       	push	r13
    2d56:	ef 92       	push	r14
    2d58:	ff 92       	push	r15
    2d5a:	0f 93       	push	r16
    2d5c:	1f 93       	push	r17
    2d5e:	cf 93       	push	r28
    2d60:	df 93       	push	r29
    2d62:	cd b7       	in	r28, 0x3d	; 61
    2d64:	de b7       	in	r29, 0x3e	; 62
    2d66:	ca 1b       	sub	r28, r26
    2d68:	db 0b       	sbc	r29, r27
    2d6a:	0f b6       	in	r0, 0x3f	; 63
    2d6c:	f8 94       	cli
    2d6e:	de bf       	out	0x3e, r29	; 62
    2d70:	0f be       	out	0x3f, r0	; 63
    2d72:	cd bf       	out	0x3d, r28	; 61
    2d74:	09 94       	ijmp

00002d76 <__epilogue_restores__>:
    2d76:	2a 88       	ldd	r2, Y+18	; 0x12
    2d78:	39 88       	ldd	r3, Y+17	; 0x11
    2d7a:	48 88       	ldd	r4, Y+16	; 0x10
    2d7c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d7e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d80:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d82:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d84:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d86:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d88:	b9 84       	ldd	r11, Y+9	; 0x09
    2d8a:	c8 84       	ldd	r12, Y+8	; 0x08
    2d8c:	df 80       	ldd	r13, Y+7	; 0x07
    2d8e:	ee 80       	ldd	r14, Y+6	; 0x06
    2d90:	fd 80       	ldd	r15, Y+5	; 0x05
    2d92:	0c 81       	ldd	r16, Y+4	; 0x04
    2d94:	1b 81       	ldd	r17, Y+3	; 0x03
    2d96:	aa 81       	ldd	r26, Y+2	; 0x02
    2d98:	b9 81       	ldd	r27, Y+1	; 0x01
    2d9a:	ce 0f       	add	r28, r30
    2d9c:	d1 1d       	adc	r29, r1
    2d9e:	0f b6       	in	r0, 0x3f	; 63
    2da0:	f8 94       	cli
    2da2:	de bf       	out	0x3e, r29	; 62
    2da4:	0f be       	out	0x3f, r0	; 63
    2da6:	cd bf       	out	0x3d, r28	; 61
    2da8:	ed 01       	movw	r28, r26
    2daa:	08 95       	ret

00002dac <_exit>:
    2dac:	f8 94       	cli

00002dae <__stop_program>:
    2dae:	ff cf       	rjmp	.-2      	; 0x2dae <__stop_program>
