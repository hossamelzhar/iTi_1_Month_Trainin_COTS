
Software_ICU_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00002c84  00002d18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  00800076  00800076  00002d2e  2**0
                  ALLOC
  3 .stab         0000285c  00000000  00000000  00002d30  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015af  00000000  00000000  0000558c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00006e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000aef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b336  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bbc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 67 11 	jmp	0x22ce	; 0x22ce <__vector_1>
       8:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <__vector_2>
       c:	0c 94 cd 11 	jmp	0x239a	; 0x239a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__vector_7>
      20:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__vector_8>
      24:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <__vector_9>
      28:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__vector_10>
      2c:	0c 94 0b 0f 	jmp	0x1e16	; 0x1e16 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 06 	call	0xc9e	; 0xc9e <main>
      8a:	0c 94 40 16 	jmp	0x2c80	; 0x2c80 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 09 16 	jmp	0x2c12	; 0x2c12 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e6       	ldi	r26, 0x6E	; 110
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 25 16 	jmp	0x2c4a	; 0x2c4a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 15 16 	jmp	0x2c2a	; 0x2c2a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 15 16 	jmp	0x2c2a	; 0x2c2a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 09 16 	jmp	0x2c12	; 0x2c12 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e6       	ldi	r24, 0x6E	; 110
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 25 16 	jmp	0x2c4a	; 0x2c4a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e6       	ldi	r22, 0x6E	; 110
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 2d 16 	jmp	0x2c5a	; 0x2c5a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 15 16 	jmp	0x2c2a	; 0x2c2a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 15 16 	jmp	0x2c2a	; 0x2c2a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 15 16 	jmp	0x2c2a	; 0x2c2a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 19 16 	jmp	0x2c32	; 0x2c32 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 35 16 	jmp	0x2c6a	; 0x2c6a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <main>:
volatile u16 App_u16Time3;
volatile u8 App_u8OnTime;
volatile u8 App_u8OffTime;

void main(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <main+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62

	LCD_voidInit();
     ca8:	0e 94 4b 09 	call	0x1296	; 0x1296 <LCD_voidInit>

	//Global Interrupt
	sei();
     cac:	78 94       	sei

	//PWM Configurations  On Time 64us, period Time 256us
	TIMER0_voidSetOCR0Value(99);
     cae:	83 e6       	ldi	r24, 0x63	; 99
     cb0:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <TIMER0_voidSetOCR0Value>
	DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	63 e0       	ldi	r22, 0x03	; 3
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 00 12 	call	0x2400	; 0x2400 <DIO_voidSetPinDirection>
	TIMER0_voidInit();
     cbe:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <TIMER0_voidInit>

	Timer1_voidInit(TIMER1_NORMAL_MODE, TIMER1_SCALER_8, TIMER1_OC1A_DISCONNECTED, TIMER1_OC1B_DISCONNECTED);
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	62 e0       	ldi	r22, 0x02	; 2
     cc6:	40 e0       	ldi	r20, 0x00	; 0
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	0e 94 4b 0c 	call	0x1896	; 0x1896 <Timer1_voidInit>
	//EXTI Set Callback
	INT_voidSetCallBack(EXT_INT0, EXTI_Function);
     cce:	2d ea       	ldi	r18, 0xAD	; 173
     cd0:	36 e0       	ldi	r19, 0x06	; 6
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	b9 01       	movw	r22, r18
     cd6:	0e 94 4c 11 	call	0x2298	; 0x2298 <INT_voidSetCallBack>
	//Config EXTI, Rising Edge
	//EXTI Enable
	INT_voidEnable(EXT_INT0, INT_RISING_EDGE);
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	61 e0       	ldi	r22, 0x01	; 1
     cde:	0e 94 01 10 	call	0x2002	; 0x2002 <INT_voidEnable>


	u16 Period = 0;
     ce2:	1a 82       	std	Y+2, r1	; 0x02
     ce4:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		while(App_u8Flag != 3);
     ce6:	80 91 90 00 	lds	r24, 0x0090
     cea:	83 30       	cpi	r24, 0x03	; 3
     cec:	e1 f7       	brne	.-8      	; 0xce6 <main+0x48>

		Period = App_u8OffTime + App_u8OnTime;
     cee:	80 91 91 00 	lds	r24, 0x0091
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	80 91 94 00 	lds	r24, 0x0094
     cfa:	88 2f       	mov	r24, r24
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	82 0f       	add	r24, r18
     d00:	93 1f       	adc	r25, r19
     d02:	9a 83       	std	Y+2, r25	; 0x02
     d04:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidSetLocation(1, 0);
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	0e 94 23 09 	call	0x1246	; 0x1246 <LCD_voidSetLocation>
		LCD_voidSendString("Period ");
     d0e:	80 e6       	ldi	r24, 0x60	; 96
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	0e 94 40 08 	call	0x1080	; 0x1080 <LCD_voidSendString>
		LCD_voidSendNumber(Period);
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	9a 81       	ldd	r25, Y+2	; 0x02
     d1a:	cc 01       	movw	r24, r24
     d1c:	a0 e0       	ldi	r26, 0x00	; 0
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	bc 01       	movw	r22, r24
     d22:	cd 01       	movw	r24, r26
     d24:	0e 94 69 08 	call	0x10d2	; 0x10d2 <LCD_voidSendNumber>

		LCD_voidSetLocation(2, 0);
     d28:	82 e0       	ldi	r24, 0x02	; 2
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	0e 94 23 09 	call	0x1246	; 0x1246 <LCD_voidSetLocation>
		LCD_voidSendString("T_on ");
     d30:	88 e6       	ldi	r24, 0x68	; 104
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	0e 94 40 08 	call	0x1080	; 0x1080 <LCD_voidSendString>
		LCD_voidSendNumber(App_u8OnTime);
     d38:	80 91 94 00 	lds	r24, 0x0094
     d3c:	88 2f       	mov	r24, r24
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	a0 e0       	ldi	r26, 0x00	; 0
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	bc 01       	movw	r22, r24
     d46:	cd 01       	movw	r24, r26
     d48:	0e 94 69 08 	call	0x10d2	; 0x10d2 <LCD_voidSendNumber>

		App_u8Flag = 0;
     d4c:	10 92 90 00 	sts	0x0090, r1
		INT_voidEnable(EXT_INT0, INT_RISING_EDGE);
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	61 e0       	ldi	r22, 0x01	; 1
     d54:	0e 94 01 10 	call	0x2002	; 0x2002 <INT_voidEnable>
     d58:	c6 cf       	rjmp	.-116    	; 0xce6 <main+0x48>

00000d5a <EXTI_Function>:

}


void EXTI_Function(void)
{
     d5a:	df 93       	push	r29
     d5c:	cf 93       	push	r28
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
	if(App_u8Flag == 0)
     d62:	80 91 90 00 	lds	r24, 0x0090
     d66:	88 23       	and	r24, r24
     d68:	71 f4       	brne	.+28     	; 0xd86 <EXTI_Function+0x2c>
	{
		App_u16Time1 = Timer1_u16ReadValue();
     d6a:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <Timer1_u16ReadValue>
     d6e:	90 93 8d 00 	sts	0x008D, r25
     d72:	80 93 8c 00 	sts	0x008C, r24

		//Set EXTI Falling Edge
		INT_voidEnable(EXT_INT0, INT_FALLING_EDGE);
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	0e 94 01 10 	call	0x2002	; 0x2002 <INT_voidEnable>
		App_u8Flag = 1;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	80 93 90 00 	sts	0x0090, r24
     d84:	3e c0       	rjmp	.+124    	; 0xe02 <EXTI_Function+0xa8>
	}
	else if(App_u8Flag == 1)
     d86:	80 91 90 00 	lds	r24, 0x0090
     d8a:	81 30       	cpi	r24, 0x01	; 1
     d8c:	e1 f4       	brne	.+56     	; 0xdc6 <EXTI_Function+0x6c>
	{
		App_u16Time2 = Timer1_u16ReadValue();
     d8e:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <Timer1_u16ReadValue>
     d92:	90 93 93 00 	sts	0x0093, r25
     d96:	80 93 92 00 	sts	0x0092, r24
		INT_voidEnable(EXT_INT0, INT_RISING_EDGE);
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	61 e0       	ldi	r22, 0x01	; 1
     d9e:	0e 94 01 10 	call	0x2002	; 0x2002 <INT_voidEnable>
		App_u8OnTime = App_u16Time2 - App_u16Time1;
     da2:	80 91 92 00 	lds	r24, 0x0092
     da6:	90 91 93 00 	lds	r25, 0x0093
     daa:	28 2f       	mov	r18, r24
     dac:	80 91 8c 00 	lds	r24, 0x008C
     db0:	90 91 8d 00 	lds	r25, 0x008D
     db4:	92 2f       	mov	r25, r18
     db6:	98 1b       	sub	r25, r24
     db8:	89 2f       	mov	r24, r25
     dba:	80 93 94 00 	sts	0x0094, r24
		App_u8Flag = 2;
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	80 93 90 00 	sts	0x0090, r24
     dc4:	1e c0       	rjmp	.+60     	; 0xe02 <EXTI_Function+0xa8>
	}
	else if(App_u8Flag == 2)
     dc6:	80 91 90 00 	lds	r24, 0x0090
     dca:	82 30       	cpi	r24, 0x02	; 2
     dcc:	d1 f4       	brne	.+52     	; 0xe02 <EXTI_Function+0xa8>
	{
		App_u16Time3 = Timer1_u16ReadValue();
     dce:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <Timer1_u16ReadValue>
     dd2:	90 93 8f 00 	sts	0x008F, r25
     dd6:	80 93 8e 00 	sts	0x008E, r24
		App_u8OffTime = App_u16Time3 - App_u16Time2;
     dda:	80 91 8e 00 	lds	r24, 0x008E
     dde:	90 91 8f 00 	lds	r25, 0x008F
     de2:	28 2f       	mov	r18, r24
     de4:	80 91 92 00 	lds	r24, 0x0092
     de8:	90 91 93 00 	lds	r25, 0x0093
     dec:	92 2f       	mov	r25, r18
     dee:	98 1b       	sub	r25, r24
     df0:	89 2f       	mov	r24, r25
     df2:	80 93 91 00 	sts	0x0091, r24
		INT_voidDisable(EXT_INT0);
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	0e 94 15 11 	call	0x222a	; 0x222a <INT_voidDisable>
		App_u8Flag = 3;
     dfc:	83 e0       	ldi	r24, 0x03	; 3
     dfe:	80 93 90 00 	sts	0x0090, r24
	}

}
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	08 95       	ret

00000e08 <LCD_voidSendCommand>:
#include "LCD.h"

#include <util/delay.h>

void LCD_voidSendCommand (u8 Copy_U8Command)
{
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	2f 97       	sbiw	r28, 0x0f	; 15
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	f8 94       	cli
     e16:	de bf       	out	0x3e, r29	; 62
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	cd bf       	out	0x3d, r28	; 61
     e1c:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue	(LCD_CONTROL_PORT , RS , DIO_LOW);
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	40 e0       	ldi	r20, 0x00	; 0
     e24:	0e 94 00 13 	call	0x2600	; 0x2600 <DIO_voidSetPinValue>
	DIO_voidSetPinValue	(LCD_CONTROL_PORT , RW , DIO_LOW);
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	61 e0       	ldi	r22, 0x01	; 1
     e2c:	40 e0       	ldi	r20, 0x00	; 0
     e2e:	0e 94 00 13 	call	0x2600	; 0x2600 <DIO_voidSetPinValue>
	DIO_voidSetPortValue	(LCD_DATA_PORT , Copy_U8Command);
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	6f 85       	ldd	r22, Y+15	; 0x0f
     e36:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_voidSetPortValue>
	DIO_voidSetPinValue	(LCD_CONTROL_PORT , EN , DIO_HIGH);
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	62 e0       	ldi	r22, 0x02	; 2
     e3e:	41 e0       	ldi	r20, 0x01	; 1
     e40:	0e 94 00 13 	call	0x2600	; 0x2600 <DIO_voidSetPinValue>
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	a0 e0       	ldi	r26, 0x00	; 0
     e4a:	b0 e4       	ldi	r27, 0x40	; 64
     e4c:	8b 87       	std	Y+11, r24	; 0x0b
     e4e:	9c 87       	std	Y+12, r25	; 0x0c
     e50:	ad 87       	std	Y+13, r26	; 0x0d
     e52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e54:	6b 85       	ldd	r22, Y+11	; 0x0b
     e56:	7c 85       	ldd	r23, Y+12	; 0x0c
     e58:	8d 85       	ldd	r24, Y+13	; 0x0d
     e5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	4a ef       	ldi	r20, 0xFA	; 250
     e62:	54 e4       	ldi	r21, 0x44	; 68
     e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e68:	dc 01       	movw	r26, r24
     e6a:	cb 01       	movw	r24, r22
     e6c:	8f 83       	std	Y+7, r24	; 0x07
     e6e:	98 87       	std	Y+8, r25	; 0x08
     e70:	a9 87       	std	Y+9, r26	; 0x09
     e72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e74:	6f 81       	ldd	r22, Y+7	; 0x07
     e76:	78 85       	ldd	r23, Y+8	; 0x08
     e78:	89 85       	ldd	r24, Y+9	; 0x09
     e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	40 e8       	ldi	r20, 0x80	; 128
     e82:	5f e3       	ldi	r21, 0x3F	; 63
     e84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e88:	88 23       	and	r24, r24
     e8a:	2c f4       	brge	.+10     	; 0xe96 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	9e 83       	std	Y+6, r25	; 0x06
     e92:	8d 83       	std	Y+5, r24	; 0x05
     e94:	3f c0       	rjmp	.+126    	; 0xf14 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     e96:	6f 81       	ldd	r22, Y+7	; 0x07
     e98:	78 85       	ldd	r23, Y+8	; 0x08
     e9a:	89 85       	ldd	r24, Y+9	; 0x09
     e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	3f ef       	ldi	r19, 0xFF	; 255
     ea2:	4f e7       	ldi	r20, 0x7F	; 127
     ea4:	57 e4       	ldi	r21, 0x47	; 71
     ea6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     eaa:	18 16       	cp	r1, r24
     eac:	4c f5       	brge	.+82     	; 0xf00 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eae:	6b 85       	ldd	r22, Y+11	; 0x0b
     eb0:	7c 85       	ldd	r23, Y+12	; 0x0c
     eb2:	8d 85       	ldd	r24, Y+13	; 0x0d
     eb4:	9e 85       	ldd	r25, Y+14	; 0x0e
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	40 e2       	ldi	r20, 0x20	; 32
     ebc:	51 e4       	ldi	r21, 0x41	; 65
     ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	bc 01       	movw	r22, r24
     ec8:	cd 01       	movw	r24, r26
     eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	9e 83       	std	Y+6, r25	; 0x06
     ed4:	8d 83       	std	Y+5, r24	; 0x05
     ed6:	0f c0       	rjmp	.+30     	; 0xef6 <LCD_voidSendCommand+0xee>
     ed8:	88 ec       	ldi	r24, 0xC8	; 200
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	9c 83       	std	Y+4, r25	; 0x04
     ede:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	9c 81       	ldd	r25, Y+4	; 0x04
     ee4:	01 97       	sbiw	r24, 0x01	; 1
     ee6:	f1 f7       	brne	.-4      	; 0xee4 <LCD_voidSendCommand+0xdc>
     ee8:	9c 83       	std	Y+4, r25	; 0x04
     eea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eec:	8d 81       	ldd	r24, Y+5	; 0x05
     eee:	9e 81       	ldd	r25, Y+6	; 0x06
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	9e 83       	std	Y+6, r25	; 0x06
     ef4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef6:	8d 81       	ldd	r24, Y+5	; 0x05
     ef8:	9e 81       	ldd	r25, Y+6	; 0x06
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	69 f7       	brne	.-38     	; 0xed8 <LCD_voidSendCommand+0xd0>
     efe:	14 c0       	rjmp	.+40     	; 0xf28 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f00:	6f 81       	ldd	r22, Y+7	; 0x07
     f02:	78 85       	ldd	r23, Y+8	; 0x08
     f04:	89 85       	ldd	r24, Y+9	; 0x09
     f06:	9a 85       	ldd	r25, Y+10	; 0x0a
     f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	9e 83       	std	Y+6, r25	; 0x06
     f12:	8d 83       	std	Y+5, r24	; 0x05
     f14:	8d 81       	ldd	r24, Y+5	; 0x05
     f16:	9e 81       	ldd	r25, Y+6	; 0x06
     f18:	9a 83       	std	Y+2, r25	; 0x02
     f1a:	89 83       	std	Y+1, r24	; 0x01
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	9a 81       	ldd	r25, Y+2	; 0x02
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	f1 f7       	brne	.-4      	; 0xf20 <LCD_voidSendCommand+0x118>
     f24:	9a 83       	std	Y+2, r25	; 0x02
     f26:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue	(LCD_CONTROL_PORT , EN , DIO_LOW);
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	62 e0       	ldi	r22, 0x02	; 2
     f2c:	40 e0       	ldi	r20, 0x00	; 0
     f2e:	0e 94 00 13 	call	0x2600	; 0x2600 <DIO_voidSetPinValue>
}
     f32:	2f 96       	adiw	r28, 0x0f	; 15
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <LCD_voidSendChar>:


void LCD_voidSendChar    (u8 Copy_U8Char)
{
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	2f 97       	sbiw	r28, 0x0f	; 15
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT , RS , DIO_HIGH);
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	60 e0       	ldi	r22, 0x00	; 0
     f5e:	41 e0       	ldi	r20, 0x01	; 1
     f60:	0e 94 00 13 	call	0x2600	; 0x2600 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT , RW , DIO_LOW);
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	61 e0       	ldi	r22, 0x01	; 1
     f68:	40 e0       	ldi	r20, 0x00	; 0
     f6a:	0e 94 00 13 	call	0x2600	; 0x2600 <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DATA_PORT , Copy_U8Char);
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	6f 85       	ldd	r22, Y+15	; 0x0f
     f72:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_voidSetPortValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT , EN , DIO_HIGH);
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	62 e0       	ldi	r22, 0x02	; 2
     f7a:	41 e0       	ldi	r20, 0x01	; 1
     f7c:	0e 94 00 13 	call	0x2600	; 0x2600 <DIO_voidSetPinValue>
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	a0 e0       	ldi	r26, 0x00	; 0
     f86:	b0 e4       	ldi	r27, 0x40	; 64
     f88:	8b 87       	std	Y+11, r24	; 0x0b
     f8a:	9c 87       	std	Y+12, r25	; 0x0c
     f8c:	ad 87       	std	Y+13, r26	; 0x0d
     f8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f90:	6b 85       	ldd	r22, Y+11	; 0x0b
     f92:	7c 85       	ldd	r23, Y+12	; 0x0c
     f94:	8d 85       	ldd	r24, Y+13	; 0x0d
     f96:	9e 85       	ldd	r25, Y+14	; 0x0e
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	4a ef       	ldi	r20, 0xFA	; 250
     f9e:	54 e4       	ldi	r21, 0x44	; 68
     fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	8f 83       	std	Y+7, r24	; 0x07
     faa:	98 87       	std	Y+8, r25	; 0x08
     fac:	a9 87       	std	Y+9, r26	; 0x09
     fae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fb0:	6f 81       	ldd	r22, Y+7	; 0x07
     fb2:	78 85       	ldd	r23, Y+8	; 0x08
     fb4:	89 85       	ldd	r24, Y+9	; 0x09
     fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e8       	ldi	r20, 0x80	; 128
     fbe:	5f e3       	ldi	r21, 0x3F	; 63
     fc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fc4:	88 23       	and	r24, r24
     fc6:	2c f4       	brge	.+10     	; 0xfd2 <LCD_voidSendChar+0x8e>
		__ticks = 1;
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	9e 83       	std	Y+6, r25	; 0x06
     fce:	8d 83       	std	Y+5, r24	; 0x05
     fd0:	3f c0       	rjmp	.+126    	; 0x1050 <LCD_voidSendChar+0x10c>
	else if (__tmp > 65535)
     fd2:	6f 81       	ldd	r22, Y+7	; 0x07
     fd4:	78 85       	ldd	r23, Y+8	; 0x08
     fd6:	89 85       	ldd	r24, Y+9	; 0x09
     fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	3f ef       	ldi	r19, 0xFF	; 255
     fde:	4f e7       	ldi	r20, 0x7F	; 127
     fe0:	57 e4       	ldi	r21, 0x47	; 71
     fe2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fe6:	18 16       	cp	r1, r24
     fe8:	4c f5       	brge	.+82     	; 0x103c <LCD_voidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fea:	6b 85       	ldd	r22, Y+11	; 0x0b
     fec:	7c 85       	ldd	r23, Y+12	; 0x0c
     fee:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	40 e2       	ldi	r20, 0x20	; 32
     ff8:	51 e4       	ldi	r21, 0x41	; 65
     ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	bc 01       	movw	r22, r24
    1004:	cd 01       	movw	r24, r26
    1006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	9e 83       	std	Y+6, r25	; 0x06
    1010:	8d 83       	std	Y+5, r24	; 0x05
    1012:	0f c0       	rjmp	.+30     	; 0x1032 <LCD_voidSendChar+0xee>
    1014:	88 ec       	ldi	r24, 0xC8	; 200
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	9c 83       	std	Y+4, r25	; 0x04
    101a:	8b 83       	std	Y+3, r24	; 0x03
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	9c 81       	ldd	r25, Y+4	; 0x04
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	f1 f7       	brne	.-4      	; 0x1020 <LCD_voidSendChar+0xdc>
    1024:	9c 83       	std	Y+4, r25	; 0x04
    1026:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1028:	8d 81       	ldd	r24, Y+5	; 0x05
    102a:	9e 81       	ldd	r25, Y+6	; 0x06
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	9e 83       	std	Y+6, r25	; 0x06
    1030:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1032:	8d 81       	ldd	r24, Y+5	; 0x05
    1034:	9e 81       	ldd	r25, Y+6	; 0x06
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	69 f7       	brne	.-38     	; 0x1014 <LCD_voidSendChar+0xd0>
    103a:	14 c0       	rjmp	.+40     	; 0x1064 <LCD_voidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    103c:	6f 81       	ldd	r22, Y+7	; 0x07
    103e:	78 85       	ldd	r23, Y+8	; 0x08
    1040:	89 85       	ldd	r24, Y+9	; 0x09
    1042:	9a 85       	ldd	r25, Y+10	; 0x0a
    1044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	9e 83       	std	Y+6, r25	; 0x06
    104e:	8d 83       	std	Y+5, r24	; 0x05
    1050:	8d 81       	ldd	r24, Y+5	; 0x05
    1052:	9e 81       	ldd	r25, Y+6	; 0x06
    1054:	9a 83       	std	Y+2, r25	; 0x02
    1056:	89 83       	std	Y+1, r24	; 0x01
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	9a 81       	ldd	r25, Y+2	; 0x02
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	f1 f7       	brne	.-4      	; 0x105c <LCD_voidSendChar+0x118>
    1060:	9a 83       	std	Y+2, r25	; 0x02
    1062:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT , EN , DIO_LOW);
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	62 e0       	ldi	r22, 0x02	; 2
    1068:	40 e0       	ldi	r20, 0x00	; 0
    106a:	0e 94 00 13 	call	0x2600	; 0x2600 <DIO_voidSetPinValue>
}
    106e:	2f 96       	adiw	r28, 0x0f	; 15
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	cd bf       	out	0x3d, r28	; 61
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <LCD_voidSendString>:

void LCD_voidSendString  (u8 *Copy_U8String)
{
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	00 d0       	rcall	.+0      	; 0x1086 <LCD_voidSendString+0x6>
    1086:	0f 92       	push	r0
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	9b 83       	std	Y+3, r25	; 0x03
    108e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8Counter ;
	for (Local_U8Counter = 0 ; Copy_U8String[Local_U8Counter] != '\0' ; Local_U8Counter++)
    1090:	19 82       	std	Y+1, r1	; 0x01
    1092:	0e c0       	rjmp	.+28     	; 0x10b0 <LCD_voidSendString+0x30>
		LCD_voidSendChar(Copy_U8String[Local_U8Counter]);
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	9b 81       	ldd	r25, Y+3	; 0x03
    109e:	fc 01       	movw	r30, r24
    10a0:	e2 0f       	add	r30, r18
    10a2:	f3 1f       	adc	r31, r19
    10a4:	80 81       	ld	r24, Z
    10a6:	0e 94 a2 07 	call	0xf44	; 0xf44 <LCD_voidSendChar>
}

void LCD_voidSendString  (u8 *Copy_U8String)
{
	u8 Local_U8Counter ;
	for (Local_U8Counter = 0 ; Copy_U8String[Local_U8Counter] != '\0' ; Local_U8Counter++)
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	8f 5f       	subi	r24, 0xFF	; 255
    10ae:	89 83       	std	Y+1, r24	; 0x01
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ba:	fc 01       	movw	r30, r24
    10bc:	e2 0f       	add	r30, r18
    10be:	f3 1f       	adc	r31, r19
    10c0:	80 81       	ld	r24, Z
    10c2:	88 23       	and	r24, r24
    10c4:	39 f7       	brne	.-50     	; 0x1094 <LCD_voidSendString+0x14>
		LCD_voidSendChar(Copy_U8String[Local_U8Counter]);
}
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <LCD_voidSendNumber>:

void LCD_voidSendNumber(s32 Copy_s32Number)
{
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	29 97       	sbiw	r28, 0x09	; 9
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
    10e6:	6e 83       	std	Y+6, r22	; 0x06
    10e8:	7f 83       	std	Y+7, r23	; 0x07
    10ea:	88 87       	std	Y+8, r24	; 0x08
    10ec:	99 87       	std	Y+9, r25	; 0x09
	u32 Local_u32Counter=1 ;
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	a0 e0       	ldi	r26, 0x00	; 0
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	8a 83       	std	Y+2, r24	; 0x02
    10f8:	9b 83       	std	Y+3, r25	; 0x03
    10fa:	ac 83       	std	Y+4, r26	; 0x04
    10fc:	bd 83       	std	Y+5, r27	; 0x05
	u8 Local_u32Digit=0 ;
    10fe:	19 82       	std	Y+1, r1	; 0x01

	/* print (-) if the number is negative */
	if(Copy_s32Number < 0)
    1100:	8e 81       	ldd	r24, Y+6	; 0x06
    1102:	9f 81       	ldd	r25, Y+7	; 0x07
    1104:	a8 85       	ldd	r26, Y+8	; 0x08
    1106:	b9 85       	ldd	r27, Y+9	; 0x09
    1108:	bb 23       	and	r27, r27
    110a:	94 f4       	brge	.+36     	; 0x1130 <LCD_voidSendNumber+0x5e>
	{
		LCD_voidSendChar('-');
    110c:	8d e2       	ldi	r24, 0x2D	; 45
    110e:	0e 94 a2 07 	call	0xf44	; 0xf44 <LCD_voidSendChar>
		/* return the number to positive */
		Copy_s32Number = -Copy_s32Number;
    1112:	8e 81       	ldd	r24, Y+6	; 0x06
    1114:	9f 81       	ldd	r25, Y+7	; 0x07
    1116:	a8 85       	ldd	r26, Y+8	; 0x08
    1118:	b9 85       	ldd	r27, Y+9	; 0x09
    111a:	b0 95       	com	r27
    111c:	a0 95       	com	r26
    111e:	90 95       	com	r25
    1120:	81 95       	neg	r24
    1122:	9f 4f       	sbci	r25, 0xFF	; 255
    1124:	af 4f       	sbci	r26, 0xFF	; 255
    1126:	bf 4f       	sbci	r27, 0xFF	; 255
    1128:	8e 83       	std	Y+6, r24	; 0x06
    112a:	9f 83       	std	Y+7, r25	; 0x07
    112c:	a8 87       	std	Y+8, r26	; 0x08
    112e:	b9 87       	std	Y+9, r27	; 0x09
	}
	if (Copy_s32Number == 0)
    1130:	8e 81       	ldd	r24, Y+6	; 0x06
    1132:	9f 81       	ldd	r25, Y+7	; 0x07
    1134:	a8 85       	ldd	r26, Y+8	; 0x08
    1136:	b9 85       	ldd	r27, Y+9	; 0x09
    1138:	00 97       	sbiw	r24, 0x00	; 0
    113a:	a1 05       	cpc	r26, r1
    113c:	b1 05       	cpc	r27, r1
    113e:	b1 f4       	brne	.+44     	; 0x116c <LCD_voidSendNumber+0x9a>
		LCD_voidSendChar('0');
    1140:	80 e3       	ldi	r24, 0x30	; 48
    1142:	0e 94 a2 07 	call	0xf44	; 0xf44 <LCD_voidSendChar>
    1146:	76 c0       	rjmp	.+236    	; 0x1234 <LCD_voidSendNumber+0x162>
	else
	{
		while (Copy_s32Number/Local_u32Counter != 0)
		{
			Local_u32Counter *= 10;
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	9b 81       	ldd	r25, Y+3	; 0x03
    114c:	ac 81       	ldd	r26, Y+4	; 0x04
    114e:	bd 81       	ldd	r27, Y+5	; 0x05
    1150:	2a e0       	ldi	r18, 0x0A	; 10
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	40 e0       	ldi	r20, 0x00	; 0
    1156:	50 e0       	ldi	r21, 0x00	; 0
    1158:	bc 01       	movw	r22, r24
    115a:	cd 01       	movw	r24, r26
    115c:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__mulsi3>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	8a 83       	std	Y+2, r24	; 0x02
    1166:	9b 83       	std	Y+3, r25	; 0x03
    1168:	ac 83       	std	Y+4, r26	; 0x04
    116a:	bd 83       	std	Y+5, r27	; 0x05
	}
	if (Copy_s32Number == 0)
		LCD_voidSendChar('0');
	else
	{
		while (Copy_s32Number/Local_u32Counter != 0)
    116c:	8e 81       	ldd	r24, Y+6	; 0x06
    116e:	9f 81       	ldd	r25, Y+7	; 0x07
    1170:	a8 85       	ldd	r26, Y+8	; 0x08
    1172:	b9 85       	ldd	r27, Y+9	; 0x09
    1174:	2a 81       	ldd	r18, Y+2	; 0x02
    1176:	3b 81       	ldd	r19, Y+3	; 0x03
    1178:	4c 81       	ldd	r20, Y+4	; 0x04
    117a:	5d 81       	ldd	r21, Y+5	; 0x05
    117c:	bc 01       	movw	r22, r24
    117e:	cd 01       	movw	r24, r26
    1180:	0e 94 e7 15 	call	0x2bce	; 0x2bce <__udivmodsi4>
    1184:	da 01       	movw	r26, r20
    1186:	c9 01       	movw	r24, r18
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	a1 05       	cpc	r26, r1
    118c:	b1 05       	cpc	r27, r1
    118e:	e1 f6       	brne	.-72     	; 0x1148 <LCD_voidSendNumber+0x76>
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	9b 81       	ldd	r25, Y+3	; 0x03
    1194:	ac 81       	ldd	r26, Y+4	; 0x04
    1196:	bd 81       	ldd	r27, Y+5	; 0x05
    1198:	2a e0       	ldi	r18, 0x0A	; 10
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	40 e0       	ldi	r20, 0x00	; 0
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	bc 01       	movw	r22, r24
    11a2:	cd 01       	movw	r24, r26
    11a4:	0e 94 e7 15 	call	0x2bce	; 0x2bce <__udivmodsi4>
    11a8:	da 01       	movw	r26, r20
    11aa:	c9 01       	movw	r24, r18
    11ac:	8a 83       	std	Y+2, r24	; 0x02
    11ae:	9b 83       	std	Y+3, r25	; 0x03
    11b0:	ac 83       	std	Y+4, r26	; 0x04
    11b2:	bd 83       	std	Y+5, r27	; 0x05
    11b4:	37 c0       	rjmp	.+110    	; 0x1224 <LCD_voidSendNumber+0x152>

		while (Local_u32Counter != 0)
		{
			Local_u32Digit = Copy_s32Number/Local_u32Counter;
    11b6:	8e 81       	ldd	r24, Y+6	; 0x06
    11b8:	9f 81       	ldd	r25, Y+7	; 0x07
    11ba:	a8 85       	ldd	r26, Y+8	; 0x08
    11bc:	b9 85       	ldd	r27, Y+9	; 0x09
    11be:	2a 81       	ldd	r18, Y+2	; 0x02
    11c0:	3b 81       	ldd	r19, Y+3	; 0x03
    11c2:	4c 81       	ldd	r20, Y+4	; 0x04
    11c4:	5d 81       	ldd	r21, Y+5	; 0x05
    11c6:	bc 01       	movw	r22, r24
    11c8:	cd 01       	movw	r24, r26
    11ca:	0e 94 e7 15 	call	0x2bce	; 0x2bce <__udivmodsi4>
    11ce:	da 01       	movw	r26, r20
    11d0:	c9 01       	movw	r24, r18
    11d2:	89 83       	std	Y+1, r24	; 0x01

			LCD_voidSendChar(Local_u32Digit + '0');
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	80 5d       	subi	r24, 0xD0	; 208
    11d8:	0e 94 a2 07 	call	0xf44	; 0xf44 <LCD_voidSendChar>

			Copy_s32Number = Copy_s32Number%Local_u32Counter;
    11dc:	8e 81       	ldd	r24, Y+6	; 0x06
    11de:	9f 81       	ldd	r25, Y+7	; 0x07
    11e0:	a8 85       	ldd	r26, Y+8	; 0x08
    11e2:	b9 85       	ldd	r27, Y+9	; 0x09
    11e4:	2a 81       	ldd	r18, Y+2	; 0x02
    11e6:	3b 81       	ldd	r19, Y+3	; 0x03
    11e8:	4c 81       	ldd	r20, Y+4	; 0x04
    11ea:	5d 81       	ldd	r21, Y+5	; 0x05
    11ec:	bc 01       	movw	r22, r24
    11ee:	cd 01       	movw	r24, r26
    11f0:	0e 94 e7 15 	call	0x2bce	; 0x2bce <__udivmodsi4>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	8e 83       	std	Y+6, r24	; 0x06
    11fa:	9f 83       	std	Y+7, r25	; 0x07
    11fc:	a8 87       	std	Y+8, r26	; 0x08
    11fe:	b9 87       	std	Y+9, r27	; 0x09

			Local_u32Counter /= 10;
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	9b 81       	ldd	r25, Y+3	; 0x03
    1204:	ac 81       	ldd	r26, Y+4	; 0x04
    1206:	bd 81       	ldd	r27, Y+5	; 0x05
    1208:	2a e0       	ldi	r18, 0x0A	; 10
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	40 e0       	ldi	r20, 0x00	; 0
    120e:	50 e0       	ldi	r21, 0x00	; 0
    1210:	bc 01       	movw	r22, r24
    1212:	cd 01       	movw	r24, r26
    1214:	0e 94 e7 15 	call	0x2bce	; 0x2bce <__udivmodsi4>
    1218:	da 01       	movw	r26, r20
    121a:	c9 01       	movw	r24, r18
    121c:	8a 83       	std	Y+2, r24	; 0x02
    121e:	9b 83       	std	Y+3, r25	; 0x03
    1220:	ac 83       	std	Y+4, r26	; 0x04
    1222:	bd 83       	std	Y+5, r27	; 0x05
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;

		while (Local_u32Counter != 0)
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	9b 81       	ldd	r25, Y+3	; 0x03
    1228:	ac 81       	ldd	r26, Y+4	; 0x04
    122a:	bd 81       	ldd	r27, Y+5	; 0x05
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	a1 05       	cpc	r26, r1
    1230:	b1 05       	cpc	r27, r1
    1232:	09 f6       	brne	.-126    	; 0x11b6 <LCD_voidSendNumber+0xe4>
			Copy_s32Number = Copy_s32Number%Local_u32Counter;

			Local_u32Counter /= 10;
		}
	}
}
    1234:	29 96       	adiw	r28, 0x09	; 9
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <LCD_voidSetLocation>:

void LCD_voidSetLocation (u8 Copy_U8LineNum , u8 Copy_U8CharNum)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	00 d0       	rcall	.+0      	; 0x124c <LCD_voidSetLocation+0x6>
    124c:	00 d0       	rcall	.+0      	; 0x124e <LCD_voidSetLocation+0x8>
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	89 83       	std	Y+1, r24	; 0x01
    1254:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_U8LineNum)
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	3c 83       	std	Y+4, r19	; 0x04
    125e:	2b 83       	std	Y+3, r18	; 0x03
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9c 81       	ldd	r25, Y+4	; 0x04
    1264:	81 30       	cpi	r24, 0x01	; 1
    1266:	91 05       	cpc	r25, r1
    1268:	31 f0       	breq	.+12     	; 0x1276 <LCD_voidSetLocation+0x30>
    126a:	2b 81       	ldd	r18, Y+3	; 0x03
    126c:	3c 81       	ldd	r19, Y+4	; 0x04
    126e:	22 30       	cpi	r18, 0x02	; 2
    1270:	31 05       	cpc	r19, r1
    1272:	31 f0       	breq	.+12     	; 0x1280 <LCD_voidSetLocation+0x3a>
    1274:	09 c0       	rjmp	.+18     	; 0x1288 <LCD_voidSetLocation+0x42>
	{
		case LCD_U8_LINE1 : LCD_voidSendCommand (0x80+Copy_U8CharNum) ; break ;
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	80 58       	subi	r24, 0x80	; 128
    127a:	0e 94 04 07 	call	0xe08	; 0xe08 <LCD_voidSendCommand>
    127e:	04 c0       	rjmp	.+8      	; 0x1288 <LCD_voidSetLocation+0x42>
		
		case LCD_U8_LINE2 : LCD_voidSendCommand (0xc0+Copy_U8CharNum) ; break ;
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	80 54       	subi	r24, 0x40	; 64
    1284:	0e 94 04 07 	call	0xe08	; 0xe08 <LCD_voidSendCommand>
	}
}
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <LCD_voidInit>:

void LCD_voidInit (void )
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	e8 97       	sbiw	r28, 0x38	; 56
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	de bf       	out	0x3e, r29	; 62
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	cd bf       	out	0x3d, r28	; 61
	/*Set Data Port Output*/
	DIO_voidSetPortDirection(LCD_DATA_PORT , 0xff);
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	6f ef       	ldi	r22, 0xFF	; 255
    12ae:	0e 94 ff 14 	call	0x29fe	; 0x29fe <DIO_voidSetPortDirection>
	
	/*Set Pins of Control Port Output*/
	DIO_voidSetPinDirection(LCD_CONTROL_PORT , RS , DIO_OUTPUT);
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	60 e0       	ldi	r22, 0x00	; 0
    12b6:	41 e0       	ldi	r20, 0x01	; 1
    12b8:	0e 94 00 12 	call	0x2400	; 0x2400 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT , RW , DIO_OUTPUT);
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	61 e0       	ldi	r22, 0x01	; 1
    12c0:	41 e0       	ldi	r20, 0x01	; 1
    12c2:	0e 94 00 12 	call	0x2400	; 0x2400 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT , EN , DIO_OUTPUT);
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	62 e0       	ldi	r22, 0x02	; 2
    12ca:	41 e0       	ldi	r20, 0x01	; 1
    12cc:	0e 94 00 12 	call	0x2400	; 0x2400 <DIO_voidSetPinDirection>
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	ac e0       	ldi	r26, 0x0C	; 12
    12d6:	b2 e4       	ldi	r27, 0x42	; 66
    12d8:	8d ab       	std	Y+53, r24	; 0x35
    12da:	9e ab       	std	Y+54, r25	; 0x36
    12dc:	af ab       	std	Y+55, r26	; 0x37
    12de:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e0:	6d a9       	ldd	r22, Y+53	; 0x35
    12e2:	7e a9       	ldd	r23, Y+54	; 0x36
    12e4:	8f a9       	ldd	r24, Y+55	; 0x37
    12e6:	98 ad       	ldd	r25, Y+56	; 0x38
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	4a ef       	ldi	r20, 0xFA	; 250
    12ee:	54 e4       	ldi	r21, 0x44	; 68
    12f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	89 ab       	std	Y+49, r24	; 0x31
    12fa:	9a ab       	std	Y+50, r25	; 0x32
    12fc:	ab ab       	std	Y+51, r26	; 0x33
    12fe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1300:	69 a9       	ldd	r22, Y+49	; 0x31
    1302:	7a a9       	ldd	r23, Y+50	; 0x32
    1304:	8b a9       	ldd	r24, Y+51	; 0x33
    1306:	9c a9       	ldd	r25, Y+52	; 0x34
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e8       	ldi	r20, 0x80	; 128
    130e:	5f e3       	ldi	r21, 0x3F	; 63
    1310:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1314:	88 23       	and	r24, r24
    1316:	2c f4       	brge	.+10     	; 0x1322 <LCD_voidInit+0x8c>
		__ticks = 1;
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	98 ab       	std	Y+48, r25	; 0x30
    131e:	8f a7       	std	Y+47, r24	; 0x2f
    1320:	3f c0       	rjmp	.+126    	; 0x13a0 <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    1322:	69 a9       	ldd	r22, Y+49	; 0x31
    1324:	7a a9       	ldd	r23, Y+50	; 0x32
    1326:	8b a9       	ldd	r24, Y+51	; 0x33
    1328:	9c a9       	ldd	r25, Y+52	; 0x34
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	3f ef       	ldi	r19, 0xFF	; 255
    132e:	4f e7       	ldi	r20, 0x7F	; 127
    1330:	57 e4       	ldi	r21, 0x47	; 71
    1332:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1336:	18 16       	cp	r1, r24
    1338:	4c f5       	brge	.+82     	; 0x138c <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133a:	6d a9       	ldd	r22, Y+53	; 0x35
    133c:	7e a9       	ldd	r23, Y+54	; 0x36
    133e:	8f a9       	ldd	r24, Y+55	; 0x37
    1340:	98 ad       	ldd	r25, Y+56	; 0x38
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 e2       	ldi	r20, 0x20	; 32
    1348:	51 e4       	ldi	r21, 0x41	; 65
    134a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	bc 01       	movw	r22, r24
    1354:	cd 01       	movw	r24, r26
    1356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	98 ab       	std	Y+48, r25	; 0x30
    1360:	8f a7       	std	Y+47, r24	; 0x2f
    1362:	0f c0       	rjmp	.+30     	; 0x1382 <LCD_voidInit+0xec>
    1364:	88 ec       	ldi	r24, 0xC8	; 200
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	9e a7       	std	Y+46, r25	; 0x2e
    136a:	8d a7       	std	Y+45, r24	; 0x2d
    136c:	8d a5       	ldd	r24, Y+45	; 0x2d
    136e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	f1 f7       	brne	.-4      	; 0x1370 <LCD_voidInit+0xda>
    1374:	9e a7       	std	Y+46, r25	; 0x2e
    1376:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1378:	8f a5       	ldd	r24, Y+47	; 0x2f
    137a:	98 a9       	ldd	r25, Y+48	; 0x30
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	98 ab       	std	Y+48, r25	; 0x30
    1380:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1382:	8f a5       	ldd	r24, Y+47	; 0x2f
    1384:	98 a9       	ldd	r25, Y+48	; 0x30
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	69 f7       	brne	.-38     	; 0x1364 <LCD_voidInit+0xce>
    138a:	14 c0       	rjmp	.+40     	; 0x13b4 <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    138c:	69 a9       	ldd	r22, Y+49	; 0x31
    138e:	7a a9       	ldd	r23, Y+50	; 0x32
    1390:	8b a9       	ldd	r24, Y+51	; 0x33
    1392:	9c a9       	ldd	r25, Y+52	; 0x34
    1394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
    139c:	98 ab       	std	Y+48, r25	; 0x30
    139e:	8f a7       	std	Y+47, r24	; 0x2f
    13a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    13a2:	98 a9       	ldd	r25, Y+48	; 0x30
    13a4:	9c a7       	std	Y+44, r25	; 0x2c
    13a6:	8b a7       	std	Y+43, r24	; 0x2b
    13a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    13aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	f1 f7       	brne	.-4      	; 0x13ac <LCD_voidInit+0x116>
    13b0:	9c a7       	std	Y+44, r25	; 0x2c
    13b2:	8b a7       	std	Y+43, r24	; 0x2b
	
	/*Waiting after VDD rises to 4.5V*/
	_delay_ms(35);

	/*Function  Set*/
	LCD_voidSendCommand (LCD_FUNC_SET) ;
    13b4:	88 e3       	ldi	r24, 0x38	; 56
    13b6:	0e 94 04 07 	call	0xe08	; 0xe08 <LCD_voidSendCommand>
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	a0 e8       	ldi	r26, 0x80	; 128
    13c0:	bf e3       	ldi	r27, 0x3F	; 63
    13c2:	8f a3       	std	Y+39, r24	; 0x27
    13c4:	98 a7       	std	Y+40, r25	; 0x28
    13c6:	a9 a7       	std	Y+41, r26	; 0x29
    13c8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ca:	6f a1       	ldd	r22, Y+39	; 0x27
    13cc:	78 a5       	ldd	r23, Y+40	; 0x28
    13ce:	89 a5       	ldd	r24, Y+41	; 0x29
    13d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	4a ef       	ldi	r20, 0xFA	; 250
    13d8:	54 e4       	ldi	r21, 0x44	; 68
    13da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	8b a3       	std	Y+35, r24	; 0x23
    13e4:	9c a3       	std	Y+36, r25	; 0x24
    13e6:	ad a3       	std	Y+37, r26	; 0x25
    13e8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13ea:	6b a1       	ldd	r22, Y+35	; 0x23
    13ec:	7c a1       	ldd	r23, Y+36	; 0x24
    13ee:	8d a1       	ldd	r24, Y+37	; 0x25
    13f0:	9e a1       	ldd	r25, Y+38	; 0x26
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e8       	ldi	r20, 0x80	; 128
    13f8:	5f e3       	ldi	r21, 0x3F	; 63
    13fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13fe:	88 23       	and	r24, r24
    1400:	2c f4       	brge	.+10     	; 0x140c <LCD_voidInit+0x176>
		__ticks = 1;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	9a a3       	std	Y+34, r25	; 0x22
    1408:	89 a3       	std	Y+33, r24	; 0x21
    140a:	3f c0       	rjmp	.+126    	; 0x148a <LCD_voidInit+0x1f4>
	else if (__tmp > 65535)
    140c:	6b a1       	ldd	r22, Y+35	; 0x23
    140e:	7c a1       	ldd	r23, Y+36	; 0x24
    1410:	8d a1       	ldd	r24, Y+37	; 0x25
    1412:	9e a1       	ldd	r25, Y+38	; 0x26
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	3f ef       	ldi	r19, 0xFF	; 255
    1418:	4f e7       	ldi	r20, 0x7F	; 127
    141a:	57 e4       	ldi	r21, 0x47	; 71
    141c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1420:	18 16       	cp	r1, r24
    1422:	4c f5       	brge	.+82     	; 0x1476 <LCD_voidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1424:	6f a1       	ldd	r22, Y+39	; 0x27
    1426:	78 a5       	ldd	r23, Y+40	; 0x28
    1428:	89 a5       	ldd	r24, Y+41	; 0x29
    142a:	9a a5       	ldd	r25, Y+42	; 0x2a
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	40 e2       	ldi	r20, 0x20	; 32
    1432:	51 e4       	ldi	r21, 0x41	; 65
    1434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	bc 01       	movw	r22, r24
    143e:	cd 01       	movw	r24, r26
    1440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	9a a3       	std	Y+34, r25	; 0x22
    144a:	89 a3       	std	Y+33, r24	; 0x21
    144c:	0f c0       	rjmp	.+30     	; 0x146c <LCD_voidInit+0x1d6>
    144e:	88 ec       	ldi	r24, 0xC8	; 200
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	98 a3       	std	Y+32, r25	; 0x20
    1454:	8f 8f       	std	Y+31, r24	; 0x1f
    1456:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1458:	98 a1       	ldd	r25, Y+32	; 0x20
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	f1 f7       	brne	.-4      	; 0x145a <LCD_voidInit+0x1c4>
    145e:	98 a3       	std	Y+32, r25	; 0x20
    1460:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1462:	89 a1       	ldd	r24, Y+33	; 0x21
    1464:	9a a1       	ldd	r25, Y+34	; 0x22
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	9a a3       	std	Y+34, r25	; 0x22
    146a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    146c:	89 a1       	ldd	r24, Y+33	; 0x21
    146e:	9a a1       	ldd	r25, Y+34	; 0x22
    1470:	00 97       	sbiw	r24, 0x00	; 0
    1472:	69 f7       	brne	.-38     	; 0x144e <LCD_voidInit+0x1b8>
    1474:	14 c0       	rjmp	.+40     	; 0x149e <LCD_voidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1476:	6b a1       	ldd	r22, Y+35	; 0x23
    1478:	7c a1       	ldd	r23, Y+36	; 0x24
    147a:	8d a1       	ldd	r24, Y+37	; 0x25
    147c:	9e a1       	ldd	r25, Y+38	; 0x26
    147e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	9a a3       	std	Y+34, r25	; 0x22
    1488:	89 a3       	std	Y+33, r24	; 0x21
    148a:	89 a1       	ldd	r24, Y+33	; 0x21
    148c:	9a a1       	ldd	r25, Y+34	; 0x22
    148e:	9e 8f       	std	Y+30, r25	; 0x1e
    1490:	8d 8f       	std	Y+29, r24	; 0x1d
    1492:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1494:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1496:	01 97       	sbiw	r24, 0x01	; 1
    1498:	f1 f7       	brne	.-4      	; 0x1496 <LCD_voidInit+0x200>
    149a:	9e 8f       	std	Y+30, r25	; 0x1e
    149c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	
	/*ON/OFF Control*/
	LCD_voidSendCommand (LCD_ONOF);
    149e:	8c e0       	ldi	r24, 0x0C	; 12
    14a0:	0e 94 04 07 	call	0xe08	; 0xe08 <LCD_voidSendCommand>
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	a0 e8       	ldi	r26, 0x80	; 128
    14aa:	bf e3       	ldi	r27, 0x3F	; 63
    14ac:	89 8f       	std	Y+25, r24	; 0x19
    14ae:	9a 8f       	std	Y+26, r25	; 0x1a
    14b0:	ab 8f       	std	Y+27, r26	; 0x1b
    14b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b4:	69 8d       	ldd	r22, Y+25	; 0x19
    14b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	4a ef       	ldi	r20, 0xFA	; 250
    14c2:	54 e4       	ldi	r21, 0x44	; 68
    14c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	8d 8b       	std	Y+21, r24	; 0x15
    14ce:	9e 8b       	std	Y+22, r25	; 0x16
    14d0:	af 8b       	std	Y+23, r26	; 0x17
    14d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14d4:	6d 89       	ldd	r22, Y+21	; 0x15
    14d6:	7e 89       	ldd	r23, Y+22	; 0x16
    14d8:	8f 89       	ldd	r24, Y+23	; 0x17
    14da:	98 8d       	ldd	r25, Y+24	; 0x18
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 e8       	ldi	r20, 0x80	; 128
    14e2:	5f e3       	ldi	r21, 0x3F	; 63
    14e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14e8:	88 23       	and	r24, r24
    14ea:	2c f4       	brge	.+10     	; 0x14f6 <LCD_voidInit+0x260>
		__ticks = 1;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	9c 8b       	std	Y+20, r25	; 0x14
    14f2:	8b 8b       	std	Y+19, r24	; 0x13
    14f4:	3f c0       	rjmp	.+126    	; 0x1574 <LCD_voidInit+0x2de>
	else if (__tmp > 65535)
    14f6:	6d 89       	ldd	r22, Y+21	; 0x15
    14f8:	7e 89       	ldd	r23, Y+22	; 0x16
    14fa:	8f 89       	ldd	r24, Y+23	; 0x17
    14fc:	98 8d       	ldd	r25, Y+24	; 0x18
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	3f ef       	ldi	r19, 0xFF	; 255
    1502:	4f e7       	ldi	r20, 0x7F	; 127
    1504:	57 e4       	ldi	r21, 0x47	; 71
    1506:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    150a:	18 16       	cp	r1, r24
    150c:	4c f5       	brge	.+82     	; 0x1560 <LCD_voidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150e:	69 8d       	ldd	r22, Y+25	; 0x19
    1510:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1512:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1514:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e2       	ldi	r20, 0x20	; 32
    151c:	51 e4       	ldi	r21, 0x41	; 65
    151e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	bc 01       	movw	r22, r24
    1528:	cd 01       	movw	r24, r26
    152a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	9c 8b       	std	Y+20, r25	; 0x14
    1534:	8b 8b       	std	Y+19, r24	; 0x13
    1536:	0f c0       	rjmp	.+30     	; 0x1556 <LCD_voidInit+0x2c0>
    1538:	88 ec       	ldi	r24, 0xC8	; 200
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	9a 8b       	std	Y+18, r25	; 0x12
    153e:	89 8b       	std	Y+17, r24	; 0x11
    1540:	89 89       	ldd	r24, Y+17	; 0x11
    1542:	9a 89       	ldd	r25, Y+18	; 0x12
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	f1 f7       	brne	.-4      	; 0x1544 <LCD_voidInit+0x2ae>
    1548:	9a 8b       	std	Y+18, r25	; 0x12
    154a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154c:	8b 89       	ldd	r24, Y+19	; 0x13
    154e:	9c 89       	ldd	r25, Y+20	; 0x14
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	9c 8b       	std	Y+20, r25	; 0x14
    1554:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1556:	8b 89       	ldd	r24, Y+19	; 0x13
    1558:	9c 89       	ldd	r25, Y+20	; 0x14
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	69 f7       	brne	.-38     	; 0x1538 <LCD_voidInit+0x2a2>
    155e:	14 c0       	rjmp	.+40     	; 0x1588 <LCD_voidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1560:	6d 89       	ldd	r22, Y+21	; 0x15
    1562:	7e 89       	ldd	r23, Y+22	; 0x16
    1564:	8f 89       	ldd	r24, Y+23	; 0x17
    1566:	98 8d       	ldd	r25, Y+24	; 0x18
    1568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	9c 8b       	std	Y+20, r25	; 0x14
    1572:	8b 8b       	std	Y+19, r24	; 0x13
    1574:	8b 89       	ldd	r24, Y+19	; 0x13
    1576:	9c 89       	ldd	r25, Y+20	; 0x14
    1578:	98 8b       	std	Y+16, r25	; 0x10
    157a:	8f 87       	std	Y+15, r24	; 0x0f
    157c:	8f 85       	ldd	r24, Y+15	; 0x0f
    157e:	98 89       	ldd	r25, Y+16	; 0x10
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	f1 f7       	brne	.-4      	; 0x1580 <LCD_voidInit+0x2ea>
    1584:	98 8b       	std	Y+16, r25	; 0x10
    1586:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/*Function Clear*/
	LCD_voidSendCommand (LCD_CLEAR);
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	0e 94 04 07 	call	0xe08	; 0xe08 <LCD_voidSendCommand>
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	a0 e8       	ldi	r26, 0x80	; 128
    1594:	bf e3       	ldi	r27, 0x3F	; 63
    1596:	8b 87       	std	Y+11, r24	; 0x0b
    1598:	9c 87       	std	Y+12, r25	; 0x0c
    159a:	ad 87       	std	Y+13, r26	; 0x0d
    159c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    159e:	6b 85       	ldd	r22, Y+11	; 0x0b
    15a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    15a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	4a ef       	ldi	r20, 0xFA	; 250
    15ac:	54 e4       	ldi	r21, 0x44	; 68
    15ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	8f 83       	std	Y+7, r24	; 0x07
    15b8:	98 87       	std	Y+8, r25	; 0x08
    15ba:	a9 87       	std	Y+9, r26	; 0x09
    15bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15be:	6f 81       	ldd	r22, Y+7	; 0x07
    15c0:	78 85       	ldd	r23, Y+8	; 0x08
    15c2:	89 85       	ldd	r24, Y+9	; 0x09
    15c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	40 e8       	ldi	r20, 0x80	; 128
    15cc:	5f e3       	ldi	r21, 0x3F	; 63
    15ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15d2:	88 23       	and	r24, r24
    15d4:	2c f4       	brge	.+10     	; 0x15e0 <LCD_voidInit+0x34a>
		__ticks = 1;
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	9e 83       	std	Y+6, r25	; 0x06
    15dc:	8d 83       	std	Y+5, r24	; 0x05
    15de:	3f c0       	rjmp	.+126    	; 0x165e <LCD_voidInit+0x3c8>
	else if (__tmp > 65535)
    15e0:	6f 81       	ldd	r22, Y+7	; 0x07
    15e2:	78 85       	ldd	r23, Y+8	; 0x08
    15e4:	89 85       	ldd	r24, Y+9	; 0x09
    15e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	3f ef       	ldi	r19, 0xFF	; 255
    15ec:	4f e7       	ldi	r20, 0x7F	; 127
    15ee:	57 e4       	ldi	r21, 0x47	; 71
    15f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15f4:	18 16       	cp	r1, r24
    15f6:	4c f5       	brge	.+82     	; 0x164a <LCD_voidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    15fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	40 e2       	ldi	r20, 0x20	; 32
    1606:	51 e4       	ldi	r21, 0x41	; 65
    1608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	bc 01       	movw	r22, r24
    1612:	cd 01       	movw	r24, r26
    1614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	9e 83       	std	Y+6, r25	; 0x06
    161e:	8d 83       	std	Y+5, r24	; 0x05
    1620:	0f c0       	rjmp	.+30     	; 0x1640 <LCD_voidInit+0x3aa>
    1622:	88 ec       	ldi	r24, 0xC8	; 200
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	9c 83       	std	Y+4, r25	; 0x04
    1628:	8b 83       	std	Y+3, r24	; 0x03
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	9c 81       	ldd	r25, Y+4	; 0x04
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	f1 f7       	brne	.-4      	; 0x162e <LCD_voidInit+0x398>
    1632:	9c 83       	std	Y+4, r25	; 0x04
    1634:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1636:	8d 81       	ldd	r24, Y+5	; 0x05
    1638:	9e 81       	ldd	r25, Y+6	; 0x06
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	9e 83       	std	Y+6, r25	; 0x06
    163e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1640:	8d 81       	ldd	r24, Y+5	; 0x05
    1642:	9e 81       	ldd	r25, Y+6	; 0x06
    1644:	00 97       	sbiw	r24, 0x00	; 0
    1646:	69 f7       	brne	.-38     	; 0x1622 <LCD_voidInit+0x38c>
    1648:	14 c0       	rjmp	.+40     	; 0x1672 <LCD_voidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    164a:	6f 81       	ldd	r22, Y+7	; 0x07
    164c:	78 85       	ldd	r23, Y+8	; 0x08
    164e:	89 85       	ldd	r24, Y+9	; 0x09
    1650:	9a 85       	ldd	r25, Y+10	; 0x0a
    1652:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	9e 83       	std	Y+6, r25	; 0x06
    165c:	8d 83       	std	Y+5, r24	; 0x05
    165e:	8d 81       	ldd	r24, Y+5	; 0x05
    1660:	9e 81       	ldd	r25, Y+6	; 0x06
    1662:	9a 83       	std	Y+2, r25	; 0x02
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	9a 81       	ldd	r25, Y+2	; 0x02
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	f1 f7       	brne	.-4      	; 0x166a <LCD_voidInit+0x3d4>
    166e:	9a 83       	std	Y+2, r25	; 0x02
    1670:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    1672:	e8 96       	adiw	r28, 0x38	; 56
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <LCD_voidDrawSpecialChar>:

void LCD_voidDrawSpecialChar (u8 Copy_U8CharAddress , u8 *Copy_U8SpecialChar)
{
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	6c 97       	sbiw	r28, 0x1c	; 28
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	f8 94       	cli
    1692:	de bf       	out	0x3e, r29	; 62
    1694:	0f be       	out	0x3f, r0	; 63
    1696:	cd bf       	out	0x3d, r28	; 61
    1698:	8a 8f       	std	Y+26, r24	; 0x1a
    169a:	7c 8f       	std	Y+28, r23	; 0x1c
    169c:	6b 8f       	std	Y+27, r22	; 0x1b
	LCD_voidSendCommand(0b01000000+(Copy_U8CharAddress * 8));
    169e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16a0:	88 2f       	mov	r24, r24
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	08 96       	adiw	r24, 0x08	; 8
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	0e 94 04 07 	call	0xe08	; 0xe08 <LCD_voidSendCommand>
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	a0 e2       	ldi	r26, 0x20	; 32
    16bc:	b2 e4       	ldi	r27, 0x42	; 66
    16be:	8d 8b       	std	Y+21, r24	; 0x15
    16c0:	9e 8b       	std	Y+22, r25	; 0x16
    16c2:	af 8b       	std	Y+23, r26	; 0x17
    16c4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16c6:	6d 89       	ldd	r22, Y+21	; 0x15
    16c8:	7e 89       	ldd	r23, Y+22	; 0x16
    16ca:	8f 89       	ldd	r24, Y+23	; 0x17
    16cc:	98 8d       	ldd	r25, Y+24	; 0x18
    16ce:	2b ea       	ldi	r18, 0xAB	; 171
    16d0:	3a ea       	ldi	r19, 0xAA	; 170
    16d2:	4a e2       	ldi	r20, 0x2A	; 42
    16d4:	50 e4       	ldi	r21, 0x40	; 64
    16d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	89 8b       	std	Y+17, r24	; 0x11
    16e0:	9a 8b       	std	Y+18, r25	; 0x12
    16e2:	ab 8b       	std	Y+19, r26	; 0x13
    16e4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    16e6:	69 89       	ldd	r22, Y+17	; 0x11
    16e8:	7a 89       	ldd	r23, Y+18	; 0x12
    16ea:	8b 89       	ldd	r24, Y+19	; 0x13
    16ec:	9c 89       	ldd	r25, Y+20	; 0x14
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	40 e8       	ldi	r20, 0x80	; 128
    16f4:	5f e3       	ldi	r21, 0x3F	; 63
    16f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16fa:	88 23       	and	r24, r24
    16fc:	1c f4       	brge	.+6      	; 0x1704 <LCD_voidDrawSpecialChar+0x80>
		__ticks = 1;
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	88 8b       	std	Y+16, r24	; 0x10
    1702:	91 c0       	rjmp	.+290    	; 0x1826 <LCD_voidDrawSpecialChar+0x1a2>
	else if (__tmp > 255)
    1704:	69 89       	ldd	r22, Y+17	; 0x11
    1706:	7a 89       	ldd	r23, Y+18	; 0x12
    1708:	8b 89       	ldd	r24, Y+19	; 0x13
    170a:	9c 89       	ldd	r25, Y+20	; 0x14
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	4f e7       	ldi	r20, 0x7F	; 127
    1712:	53 e4       	ldi	r21, 0x43	; 67
    1714:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1718:	18 16       	cp	r1, r24
    171a:	0c f0       	brlt	.+2      	; 0x171e <LCD_voidDrawSpecialChar+0x9a>
    171c:	7b c0       	rjmp	.+246    	; 0x1814 <LCD_voidDrawSpecialChar+0x190>
	{
		_delay_ms(__us / 1000.0);
    171e:	6d 89       	ldd	r22, Y+21	; 0x15
    1720:	7e 89       	ldd	r23, Y+22	; 0x16
    1722:	8f 89       	ldd	r24, Y+23	; 0x17
    1724:	98 8d       	ldd	r25, Y+24	; 0x18
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	4a e7       	ldi	r20, 0x7A	; 122
    172c:	54 e4       	ldi	r21, 0x44	; 68
    172e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	8c 87       	std	Y+12, r24	; 0x0c
    1738:	9d 87       	std	Y+13, r25	; 0x0d
    173a:	ae 87       	std	Y+14, r26	; 0x0e
    173c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1740:	7d 85       	ldd	r23, Y+13	; 0x0d
    1742:	8e 85       	ldd	r24, Y+14	; 0x0e
    1744:	9f 85       	ldd	r25, Y+15	; 0x0f
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	4a ef       	ldi	r20, 0xFA	; 250
    174c:	54 e4       	ldi	r21, 0x44	; 68
    174e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	88 87       	std	Y+8, r24	; 0x08
    1758:	99 87       	std	Y+9, r25	; 0x09
    175a:	aa 87       	std	Y+10, r26	; 0x0a
    175c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    175e:	68 85       	ldd	r22, Y+8	; 0x08
    1760:	79 85       	ldd	r23, Y+9	; 0x09
    1762:	8a 85       	ldd	r24, Y+10	; 0x0a
    1764:	9b 85       	ldd	r25, Y+11	; 0x0b
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	40 e8       	ldi	r20, 0x80	; 128
    176c:	5f e3       	ldi	r21, 0x3F	; 63
    176e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1772:	88 23       	and	r24, r24
    1774:	2c f4       	brge	.+10     	; 0x1780 <LCD_voidDrawSpecialChar+0xfc>
		__ticks = 1;
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	9f 83       	std	Y+7, r25	; 0x07
    177c:	8e 83       	std	Y+6, r24	; 0x06
    177e:	3f c0       	rjmp	.+126    	; 0x17fe <LCD_voidDrawSpecialChar+0x17a>
	else if (__tmp > 65535)
    1780:	68 85       	ldd	r22, Y+8	; 0x08
    1782:	79 85       	ldd	r23, Y+9	; 0x09
    1784:	8a 85       	ldd	r24, Y+10	; 0x0a
    1786:	9b 85       	ldd	r25, Y+11	; 0x0b
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	3f ef       	ldi	r19, 0xFF	; 255
    178c:	4f e7       	ldi	r20, 0x7F	; 127
    178e:	57 e4       	ldi	r21, 0x47	; 71
    1790:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1794:	18 16       	cp	r1, r24
    1796:	4c f5       	brge	.+82     	; 0x17ea <LCD_voidDrawSpecialChar+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1798:	6c 85       	ldd	r22, Y+12	; 0x0c
    179a:	7d 85       	ldd	r23, Y+13	; 0x0d
    179c:	8e 85       	ldd	r24, Y+14	; 0x0e
    179e:	9f 85       	ldd	r25, Y+15	; 0x0f
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e2       	ldi	r20, 0x20	; 32
    17a6:	51 e4       	ldi	r21, 0x41	; 65
    17a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	bc 01       	movw	r22, r24
    17b2:	cd 01       	movw	r24, r26
    17b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	9f 83       	std	Y+7, r25	; 0x07
    17be:	8e 83       	std	Y+6, r24	; 0x06
    17c0:	0f c0       	rjmp	.+30     	; 0x17e0 <LCD_voidDrawSpecialChar+0x15c>
    17c2:	88 ec       	ldi	r24, 0xC8	; 200
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	9d 83       	std	Y+5, r25	; 0x05
    17c8:	8c 83       	std	Y+4, r24	; 0x04
    17ca:	8c 81       	ldd	r24, Y+4	; 0x04
    17cc:	9d 81       	ldd	r25, Y+5	; 0x05
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	f1 f7       	brne	.-4      	; 0x17ce <LCD_voidDrawSpecialChar+0x14a>
    17d2:	9d 83       	std	Y+5, r25	; 0x05
    17d4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d6:	8e 81       	ldd	r24, Y+6	; 0x06
    17d8:	9f 81       	ldd	r25, Y+7	; 0x07
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	9f 83       	std	Y+7, r25	; 0x07
    17de:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e0:	8e 81       	ldd	r24, Y+6	; 0x06
    17e2:	9f 81       	ldd	r25, Y+7	; 0x07
    17e4:	00 97       	sbiw	r24, 0x00	; 0
    17e6:	69 f7       	brne	.-38     	; 0x17c2 <LCD_voidDrawSpecialChar+0x13e>
    17e8:	24 c0       	rjmp	.+72     	; 0x1832 <LCD_voidDrawSpecialChar+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ea:	68 85       	ldd	r22, Y+8	; 0x08
    17ec:	79 85       	ldd	r23, Y+9	; 0x09
    17ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    17f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    17f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	9f 83       	std	Y+7, r25	; 0x07
    17fc:	8e 83       	std	Y+6, r24	; 0x06
    17fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1800:	9f 81       	ldd	r25, Y+7	; 0x07
    1802:	9b 83       	std	Y+3, r25	; 0x03
    1804:	8a 83       	std	Y+2, r24	; 0x02
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	9b 81       	ldd	r25, Y+3	; 0x03
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	f1 f7       	brne	.-4      	; 0x180a <LCD_voidDrawSpecialChar+0x186>
    180e:	9b 83       	std	Y+3, r25	; 0x03
    1810:	8a 83       	std	Y+2, r24	; 0x02
    1812:	0f c0       	rjmp	.+30     	; 0x1832 <LCD_voidDrawSpecialChar+0x1ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1814:	69 89       	ldd	r22, Y+17	; 0x11
    1816:	7a 89       	ldd	r23, Y+18	; 0x12
    1818:	8b 89       	ldd	r24, Y+19	; 0x13
    181a:	9c 89       	ldd	r25, Y+20	; 0x14
    181c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	88 8b       	std	Y+16, r24	; 0x10
    1826:	88 89       	ldd	r24, Y+16	; 0x10
    1828:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	8a 95       	dec	r24
    182e:	f1 f7       	brne	.-4      	; 0x182c <LCD_voidDrawSpecialChar+0x1a8>
    1830:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(40);
	u8 LCD_U8Counter ;
	for (LCD_U8Counter=0 ; LCD_U8Counter<8 ; LCD_U8Counter++)
    1832:	19 8e       	std	Y+25, r1	; 0x19
    1834:	0e c0       	rjmp	.+28     	; 0x1852 <LCD_voidDrawSpecialChar+0x1ce>
	{
		LCD_voidSendChar(Copy_U8SpecialChar[LCD_U8Counter]);
    1836:	89 8d       	ldd	r24, Y+25	; 0x19
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    183e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1840:	fc 01       	movw	r30, r24
    1842:	e2 0f       	add	r30, r18
    1844:	f3 1f       	adc	r31, r19
    1846:	80 81       	ld	r24, Z
    1848:	0e 94 a2 07 	call	0xf44	; 0xf44 <LCD_voidSendChar>
void LCD_voidDrawSpecialChar (u8 Copy_U8CharAddress , u8 *Copy_U8SpecialChar)
{
	LCD_voidSendCommand(0b01000000+(Copy_U8CharAddress * 8));
	_delay_us(40);
	u8 LCD_U8Counter ;
	for (LCD_U8Counter=0 ; LCD_U8Counter<8 ; LCD_U8Counter++)
    184c:	89 8d       	ldd	r24, Y+25	; 0x19
    184e:	8f 5f       	subi	r24, 0xFF	; 255
    1850:	89 8f       	std	Y+25, r24	; 0x19
    1852:	89 8d       	ldd	r24, Y+25	; 0x19
    1854:	88 30       	cpi	r24, 0x08	; 8
    1856:	78 f3       	brcs	.-34     	; 0x1836 <LCD_voidDrawSpecialChar+0x1b2>
	{
		LCD_voidSendChar(Copy_U8SpecialChar[LCD_U8Counter]);
	}
}
    1858:	6c 96       	adiw	r28, 0x1c	; 28
    185a:	0f b6       	in	r0, 0x3f	; 63
    185c:	f8 94       	cli
    185e:	de bf       	out	0x3e, r29	; 62
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	cd bf       	out	0x3d, r28	; 61
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	08 95       	ret

0000186a <LCD_voidSendSpecialChar>:

void LCD_voidSendSpecialChar(u8 Copy_U8CharAddress , u8 Copy_U8LineNum , u8 Copy_U8CharNum)
{
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	00 d0       	rcall	.+0      	; 0x1870 <LCD_voidSendSpecialChar+0x6>
    1870:	0f 92       	push	r0
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
    1876:	89 83       	std	Y+1, r24	; 0x01
    1878:	6a 83       	std	Y+2, r22	; 0x02
    187a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_voidSetLocation(Copy_U8LineNum , Copy_U8CharNum);
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	6b 81       	ldd	r22, Y+3	; 0x03
    1880:	0e 94 23 09 	call	0x1246	; 0x1246 <LCD_voidSetLocation>
	LCD_voidSendChar(Copy_U8CharAddress);
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	0e 94 a2 07 	call	0xf44	; 0xf44 <LCD_voidSendChar>
}
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <Timer1_voidInit>:

static void (*Timer_ptrFunc[4])(void) = {NULL};


void Timer1_voidInit(u8 Copy_u8Mode, u8 Copy_u8Scaler, u8 Copy_u8OC1A, u8 Copy_u8OC1B)
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	00 d0       	rcall	.+0      	; 0x189c <Timer1_voidInit+0x6>
    189c:	00 d0       	rcall	.+0      	; 0x189e <Timer1_voidInit+0x8>
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <Timer1_voidInit+0xa>
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	89 83       	std	Y+1, r24	; 0x01
    18a6:	6a 83       	std	Y+2, r22	; 0x02
    18a8:	4b 83       	std	Y+3, r20	; 0x03
    18aa:	2c 83       	std	Y+4, r18	; 0x04
    //Select Timer1 Mode
    switch (Copy_u8Mode)
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	3e 83       	std	Y+6, r19	; 0x06
    18b4:	2d 83       	std	Y+5, r18	; 0x05
    18b6:	8d 81       	ldd	r24, Y+5	; 0x05
    18b8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ba:	8b 30       	cpi	r24, 0x0B	; 11
    18bc:	91 05       	cpc	r25, r1
    18be:	09 f4       	brne	.+2      	; 0x18c2 <Timer1_voidInit+0x2c>
    18c0:	56 c0       	rjmp	.+172    	; 0x196e <Timer1_voidInit+0xd8>
    18c2:	2d 81       	ldd	r18, Y+5	; 0x05
    18c4:	3e 81       	ldd	r19, Y+6	; 0x06
    18c6:	2c 30       	cpi	r18, 0x0C	; 12
    18c8:	31 05       	cpc	r19, r1
    18ca:	54 f4       	brge	.+20     	; 0x18e0 <Timer1_voidInit+0x4a>
    18cc:	8d 81       	ldd	r24, Y+5	; 0x05
    18ce:	9e 81       	ldd	r25, Y+6	; 0x06
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	99 f0       	breq	.+38     	; 0x18fa <Timer1_voidInit+0x64>
    18d4:	2d 81       	ldd	r18, Y+5	; 0x05
    18d6:	3e 81       	ldd	r19, Y+6	; 0x06
    18d8:	24 30       	cpi	r18, 0x04	; 4
    18da:	31 05       	cpc	r19, r1
    18dc:	59 f1       	breq	.+86     	; 0x1934 <Timer1_voidInit+0x9e>
    18de:	9d c0       	rjmp	.+314    	; 0x1a1a <Timer1_voidInit+0x184>
    18e0:	8d 81       	ldd	r24, Y+5	; 0x05
    18e2:	9e 81       	ldd	r25, Y+6	; 0x06
    18e4:	8e 30       	cpi	r24, 0x0E	; 14
    18e6:	91 05       	cpc	r25, r1
    18e8:	09 f4       	brne	.+2      	; 0x18ec <Timer1_voidInit+0x56>
    18ea:	5e c0       	rjmp	.+188    	; 0x19a8 <Timer1_voidInit+0x112>
    18ec:	2d 81       	ldd	r18, Y+5	; 0x05
    18ee:	3e 81       	ldd	r19, Y+6	; 0x06
    18f0:	2f 30       	cpi	r18, 0x0F	; 15
    18f2:	31 05       	cpc	r19, r1
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <Timer1_voidInit+0x62>
    18f6:	75 c0       	rjmp	.+234    	; 0x19e2 <Timer1_voidInit+0x14c>
    18f8:	90 c0       	rjmp	.+288    	; 0x1a1a <Timer1_voidInit+0x184>
    {
    case TIMER1_NORMAL_MODE:
        CLR_BIT(TCCR1A, WGM10);
    18fa:	af e4       	ldi	r26, 0x4F	; 79
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	ef e4       	ldi	r30, 0x4F	; 79
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	8e 7f       	andi	r24, 0xFE	; 254
    1906:	8c 93       	st	X, r24
        CLR_BIT(TCCR1A, WGM11);
    1908:	af e4       	ldi	r26, 0x4F	; 79
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	ef e4       	ldi	r30, 0x4F	; 79
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	8d 7f       	andi	r24, 0xFD	; 253
    1914:	8c 93       	st	X, r24
        CLR_BIT(TCCR1B, WGM12);
    1916:	ae e4       	ldi	r26, 0x4E	; 78
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	ee e4       	ldi	r30, 0x4E	; 78
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	87 7f       	andi	r24, 0xF7	; 247
    1922:	8c 93       	st	X, r24
        CLR_BIT(TCCR1B, WGM13);
    1924:	ae e4       	ldi	r26, 0x4E	; 78
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	ee e4       	ldi	r30, 0x4E	; 78
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	8f 7e       	andi	r24, 0xEF	; 239
    1930:	8c 93       	st	X, r24
    1932:	73 c0       	rjmp	.+230    	; 0x1a1a <Timer1_voidInit+0x184>
        break;
    case TIMER1_CTC_MODE_TOP_OCR1A:
        CLR_BIT(TCCR1A, WGM10);
    1934:	af e4       	ldi	r26, 0x4F	; 79
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	ef e4       	ldi	r30, 0x4F	; 79
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	8e 7f       	andi	r24, 0xFE	; 254
    1940:	8c 93       	st	X, r24
        CLR_BIT(TCCR1A, WGM11);
    1942:	af e4       	ldi	r26, 0x4F	; 79
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	ef e4       	ldi	r30, 0x4F	; 79
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	8d 7f       	andi	r24, 0xFD	; 253
    194e:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM12);
    1950:	ae e4       	ldi	r26, 0x4E	; 78
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	ee e4       	ldi	r30, 0x4E	; 78
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	88 60       	ori	r24, 0x08	; 8
    195c:	8c 93       	st	X, r24
        CLR_BIT(TCCR1B, WGM13);
    195e:	ae e4       	ldi	r26, 0x4E	; 78
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	ee e4       	ldi	r30, 0x4E	; 78
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	8f 7e       	andi	r24, 0xEF	; 239
    196a:	8c 93       	st	X, r24
    196c:	56 c0       	rjmp	.+172    	; 0x1a1a <Timer1_voidInit+0x184>
        break;
    case TIMER1_PHASE_CORRECT_MODE_TOP_OCR1A:
        SET_BIT(TCCR1A, WGM10);
    196e:	af e4       	ldi	r26, 0x4F	; 79
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	ef e4       	ldi	r30, 0x4F	; 79
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	81 60       	ori	r24, 0x01	; 1
    197a:	8c 93       	st	X, r24
        SET_BIT(TCCR1A, WGM11);
    197c:	af e4       	ldi	r26, 0x4F	; 79
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	ef e4       	ldi	r30, 0x4F	; 79
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	82 60       	ori	r24, 0x02	; 2
    1988:	8c 93       	st	X, r24
        CLR_BIT(TCCR1B, WGM12);
    198a:	ae e4       	ldi	r26, 0x4E	; 78
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	ee e4       	ldi	r30, 0x4E	; 78
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	87 7f       	andi	r24, 0xF7	; 247
    1996:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM13);
    1998:	ae e4       	ldi	r26, 0x4E	; 78
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	ee e4       	ldi	r30, 0x4E	; 78
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	80 61       	ori	r24, 0x10	; 16
    19a4:	8c 93       	st	X, r24
    19a6:	39 c0       	rjmp	.+114    	; 0x1a1a <Timer1_voidInit+0x184>
        break;
    case TIMER1_FAST_MODE_TOP_ICR1:
        CLR_BIT(TCCR1A, WGM10);
    19a8:	af e4       	ldi	r26, 0x4F	; 79
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	ef e4       	ldi	r30, 0x4F	; 79
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	8e 7f       	andi	r24, 0xFE	; 254
    19b4:	8c 93       	st	X, r24
        SET_BIT(TCCR1A, WGM11);
    19b6:	af e4       	ldi	r26, 0x4F	; 79
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	ef e4       	ldi	r30, 0x4F	; 79
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	82 60       	ori	r24, 0x02	; 2
    19c2:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM12);
    19c4:	ae e4       	ldi	r26, 0x4E	; 78
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	ee e4       	ldi	r30, 0x4E	; 78
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	88 60       	ori	r24, 0x08	; 8
    19d0:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM13);
    19d2:	ae e4       	ldi	r26, 0x4E	; 78
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	ee e4       	ldi	r30, 0x4E	; 78
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	80 61       	ori	r24, 0x10	; 16
    19de:	8c 93       	st	X, r24
    19e0:	1c c0       	rjmp	.+56     	; 0x1a1a <Timer1_voidInit+0x184>
        break;
    case TIMER1_FAST_MODE_TOP_OCR1A:
        SET_BIT(TCCR1A, WGM10);
    19e2:	af e4       	ldi	r26, 0x4F	; 79
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	ef e4       	ldi	r30, 0x4F	; 79
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	81 60       	ori	r24, 0x01	; 1
    19ee:	8c 93       	st	X, r24
        SET_BIT(TCCR1A, WGM11);
    19f0:	af e4       	ldi	r26, 0x4F	; 79
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	ef e4       	ldi	r30, 0x4F	; 79
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	82 60       	ori	r24, 0x02	; 2
    19fc:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM12);
    19fe:	ae e4       	ldi	r26, 0x4E	; 78
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	ee e4       	ldi	r30, 0x4E	; 78
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	88 60       	ori	r24, 0x08	; 8
    1a0a:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM13);
    1a0c:	ae e4       	ldi	r26, 0x4E	; 78
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	ee e4       	ldi	r30, 0x4E	; 78
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	80 61       	ori	r24, 0x10	; 16
    1a18:	8c 93       	st	X, r24
        break;
    }
  
    
    //Config Action OC1A PIN
    CLR_BITS_IN_REG(TCCR1A, OC1A_CLR_MASK);
    1a1a:	af e4       	ldi	r26, 0x4F	; 79
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	ef e4       	ldi	r30, 0x4F	; 79
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	8f 73       	andi	r24, 0x3F	; 63
    1a26:	8c 93       	st	X, r24
    SET_BITS_IN_REG(TCCR1A, Copy_u8OC1A);
    1a28:	af e4       	ldi	r26, 0x4F	; 79
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	ef e4       	ldi	r30, 0x4F	; 79
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	90 81       	ld	r25, Z
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	89 2b       	or	r24, r25
    1a36:	8c 93       	st	X, r24

    //Config Action OC1B PIN
    CLR_BITS_IN_REG(TCCR1A, OC1B_CLR_MASK);
    1a38:	af e4       	ldi	r26, 0x4F	; 79
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	ef e4       	ldi	r30, 0x4F	; 79
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	8f 7c       	andi	r24, 0xCF	; 207
    1a44:	8c 93       	st	X, r24
    SET_BITS_IN_REG(TCCR1A, Copy_u8OC1B);
    1a46:	af e4       	ldi	r26, 0x4F	; 79
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	ef e4       	ldi	r30, 0x4F	; 79
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	90 81       	ld	r25, Z
    1a50:	8c 81       	ldd	r24, Y+4	; 0x04
    1a52:	89 2b       	or	r24, r25
    1a54:	8c 93       	st	X, r24

    //Select Clock Source
    //Clear CS12:10
    CLR_BITS_IN_REG(TCCR1B, CLK_SRC_CLR_MASK);
    1a56:	ae e4       	ldi	r26, 0x4E	; 78
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	ee e4       	ldi	r30, 0x4E	; 78
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	88 7f       	andi	r24, 0xF8	; 248
    1a62:	8c 93       	st	X, r24
    //Set Clock source
    SET_BITS_IN_REG(TCCR1B, Copy_u8Scaler);
    1a64:	ae e4       	ldi	r26, 0x4E	; 78
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	ee e4       	ldi	r30, 0x4E	; 78
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	90 81       	ld	r25, Z
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	89 2b       	or	r24, r25
    1a72:	8c 93       	st	X, r24
 
}
    1a74:	26 96       	adiw	r28, 0x06	; 6
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	cf 91       	pop	r28
    1a82:	df 91       	pop	r29
    1a84:	08 95       	ret

00001a86 <Timer1_voidSetPreloadValue>:



void Timer1_voidSetPreloadValue(u16 Copy_u16Value)
{
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	00 d0       	rcall	.+0      	; 0x1a8c <Timer1_voidSetPreloadValue+0x6>
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
    1a90:	9a 83       	std	Y+2, r25	; 0x02
    1a92:	89 83       	std	Y+1, r24	; 0x01
    TCNT1 = Copy_u16Value;
    1a94:	ec e4       	ldi	r30, 0x4C	; 76
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9c:	91 83       	std	Z+1, r25	; 0x01
    1a9e:	80 83       	st	Z, r24
}
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <Timer1_u16ReadValue>:


u16  Timer1_u16ReadValue(void)
{
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    return TCNT1;
    1ab2:	ec e4       	ldi	r30, 0x4C	; 76
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	91 81       	ldd	r25, Z+1	; 0x01
}
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <Timer1_voidSetOCR1AValue>:

void Timer1_voidSetOCR1AValue(u16 Copy_u16Value)
{
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	00 d0       	rcall	.+0      	; 0x1ac6 <Timer1_voidSetOCR1AValue+0x6>
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	9a 83       	std	Y+2, r25	; 0x02
    1acc:	89 83       	std	Y+1, r24	; 0x01
    OCR1A = Copy_u16Value;
    1ace:	ea e4       	ldi	r30, 0x4A	; 74
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad6:	91 83       	std	Z+1, r25	; 0x01
    1ad8:	80 83       	st	Z, r24
}
    1ada:	0f 90       	pop	r0
    1adc:	0f 90       	pop	r0
    1ade:	cf 91       	pop	r28
    1ae0:	df 91       	pop	r29
    1ae2:	08 95       	ret

00001ae4 <Timer1_voidSetOCR1BValue>:

void Timer1_voidSetOCR1BValue(u16 Copy_u16Value)
{
    1ae4:	df 93       	push	r29
    1ae6:	cf 93       	push	r28
    1ae8:	00 d0       	rcall	.+0      	; 0x1aea <Timer1_voidSetOCR1BValue+0x6>
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	9a 83       	std	Y+2, r25	; 0x02
    1af0:	89 83       	std	Y+1, r24	; 0x01
    OCR1B = Copy_u16Value;
    1af2:	e8 e4       	ldi	r30, 0x48	; 72
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	9a 81       	ldd	r25, Y+2	; 0x02
    1afa:	91 83       	std	Z+1, r25	; 0x01
    1afc:	80 83       	st	Z, r24
}
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	cf 91       	pop	r28
    1b04:	df 91       	pop	r29
    1b06:	08 95       	ret

00001b08 <Timer1_voidSetICR1Value>:

void Timer1_voidSetICR1Value(u16 Copy_u16Value)
{
    1b08:	df 93       	push	r29
    1b0a:	cf 93       	push	r28
    1b0c:	00 d0       	rcall	.+0      	; 0x1b0e <Timer1_voidSetICR1Value+0x6>
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
    1b12:	9a 83       	std	Y+2, r25	; 0x02
    1b14:	89 83       	std	Y+1, r24	; 0x01
    ICR1 = Copy_u16Value;
    1b16:	e6 e4       	ldi	r30, 0x46	; 70
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1e:	91 83       	std	Z+1, r25	; 0x01
    1b20:	80 83       	st	Z, r24
}
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <Timer1_voidOVFInterruptEnable>:

void Timer1_voidOVFInterruptEnable(void)
{
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TOIE1);
    1b34:	a9 e5       	ldi	r26, 0x59	; 89
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e9 e5       	ldi	r30, 0x59	; 89
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	84 60       	ori	r24, 0x04	; 4
    1b40:	8c 93       	st	X, r24
}
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <Timer1_voidOVFInterruptDisable>:

void Timer1_voidOVFInterruptDisable(void)
{
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, TOIE1);
    1b50:	a9 e5       	ldi	r26, 0x59	; 89
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e9 e5       	ldi	r30, 0x59	; 89
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	8b 7f       	andi	r24, 0xFB	; 251
    1b5c:	8c 93       	st	X, r24
}
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	08 95       	ret

00001b64 <Timer1_voidOC1AInterruptEnable>:

void Timer1_voidOC1AInterruptEnable(void)
{
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE1A);
    1b6c:	a9 e5       	ldi	r26, 0x59	; 89
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	e9 e5       	ldi	r30, 0x59	; 89
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	80 61       	ori	r24, 0x10	; 16
    1b78:	8c 93       	st	X, r24
}
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	08 95       	ret

00001b80 <Timer1_voidOC1AInterruptDisable>:

void Timer1_voidOC1AInterruptDisable(void)
{
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, OCIE1A);
    1b88:	a9 e5       	ldi	r26, 0x59	; 89
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e9 e5       	ldi	r30, 0x59	; 89
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	8f 7e       	andi	r24, 0xEF	; 239
    1b94:	8c 93       	st	X, r24
}
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <Timer1_voidOC1BInterruptEnable>:

void Timer1_voidOC1BInterruptEnable(void)
{
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, OCIE1B);
    1ba4:	a9 e5       	ldi	r26, 0x59	; 89
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e9 e5       	ldi	r30, 0x59	; 89
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	88 60       	ori	r24, 0x08	; 8
    1bb0:	8c 93       	st	X, r24
}
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <Timer1_voidOC1BInterruptDisable>:

void Timer1_voidOC1BInterruptDisable(void)
{
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, OCIE1B);
    1bc0:	a9 e5       	ldi	r26, 0x59	; 89
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	e9 e5       	ldi	r30, 0x59	; 89
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	87 7f       	andi	r24, 0xF7	; 247
    1bcc:	8c 93       	st	X, r24
}
    1bce:	cf 91       	pop	r28
    1bd0:	df 91       	pop	r29
    1bd2:	08 95       	ret

00001bd4 <Timer1_voidOVFSetCallBack>:



void Timer1_voidOVFSetCallBack(void (*Copy_pfNotification)(void))
{
    1bd4:	df 93       	push	r29
    1bd6:	cf 93       	push	r28
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <Timer1_voidOVFSetCallBack+0x6>
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	9a 83       	std	Y+2, r25	; 0x02
    1be0:	89 83       	std	Y+1, r24	; 0x01
    Timer_ptrFunc[0] = Copy_pfNotification;
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	9a 81       	ldd	r25, Y+2	; 0x02
    1be6:	90 93 77 00 	sts	0x0077, r25
    1bea:	80 93 76 00 	sts	0x0076, r24
}
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	08 95       	ret

00001bf8 <Timer1_voidOC1ASetCallBack>:

void Timer1_voidOC1ASetCallBack(void (*Copy_pfNotification)(void))
{
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	00 d0       	rcall	.+0      	; 0x1bfe <Timer1_voidOC1ASetCallBack+0x6>
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	9a 83       	std	Y+2, r25	; 0x02
    1c04:	89 83       	std	Y+1, r24	; 0x01
    Timer_ptrFunc[1] = Copy_pfNotification;
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
    1c08:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0a:	90 93 79 00 	sts	0x0079, r25
    1c0e:	80 93 78 00 	sts	0x0078, r24
}
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	08 95       	ret

00001c1c <Timer1_voidOC1BSetCallBack>:

void Timer1_voidOC1BSetCallBack(void (*Copy_pfNotification)(void))
{
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <Timer1_voidOC1BSetCallBack+0x6>
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	9a 83       	std	Y+2, r25	; 0x02
    1c28:	89 83       	std	Y+1, r24	; 0x01
    Timer_ptrFunc[2] = Copy_pfNotification;
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2e:	90 93 7b 00 	sts	0x007B, r25
    1c32:	80 93 7a 00 	sts	0x007A, r24
}
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1c40:	1f 92       	push	r1
    1c42:	0f 92       	push	r0
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	0f 92       	push	r0
    1c48:	11 24       	eor	r1, r1
    1c4a:	2f 93       	push	r18
    1c4c:	3f 93       	push	r19
    1c4e:	4f 93       	push	r20
    1c50:	5f 93       	push	r21
    1c52:	6f 93       	push	r22
    1c54:	7f 93       	push	r23
    1c56:	8f 93       	push	r24
    1c58:	9f 93       	push	r25
    1c5a:	af 93       	push	r26
    1c5c:	bf 93       	push	r27
    1c5e:	ef 93       	push	r30
    1c60:	ff 93       	push	r31
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    if(Timer_ptrFunc[0] != NULL)
    1c6a:	80 91 76 00 	lds	r24, 0x0076
    1c6e:	90 91 77 00 	lds	r25, 0x0077
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	29 f0       	breq	.+10     	; 0x1c80 <__vector_9+0x40>
    {
        Timer_ptrFunc[0]();
    1c76:	e0 91 76 00 	lds	r30, 0x0076
    1c7a:	f0 91 77 00 	lds	r31, 0x0077
    1c7e:	09 95       	icall
    }
}
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	ff 91       	pop	r31
    1c86:	ef 91       	pop	r30
    1c88:	bf 91       	pop	r27
    1c8a:	af 91       	pop	r26
    1c8c:	9f 91       	pop	r25
    1c8e:	8f 91       	pop	r24
    1c90:	7f 91       	pop	r23
    1c92:	6f 91       	pop	r22
    1c94:	5f 91       	pop	r21
    1c96:	4f 91       	pop	r20
    1c98:	3f 91       	pop	r19
    1c9a:	2f 91       	pop	r18
    1c9c:	0f 90       	pop	r0
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	0f 90       	pop	r0
    1ca2:	1f 90       	pop	r1
    1ca4:	18 95       	reti

00001ca6 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1ca6:	1f 92       	push	r1
    1ca8:	0f 92       	push	r0
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	0f 92       	push	r0
    1cae:	11 24       	eor	r1, r1
    1cb0:	2f 93       	push	r18
    1cb2:	3f 93       	push	r19
    1cb4:	4f 93       	push	r20
    1cb6:	5f 93       	push	r21
    1cb8:	6f 93       	push	r22
    1cba:	7f 93       	push	r23
    1cbc:	8f 93       	push	r24
    1cbe:	9f 93       	push	r25
    1cc0:	af 93       	push	r26
    1cc2:	bf 93       	push	r27
    1cc4:	ef 93       	push	r30
    1cc6:	ff 93       	push	r31
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    if(Timer_ptrFunc[1] != NULL)
    1cd0:	80 91 78 00 	lds	r24, 0x0078
    1cd4:	90 91 79 00 	lds	r25, 0x0079
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	29 f0       	breq	.+10     	; 0x1ce6 <__vector_7+0x40>
    {
        Timer_ptrFunc[1]();
    1cdc:	e0 91 78 00 	lds	r30, 0x0078
    1ce0:	f0 91 79 00 	lds	r31, 0x0079
    1ce4:	09 95       	icall
    }
}
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	ff 91       	pop	r31
    1cec:	ef 91       	pop	r30
    1cee:	bf 91       	pop	r27
    1cf0:	af 91       	pop	r26
    1cf2:	9f 91       	pop	r25
    1cf4:	8f 91       	pop	r24
    1cf6:	7f 91       	pop	r23
    1cf8:	6f 91       	pop	r22
    1cfa:	5f 91       	pop	r21
    1cfc:	4f 91       	pop	r20
    1cfe:	3f 91       	pop	r19
    1d00:	2f 91       	pop	r18
    1d02:	0f 90       	pop	r0
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	0f 90       	pop	r0
    1d08:	1f 90       	pop	r1
    1d0a:	18 95       	reti

00001d0c <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
    1d0c:	1f 92       	push	r1
    1d0e:	0f 92       	push	r0
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	0f 92       	push	r0
    1d14:	11 24       	eor	r1, r1
    1d16:	2f 93       	push	r18
    1d18:	3f 93       	push	r19
    1d1a:	4f 93       	push	r20
    1d1c:	5f 93       	push	r21
    1d1e:	6f 93       	push	r22
    1d20:	7f 93       	push	r23
    1d22:	8f 93       	push	r24
    1d24:	9f 93       	push	r25
    1d26:	af 93       	push	r26
    1d28:	bf 93       	push	r27
    1d2a:	ef 93       	push	r30
    1d2c:	ff 93       	push	r31
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    if(Timer_ptrFunc[2] != NULL)
    1d36:	80 91 7a 00 	lds	r24, 0x007A
    1d3a:	90 91 7b 00 	lds	r25, 0x007B
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	29 f0       	breq	.+10     	; 0x1d4c <__vector_8+0x40>
    {
        Timer_ptrFunc[2]();
    1d42:	e0 91 7a 00 	lds	r30, 0x007A
    1d46:	f0 91 7b 00 	lds	r31, 0x007B
    1d4a:	09 95       	icall
    }
}
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	ff 91       	pop	r31
    1d52:	ef 91       	pop	r30
    1d54:	bf 91       	pop	r27
    1d56:	af 91       	pop	r26
    1d58:	9f 91       	pop	r25
    1d5a:	8f 91       	pop	r24
    1d5c:	7f 91       	pop	r23
    1d5e:	6f 91       	pop	r22
    1d60:	5f 91       	pop	r21
    1d62:	4f 91       	pop	r20
    1d64:	3f 91       	pop	r19
    1d66:	2f 91       	pop	r18
    1d68:	0f 90       	pop	r0
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	0f 90       	pop	r0
    1d6e:	1f 90       	pop	r1
    1d70:	18 95       	reti

00001d72 <TIMER0_voidInit>:

void (*TIMER0_PFvoidOVFCall) (void) = ((void *)0);
void (*TIMER0_PFvoidCTCCall) (void) = ((void *)0);

void TIMER0_voidInit (void)
{
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
	/*4- Enable CTC Interrupt*/
	SET_BIT (TIMSK , OCIE0);

#elif	TIMER0_MODE == TIMER0_FPWM_MODE
	/*1- Select Timer0 Mode ==> Fast PWM Mode*/
	SET_BIT (TCCR0 , WGM00);
    1d7a:	a3 e5       	ldi	r26, 0x53	; 83
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e3 e5       	ldi	r30, 0x53	; 83
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	80 64       	ori	r24, 0x40	; 64
    1d86:	8c 93       	st	X, r24
	SET_BIT (TCCR0 , WGM01);
    1d88:	a3 e5       	ldi	r26, 0x53	; 83
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e3 e5       	ldi	r30, 0x53	; 83
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	88 60       	ori	r24, 0x08	; 8
    1d94:	8c 93       	st	X, r24
	/*2- Select OC0 Action */
	CLR_BIT (TCCR0 , COM00);
    1d96:	a3 e5       	ldi	r26, 0x53	; 83
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e3 e5       	ldi	r30, 0x53	; 83
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	8f 7e       	andi	r24, 0xEF	; 239
    1da2:	8c 93       	st	X, r24
	SET_BIT (TCCR0 , COM01);
    1da4:	a3 e5       	ldi	r26, 0x53	; 83
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e3 e5       	ldi	r30, 0x53	; 83
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	80 62       	ori	r24, 0x20	; 32
    1db0:	8c 93       	st	X, r24
	/*2- Select Prescaler ==> /8*/
	CLR_BIT (TCCR0 , CS00);
    1db2:	a3 e5       	ldi	r26, 0x53	; 83
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e3 e5       	ldi	r30, 0x53	; 83
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	8e 7f       	andi	r24, 0xFE	; 254
    1dbe:	8c 93       	st	X, r24
	SET_BIT (TCCR0 , CS01);
    1dc0:	a3 e5       	ldi	r26, 0x53	; 83
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e3 e5       	ldi	r30, 0x53	; 83
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	82 60       	ori	r24, 0x02	; 2
    1dcc:	8c 93       	st	X, r24
	CLR_BIT (TCCR0 , CS02);
    1dce:	a3 e5       	ldi	r26, 0x53	; 83
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e3 e5       	ldi	r30, 0x53	; 83
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	8b 7f       	andi	r24, 0xFB	; 251
    1dda:	8c 93       	st	X, r24
	SET_BIT (TCCR0 , CS01);
	CLR_BIT (TCCR0 , CS02);

#endif

}
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <TIMER0_voidSetCallBack>:

void TIMER0_voidSetCallBack (void (*Copy_PFvoidName) (void))
{
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <TIMER0_voidSetCallBack+0x6>
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	9a 83       	std	Y+2, r25	; 0x02
    1dee:	89 83       	std	Y+1, r24	; 0x01
#if TIMER0_MODE == TIMER0_OVF_MODE
	TIMER0_PFvoidOVFCall = Copy_PFvoidName ;
#elif TIMER0_MODE == TIMER0_CTC_MODE
	TIMER0_PFvoidCTCCall = Copy_PFvoidName ;
#endif
}
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	08 95       	ret

00001dfa <TIMER0_voidSetOCR0Value>:


void TIMER0_voidSetOCR0Value (u8 Copy_u8OCR0Value)
{
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	0f 92       	push	r0
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8OCR0Value ;
    1e06:	ec e5       	ldi	r30, 0x5C	; 92
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	80 83       	st	Z, r24
}
    1e0e:	0f 90       	pop	r0
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	08 95       	ret

00001e16 <__vector_11>:


ISR(TIMER0_OVF_vect)
{
    1e16:	1f 92       	push	r1
    1e18:	0f 92       	push	r0
    1e1a:	0f b6       	in	r0, 0x3f	; 63
    1e1c:	0f 92       	push	r0
    1e1e:	11 24       	eor	r1, r1
    1e20:	2f 93       	push	r18
    1e22:	3f 93       	push	r19
    1e24:	4f 93       	push	r20
    1e26:	5f 93       	push	r21
    1e28:	6f 93       	push	r22
    1e2a:	7f 93       	push	r23
    1e2c:	8f 93       	push	r24
    1e2e:	9f 93       	push	r25
    1e30:	af 93       	push	r26
    1e32:	bf 93       	push	r27
    1e34:	ef 93       	push	r30
    1e36:	ff 93       	push	r31
    1e38:	df 93       	push	r29
    1e3a:	cf 93       	push	r28
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16OVFCounter = 0 ;
	Local_u16OVFCounter ++ ;
    1e40:	80 91 82 00 	lds	r24, 0x0082
    1e44:	90 91 83 00 	lds	r25, 0x0083
    1e48:	01 96       	adiw	r24, 0x01	; 1
    1e4a:	90 93 83 00 	sts	0x0083, r25
    1e4e:	80 93 82 00 	sts	0x0082, r24
	if (Local_u16OVFCounter == 3907)
    1e52:	80 91 82 00 	lds	r24, 0x0082
    1e56:	90 91 83 00 	lds	r25, 0x0083
    1e5a:	2f e0       	ldi	r18, 0x0F	; 15
    1e5c:	83 34       	cpi	r24, 0x43	; 67
    1e5e:	92 07       	cpc	r25, r18
    1e60:	69 f4       	brne	.+26     	; 0x1e7c <__vector_11+0x66>
	{
		/*Set Preload Value ==> 192*/
		TCNT0 = 192 ;
    1e62:	e2 e5       	ldi	r30, 0x52	; 82
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 ec       	ldi	r24, 0xC0	; 192
    1e68:	80 83       	st	Z, r24
		/*Clear Counter */ 
		Local_u16OVFCounter = 0 ;
    1e6a:	10 92 83 00 	sts	0x0083, r1
    1e6e:	10 92 82 00 	sts	0x0082, r1
		/*Action*/
		TIMER0_PFvoidOVFCall();
    1e72:	e0 91 7e 00 	lds	r30, 0x007E
    1e76:	f0 91 7f 00 	lds	r31, 0x007F
    1e7a:	09 95       	icall
	}
}
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	ff 91       	pop	r31
    1e82:	ef 91       	pop	r30
    1e84:	bf 91       	pop	r27
    1e86:	af 91       	pop	r26
    1e88:	9f 91       	pop	r25
    1e8a:	8f 91       	pop	r24
    1e8c:	7f 91       	pop	r23
    1e8e:	6f 91       	pop	r22
    1e90:	5f 91       	pop	r21
    1e92:	4f 91       	pop	r20
    1e94:	3f 91       	pop	r19
    1e96:	2f 91       	pop	r18
    1e98:	0f 90       	pop	r0
    1e9a:	0f be       	out	0x3f, r0	; 63
    1e9c:	0f 90       	pop	r0
    1e9e:	1f 90       	pop	r1
    1ea0:	18 95       	reti

00001ea2 <__vector_10>:


ISR(TIMER0_COMP_vect)
{
    1ea2:	1f 92       	push	r1
    1ea4:	0f 92       	push	r0
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	0f 92       	push	r0
    1eaa:	11 24       	eor	r1, r1
    1eac:	2f 93       	push	r18
    1eae:	3f 93       	push	r19
    1eb0:	4f 93       	push	r20
    1eb2:	5f 93       	push	r21
    1eb4:	6f 93       	push	r22
    1eb6:	7f 93       	push	r23
    1eb8:	8f 93       	push	r24
    1eba:	9f 93       	push	r25
    1ebc:	af 93       	push	r26
    1ebe:	bf 93       	push	r27
    1ec0:	ef 93       	push	r30
    1ec2:	ff 93       	push	r31
    1ec4:	df 93       	push	r29
    1ec6:	cf 93       	push	r28
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CTCCounter = 0 ;
	Local_u16CTCCounter ++ ;
    1ecc:	80 91 84 00 	lds	r24, 0x0084
    1ed0:	90 91 85 00 	lds	r25, 0x0085
    1ed4:	01 96       	adiw	r24, 0x01	; 1
    1ed6:	90 93 85 00 	sts	0x0085, r25
    1eda:	80 93 84 00 	sts	0x0084, r24
	if (Local_u16CTCCounter == 10000)
    1ede:	80 91 84 00 	lds	r24, 0x0084
    1ee2:	90 91 85 00 	lds	r25, 0x0085
    1ee6:	27 e2       	ldi	r18, 0x27	; 39
    1ee8:	80 31       	cpi	r24, 0x10	; 16
    1eea:	92 07       	cpc	r25, r18
    1eec:	49 f4       	brne	.+18     	; 0x1f00 <__vector_10+0x5e>
	{
		/*Action*/
		TIMER0_PFvoidCTCCall();
    1eee:	e0 91 80 00 	lds	r30, 0x0080
    1ef2:	f0 91 81 00 	lds	r31, 0x0081
    1ef6:	09 95       	icall
		/*Clear Counter*/
		Local_u16CTCCounter = 0 ;
    1ef8:	10 92 85 00 	sts	0x0085, r1
    1efc:	10 92 84 00 	sts	0x0084, r1
	}
}
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	ff 91       	pop	r31
    1f06:	ef 91       	pop	r30
    1f08:	bf 91       	pop	r27
    1f0a:	af 91       	pop	r26
    1f0c:	9f 91       	pop	r25
    1f0e:	8f 91       	pop	r24
    1f10:	7f 91       	pop	r23
    1f12:	6f 91       	pop	r22
    1f14:	5f 91       	pop	r21
    1f16:	4f 91       	pop	r20
    1f18:	3f 91       	pop	r19
    1f1a:	2f 91       	pop	r18
    1f1c:	0f 90       	pop	r0
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	0f 90       	pop	r0
    1f22:	1f 90       	pop	r1
    1f24:	18 95       	reti

00001f26 <ADC_voidInit>:
#include "../01-DIO/DIO.h"
#include "ADC.h"


void ADC_voidInit (void)
{
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
	/*Enable ADC*/
	SET_BIT(ADCSRA , ADEN);
    1f2e:	a6 e2       	ldi	r26, 0x26	; 38
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	e6 e2       	ldi	r30, 0x26	; 38
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	80 68       	ori	r24, 0x80	; 128
    1f3a:	8c 93       	st	X, r24
	
	/*Select V Rer ==> AVCC = 5V */
	SET_BIT (ADMUX , REFS0);
    1f3c:	a7 e2       	ldi	r26, 0x27	; 39
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e7 e2       	ldi	r30, 0x27	; 39
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	80 64       	ori	r24, 0x40	; 64
    1f48:	8c 93       	st	X, r24
	CLR_BIT (ADMUX , REFS1);
    1f4a:	a7 e2       	ldi	r26, 0x27	; 39
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	e7 e2       	ldi	r30, 0x27	; 39
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	8f 77       	andi	r24, 0x7F	; 127
    1f56:	8c 93       	st	X, r24
	
	/*Right Adjust*/
	CLR_BIT (ADMUX , ADLAR);
    1f58:	a7 e2       	ldi	r26, 0x27	; 39
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	e7 e2       	ldi	r30, 0x27	; 39
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	8f 7d       	andi	r24, 0xDF	; 223
    1f64:	8c 93       	st	X, r24
	
	/*Disable Auto Trig*/
	CLR_BIT (ADCSRA , ADATE);
    1f66:	a6 e2       	ldi	r26, 0x26	; 38
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	e6 e2       	ldi	r30, 0x26	; 38
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	8f 7d       	andi	r24, 0xDF	; 223
    1f72:	8c 93       	st	X, r24
	
	/*Select Prescaler*/
	CLR_BIT (ADCSRA , ADPS0);
    1f74:	a6 e2       	ldi	r26, 0x26	; 38
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	e6 e2       	ldi	r30, 0x26	; 38
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	8e 7f       	andi	r24, 0xFE	; 254
    1f80:	8c 93       	st	X, r24
	SET_BIT (ADCSRA , ADPS1);
    1f82:	a6 e2       	ldi	r26, 0x26	; 38
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	e6 e2       	ldi	r30, 0x26	; 38
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	82 60       	ori	r24, 0x02	; 2
    1f8e:	8c 93       	st	X, r24
	SET_BIT (ADCSRA , ADPS2);
    1f90:	a6 e2       	ldi	r26, 0x26	; 38
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	e6 e2       	ldi	r30, 0x26	; 38
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	84 60       	ori	r24, 0x04	; 4
    1f9c:	8c 93       	st	X, r24
}
    1f9e:	cf 91       	pop	r28
    1fa0:	df 91       	pop	r29
    1fa2:	08 95       	ret

00001fa4 <ADC_u16GetDigitalValue>:
u16  ADC_u16GetDigitalValue (u8 Copy_u8ChannelNum)
{
    1fa4:	df 93       	push	r29
    1fa6:	cf 93       	push	r28
    1fa8:	00 d0       	rcall	.+0      	; 0x1faa <ADC_u16GetDigitalValue+0x6>
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	89 83       	std	Y+1, r24	; 0x01
	/*Select Channel*/
	ADMUX &= ADC_CHANNEL_RESET ;
    1fb0:	a7 e2       	ldi	r26, 0x27	; 39
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e7 e2       	ldi	r30, 0x27	; 39
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	80 7e       	andi	r24, 0xE0	; 224
    1fbc:	8c 93       	st	X, r24
	ADMUX |= Copy_u8ChannelNum ;
    1fbe:	a7 e2       	ldi	r26, 0x27	; 39
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e7 e2       	ldi	r30, 0x27	; 39
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	90 81       	ld	r25, Z
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	89 2b       	or	r24, r25
    1fcc:	8c 93       	st	X, r24
	
	/*Start Conversion*/
	SET_BIT (ADCSRA , ADSC);
    1fce:	a6 e2       	ldi	r26, 0x26	; 38
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	e6 e2       	ldi	r30, 0x26	; 38
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	80 64       	ori	r24, 0x40	; 64
    1fda:	8c 93       	st	X, r24
	
	/*wait flag = 1*/
	while (GET_BIT(ADCSRA , ADIF) == 0);
    1fdc:	e6 e2       	ldi	r30, 0x26	; 38
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
	
	/*Clear flag*/
	SET_BIT (ADCSRA , ADIF);
    1fe2:	a6 e2       	ldi	r26, 0x26	; 38
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	e6 e2       	ldi	r30, 0x26	; 38
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	80 81       	ld	r24, Z
    1fec:	80 61       	ori	r24, 0x10	; 16
    1fee:	8c 93       	st	X, r24
	
	/*Read the digital value*/
	return ADC_REG ;
    1ff0:	e4 e2       	ldi	r30, 0x24	; 36
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	91 81       	ldd	r25, Z+1	; 0x01
}
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	cf 91       	pop	r28
    1ffe:	df 91       	pop	r29
    2000:	08 95       	ret

00002002 <INT_voidEnable>:
#include "INT.h"

static void (*INT_voidPFCall[3]) (void) = {0} ;

void INT_voidEnable (u8 Copy_u8INTIndex , u8 Copy_u8Edge)
{
    2002:	df 93       	push	r29
    2004:	cf 93       	push	r28
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	2a 97       	sbiw	r28, 0x0a	; 10
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	f8 94       	cli
    2010:	de bf       	out	0x3e, r29	; 62
    2012:	0f be       	out	0x3f, r0	; 63
    2014:	cd bf       	out	0x3d, r28	; 61
    2016:	89 83       	std	Y+1, r24	; 0x01
    2018:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8INTIndex)
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	28 2f       	mov	r18, r24
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	3a 87       	std	Y+10, r19	; 0x0a
    2022:	29 87       	std	Y+9, r18	; 0x09
    2024:	89 85       	ldd	r24, Y+9	; 0x09
    2026:	9a 85       	ldd	r25, Y+10	; 0x0a
    2028:	81 30       	cpi	r24, 0x01	; 1
    202a:	91 05       	cpc	r25, r1
    202c:	09 f4       	brne	.+2      	; 0x2030 <INT_voidEnable+0x2e>
    202e:	6d c0       	rjmp	.+218    	; 0x210a <INT_voidEnable+0x108>
    2030:	29 85       	ldd	r18, Y+9	; 0x09
    2032:	3a 85       	ldd	r19, Y+10	; 0x0a
    2034:	22 30       	cpi	r18, 0x02	; 2
    2036:	31 05       	cpc	r19, r1
    2038:	09 f4       	brne	.+2      	; 0x203c <INT_voidEnable+0x3a>
    203a:	c9 c0       	rjmp	.+402    	; 0x21ce <INT_voidEnable+0x1cc>
    203c:	89 85       	ldd	r24, Y+9	; 0x09
    203e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2040:	00 97       	sbiw	r24, 0x00	; 0
    2042:	09 f0       	breq	.+2      	; 0x2046 <INT_voidEnable+0x44>
    2044:	e9 c0       	rjmp	.+466    	; 0x2218 <INT_voidEnable+0x216>
	{
		case EXT_INT0 :
			/*Edge Select*/
			switch (Copy_u8Edge)
    2046:	8a 81       	ldd	r24, Y+2	; 0x02
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	38 87       	std	Y+8, r19	; 0x08
    204e:	2f 83       	std	Y+7, r18	; 0x07
    2050:	8f 81       	ldd	r24, Y+7	; 0x07
    2052:	98 85       	ldd	r25, Y+8	; 0x08
    2054:	81 30       	cpi	r24, 0x01	; 1
    2056:	91 05       	cpc	r25, r1
    2058:	21 f1       	breq	.+72     	; 0x20a2 <INT_voidEnable+0xa0>
    205a:	2f 81       	ldd	r18, Y+7	; 0x07
    205c:	38 85       	ldd	r19, Y+8	; 0x08
    205e:	22 30       	cpi	r18, 0x02	; 2
    2060:	31 05       	cpc	r19, r1
    2062:	2c f4       	brge	.+10     	; 0x206e <INT_voidEnable+0x6c>
    2064:	8f 81       	ldd	r24, Y+7	; 0x07
    2066:	98 85       	ldd	r25, Y+8	; 0x08
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	61 f0       	breq	.+24     	; 0x2084 <INT_voidEnable+0x82>
    206c:	46 c0       	rjmp	.+140    	; 0x20fa <INT_voidEnable+0xf8>
    206e:	2f 81       	ldd	r18, Y+7	; 0x07
    2070:	38 85       	ldd	r19, Y+8	; 0x08
    2072:	22 30       	cpi	r18, 0x02	; 2
    2074:	31 05       	cpc	r19, r1
    2076:	21 f1       	breq	.+72     	; 0x20c0 <INT_voidEnable+0xbe>
    2078:	8f 81       	ldd	r24, Y+7	; 0x07
    207a:	98 85       	ldd	r25, Y+8	; 0x08
    207c:	83 30       	cpi	r24, 0x03	; 3
    207e:	91 05       	cpc	r25, r1
    2080:	71 f1       	breq	.+92     	; 0x20de <INT_voidEnable+0xdc>
    2082:	3b c0       	rjmp	.+118    	; 0x20fa <INT_voidEnable+0xf8>
			{
				case INT_FALLING_EDGE 		: 
					CLR_BIT (MCUCR , ISC00);
    2084:	a5 e5       	ldi	r26, 0x55	; 85
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	e5 e5       	ldi	r30, 0x55	; 85
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	8e 7f       	andi	r24, 0xFE	; 254
    2090:	8c 93       	st	X, r24
					SET_BIT (MCUCR , ISC01);
    2092:	a5 e5       	ldi	r26, 0x55	; 85
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	e5 e5       	ldi	r30, 0x55	; 85
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	82 60       	ori	r24, 0x02	; 2
    209e:	8c 93       	st	X, r24
    20a0:	2c c0       	rjmp	.+88     	; 0x20fa <INT_voidEnable+0xf8>
					break ;
				case INT_RISING_EDGE  		:
					SET_BIT (MCUCR , ISC00);
    20a2:	a5 e5       	ldi	r26, 0x55	; 85
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	e5 e5       	ldi	r30, 0x55	; 85
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	81 60       	ori	r24, 0x01	; 1
    20ae:	8c 93       	st	X, r24
					SET_BIT (MCUCR , ISC01);
    20b0:	a5 e5       	ldi	r26, 0x55	; 85
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e5 e5       	ldi	r30, 0x55	; 85
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	82 60       	ori	r24, 0x02	; 2
    20bc:	8c 93       	st	X, r24
    20be:	1d c0       	rjmp	.+58     	; 0x20fa <INT_voidEnable+0xf8>
					break ;
				case INT_ANY_LOGICAL_CHANGE :
					SET_BIT (MCUCR , ISC00);
    20c0:	a5 e5       	ldi	r26, 0x55	; 85
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e5 e5       	ldi	r30, 0x55	; 85
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	81 60       	ori	r24, 0x01	; 1
    20cc:	8c 93       	st	X, r24
					CLR_BIT (MCUCR , ISC01);
    20ce:	a5 e5       	ldi	r26, 0x55	; 85
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e5 e5       	ldi	r30, 0x55	; 85
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	8d 7f       	andi	r24, 0xFD	; 253
    20da:	8c 93       	st	X, r24
    20dc:	0e c0       	rjmp	.+28     	; 0x20fa <INT_voidEnable+0xf8>
					break ;
				case INT_LOW_LEVEL 			:
					CLR_BIT (MCUCR , ISC00);
    20de:	a5 e5       	ldi	r26, 0x55	; 85
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	e5 e5       	ldi	r30, 0x55	; 85
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	8e 7f       	andi	r24, 0xFE	; 254
    20ea:	8c 93       	st	X, r24
					CLR_BIT (MCUCR , ISC01);
    20ec:	a5 e5       	ldi	r26, 0x55	; 85
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	e5 e5       	ldi	r30, 0x55	; 85
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	8d 7f       	andi	r24, 0xFD	; 253
    20f8:	8c 93       	st	X, r24
					break ;
			}
			/*INT0 Enable*/
			SET_BIT (GICR , INT0);
    20fa:	ab e5       	ldi	r26, 0x5B	; 91
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	eb e5       	ldi	r30, 0x5B	; 91
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	80 64       	ori	r24, 0x40	; 64
    2106:	8c 93       	st	X, r24
    2108:	87 c0       	rjmp	.+270    	; 0x2218 <INT_voidEnable+0x216>
			break ;
		case EXT_INT1 :
			/*Edge Select*/
			switch (Copy_u8Edge)
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	28 2f       	mov	r18, r24
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	3e 83       	std	Y+6, r19	; 0x06
    2112:	2d 83       	std	Y+5, r18	; 0x05
    2114:	8d 81       	ldd	r24, Y+5	; 0x05
    2116:	9e 81       	ldd	r25, Y+6	; 0x06
    2118:	81 30       	cpi	r24, 0x01	; 1
    211a:	91 05       	cpc	r25, r1
    211c:	21 f1       	breq	.+72     	; 0x2166 <INT_voidEnable+0x164>
    211e:	2d 81       	ldd	r18, Y+5	; 0x05
    2120:	3e 81       	ldd	r19, Y+6	; 0x06
    2122:	22 30       	cpi	r18, 0x02	; 2
    2124:	31 05       	cpc	r19, r1
    2126:	2c f4       	brge	.+10     	; 0x2132 <INT_voidEnable+0x130>
    2128:	8d 81       	ldd	r24, Y+5	; 0x05
    212a:	9e 81       	ldd	r25, Y+6	; 0x06
    212c:	00 97       	sbiw	r24, 0x00	; 0
    212e:	61 f0       	breq	.+24     	; 0x2148 <INT_voidEnable+0x146>
    2130:	46 c0       	rjmp	.+140    	; 0x21be <INT_voidEnable+0x1bc>
    2132:	2d 81       	ldd	r18, Y+5	; 0x05
    2134:	3e 81       	ldd	r19, Y+6	; 0x06
    2136:	22 30       	cpi	r18, 0x02	; 2
    2138:	31 05       	cpc	r19, r1
    213a:	21 f1       	breq	.+72     	; 0x2184 <INT_voidEnable+0x182>
    213c:	8d 81       	ldd	r24, Y+5	; 0x05
    213e:	9e 81       	ldd	r25, Y+6	; 0x06
    2140:	83 30       	cpi	r24, 0x03	; 3
    2142:	91 05       	cpc	r25, r1
    2144:	71 f1       	breq	.+92     	; 0x21a2 <INT_voidEnable+0x1a0>
    2146:	3b c0       	rjmp	.+118    	; 0x21be <INT_voidEnable+0x1bc>
			{
				case INT_FALLING_EDGE 		: 
					CLR_BIT (MCUCR , ISC10);
    2148:	a5 e5       	ldi	r26, 0x55	; 85
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	e5 e5       	ldi	r30, 0x55	; 85
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	8b 7f       	andi	r24, 0xFB	; 251
    2154:	8c 93       	st	X, r24
					SET_BIT (MCUCR , ISC11);
    2156:	a5 e5       	ldi	r26, 0x55	; 85
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	e5 e5       	ldi	r30, 0x55	; 85
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	88 60       	ori	r24, 0x08	; 8
    2162:	8c 93       	st	X, r24
    2164:	2c c0       	rjmp	.+88     	; 0x21be <INT_voidEnable+0x1bc>
					break ;
				case INT_RISING_EDGE  		:
					SET_BIT (MCUCR , ISC10);
    2166:	a5 e5       	ldi	r26, 0x55	; 85
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	e5 e5       	ldi	r30, 0x55	; 85
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	84 60       	ori	r24, 0x04	; 4
    2172:	8c 93       	st	X, r24
					SET_BIT (MCUCR , ISC11);
    2174:	a5 e5       	ldi	r26, 0x55	; 85
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	e5 e5       	ldi	r30, 0x55	; 85
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	88 60       	ori	r24, 0x08	; 8
    2180:	8c 93       	st	X, r24
    2182:	1d c0       	rjmp	.+58     	; 0x21be <INT_voidEnable+0x1bc>
					break ;
				case INT_ANY_LOGICAL_CHANGE :
					SET_BIT (MCUCR , ISC10);
    2184:	a5 e5       	ldi	r26, 0x55	; 85
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	e5 e5       	ldi	r30, 0x55	; 85
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	84 60       	ori	r24, 0x04	; 4
    2190:	8c 93       	st	X, r24
					CLR_BIT (MCUCR , ISC11);
    2192:	a5 e5       	ldi	r26, 0x55	; 85
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	e5 e5       	ldi	r30, 0x55	; 85
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	87 7f       	andi	r24, 0xF7	; 247
    219e:	8c 93       	st	X, r24
    21a0:	0e c0       	rjmp	.+28     	; 0x21be <INT_voidEnable+0x1bc>
					break ;
				case INT_LOW_LEVEL 			:
					CLR_BIT (MCUCR , ISC10);
    21a2:	a5 e5       	ldi	r26, 0x55	; 85
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e5 e5       	ldi	r30, 0x55	; 85
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	8b 7f       	andi	r24, 0xFB	; 251
    21ae:	8c 93       	st	X, r24
					CLR_BIT (MCUCR , ISC11);
    21b0:	a5 e5       	ldi	r26, 0x55	; 85
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e5 e5       	ldi	r30, 0x55	; 85
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	87 7f       	andi	r24, 0xF7	; 247
    21bc:	8c 93       	st	X, r24
					break ;
			}
			/*INT1 Enable*/
			SET_BIT (GICR , INT1);
    21be:	ab e5       	ldi	r26, 0x5B	; 91
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	eb e5       	ldi	r30, 0x5B	; 91
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	80 68       	ori	r24, 0x80	; 128
    21ca:	8c 93       	st	X, r24
    21cc:	25 c0       	rjmp	.+74     	; 0x2218 <INT_voidEnable+0x216>
			break ;
		case EXT_INT2 :
			/*Edge Select*/
			switch (Copy_u8Edge)
    21ce:	8a 81       	ldd	r24, Y+2	; 0x02
    21d0:	28 2f       	mov	r18, r24
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	3c 83       	std	Y+4, r19	; 0x04
    21d6:	2b 83       	std	Y+3, r18	; 0x03
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	9c 81       	ldd	r25, Y+4	; 0x04
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	31 f0       	breq	.+12     	; 0x21ec <INT_voidEnable+0x1ea>
    21e0:	2b 81       	ldd	r18, Y+3	; 0x03
    21e2:	3c 81       	ldd	r19, Y+4	; 0x04
    21e4:	21 30       	cpi	r18, 0x01	; 1
    21e6:	31 05       	cpc	r19, r1
    21e8:	49 f0       	breq	.+18     	; 0x21fc <INT_voidEnable+0x1fa>
    21ea:	0f c0       	rjmp	.+30     	; 0x220a <INT_voidEnable+0x208>
			{
			case INT_FALLING_EDGE 		: 
				CLR_BIT(MCUCSR , ISC2);
    21ec:	a4 e5       	ldi	r26, 0x54	; 84
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	e4 e5       	ldi	r30, 0x54	; 84
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	8f 7b       	andi	r24, 0xBF	; 191
    21f8:	8c 93       	st	X, r24
    21fa:	07 c0       	rjmp	.+14     	; 0x220a <INT_voidEnable+0x208>
				break ;
			case INT_RISING_EDGE  		:
				SET_BIT(MCUCSR , ISC2);
    21fc:	a4 e5       	ldi	r26, 0x54	; 84
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	e4 e5       	ldi	r30, 0x54	; 84
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	80 64       	ori	r24, 0x40	; 64
    2208:	8c 93       	st	X, r24
				break ;
			}
			/*INT2 Enable*/
			SET_BIT(GICR , INT2);
    220a:	ab e5       	ldi	r26, 0x5B	; 91
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	eb e5       	ldi	r30, 0x5B	; 91
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	80 62       	ori	r24, 0x20	; 32
    2216:	8c 93       	st	X, r24
			break ;
	}
}
    2218:	2a 96       	adiw	r28, 0x0a	; 10
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	08 95       	ret

0000222a <INT_voidDisable>:


void INT_voidDisable (u8 Copy_u8INTIndex)
{
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	00 d0       	rcall	.+0      	; 0x2230 <INT_voidDisable+0x6>
    2230:	0f 92       	push	r0
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8INTIndex)
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	3b 83       	std	Y+3, r19	; 0x03
    2240:	2a 83       	std	Y+2, r18	; 0x02
    2242:	8a 81       	ldd	r24, Y+2	; 0x02
    2244:	9b 81       	ldd	r25, Y+3	; 0x03
    2246:	81 30       	cpi	r24, 0x01	; 1
    2248:	91 05       	cpc	r25, r1
    224a:	89 f0       	breq	.+34     	; 0x226e <INT_voidDisable+0x44>
    224c:	2a 81       	ldd	r18, Y+2	; 0x02
    224e:	3b 81       	ldd	r19, Y+3	; 0x03
    2250:	22 30       	cpi	r18, 0x02	; 2
    2252:	31 05       	cpc	r19, r1
    2254:	a1 f0       	breq	.+40     	; 0x227e <INT_voidDisable+0x54>
    2256:	8a 81       	ldd	r24, Y+2	; 0x02
    2258:	9b 81       	ldd	r25, Y+3	; 0x03
    225a:	00 97       	sbiw	r24, 0x00	; 0
    225c:	b9 f4       	brne	.+46     	; 0x228c <INT_voidDisable+0x62>
	{
		case EXT_INT0 :  CLR_BIT (GICR , INT0) ; break ;
    225e:	ab e5       	ldi	r26, 0x5B	; 91
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	eb e5       	ldi	r30, 0x5B	; 91
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	8f 7b       	andi	r24, 0xBF	; 191
    226a:	8c 93       	st	X, r24
    226c:	0f c0       	rjmp	.+30     	; 0x228c <INT_voidDisable+0x62>
		case EXT_INT1 :  CLR_BIT (GICR , INT1) ; break ;
    226e:	ab e5       	ldi	r26, 0x5B	; 91
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	eb e5       	ldi	r30, 0x5B	; 91
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	8f 77       	andi	r24, 0x7F	; 127
    227a:	8c 93       	st	X, r24
    227c:	07 c0       	rjmp	.+14     	; 0x228c <INT_voidDisable+0x62>
		case EXT_INT2 :  CLR_BIT (GICR , INT2) ; break ;
    227e:	ab e5       	ldi	r26, 0x5B	; 91
    2280:	b0 e0       	ldi	r27, 0x00	; 0
    2282:	eb e5       	ldi	r30, 0x5B	; 91
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	80 81       	ld	r24, Z
    2288:	8f 7d       	andi	r24, 0xDF	; 223
    228a:	8c 93       	st	X, r24
		
	}
}
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	cf 91       	pop	r28
    2294:	df 91       	pop	r29
    2296:	08 95       	ret

00002298 <INT_voidSetCallBack>:

void INT_voidSetCallBack (u8 Copy_u8Index , void (*Copy_voidPFNameFunc) (void))
{
    2298:	df 93       	push	r29
    229a:	cf 93       	push	r28
    229c:	00 d0       	rcall	.+0      	; 0x229e <INT_voidSetCallBack+0x6>
    229e:	0f 92       	push	r0
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	89 83       	std	Y+1, r24	; 0x01
    22a6:	7b 83       	std	Y+3, r23	; 0x03
    22a8:	6a 83       	std	Y+2, r22	; 0x02
	INT_voidPFCall[Copy_u8Index] = Copy_voidPFNameFunc ;
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	88 2f       	mov	r24, r24
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	88 0f       	add	r24, r24
    22b2:	99 1f       	adc	r25, r25
    22b4:	fc 01       	movw	r30, r24
    22b6:	ea 57       	subi	r30, 0x7A	; 122
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	8a 81       	ldd	r24, Y+2	; 0x02
    22bc:	9b 81       	ldd	r25, Y+3	; 0x03
    22be:	91 83       	std	Z+1, r25	; 0x01
    22c0:	80 83       	st	Z, r24
}
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	08 95       	ret

000022ce <__vector_1>:

ISR(INT0_vect)
{
    22ce:	1f 92       	push	r1
    22d0:	0f 92       	push	r0
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	0f 92       	push	r0
    22d6:	11 24       	eor	r1, r1
    22d8:	2f 93       	push	r18
    22da:	3f 93       	push	r19
    22dc:	4f 93       	push	r20
    22de:	5f 93       	push	r21
    22e0:	6f 93       	push	r22
    22e2:	7f 93       	push	r23
    22e4:	8f 93       	push	r24
    22e6:	9f 93       	push	r25
    22e8:	af 93       	push	r26
    22ea:	bf 93       	push	r27
    22ec:	ef 93       	push	r30
    22ee:	ff 93       	push	r31
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
	if (INT_voidPFCall[0] != NULL)
    22f8:	80 91 86 00 	lds	r24, 0x0086
    22fc:	90 91 87 00 	lds	r25, 0x0087
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	29 f0       	breq	.+10     	; 0x230e <__vector_1+0x40>
	INT_voidPFCall[0]();
    2304:	e0 91 86 00 	lds	r30, 0x0086
    2308:	f0 91 87 00 	lds	r31, 0x0087
    230c:	09 95       	icall
}
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	ff 91       	pop	r31
    2314:	ef 91       	pop	r30
    2316:	bf 91       	pop	r27
    2318:	af 91       	pop	r26
    231a:	9f 91       	pop	r25
    231c:	8f 91       	pop	r24
    231e:	7f 91       	pop	r23
    2320:	6f 91       	pop	r22
    2322:	5f 91       	pop	r21
    2324:	4f 91       	pop	r20
    2326:	3f 91       	pop	r19
    2328:	2f 91       	pop	r18
    232a:	0f 90       	pop	r0
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	0f 90       	pop	r0
    2330:	1f 90       	pop	r1
    2332:	18 95       	reti

00002334 <__vector_2>:

ISR(INT1_vect)
{
    2334:	1f 92       	push	r1
    2336:	0f 92       	push	r0
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	0f 92       	push	r0
    233c:	11 24       	eor	r1, r1
    233e:	2f 93       	push	r18
    2340:	3f 93       	push	r19
    2342:	4f 93       	push	r20
    2344:	5f 93       	push	r21
    2346:	6f 93       	push	r22
    2348:	7f 93       	push	r23
    234a:	8f 93       	push	r24
    234c:	9f 93       	push	r25
    234e:	af 93       	push	r26
    2350:	bf 93       	push	r27
    2352:	ef 93       	push	r30
    2354:	ff 93       	push	r31
    2356:	df 93       	push	r29
    2358:	cf 93       	push	r28
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
	if (INT_voidPFCall[1] != NULL)
    235e:	80 91 88 00 	lds	r24, 0x0088
    2362:	90 91 89 00 	lds	r25, 0x0089
    2366:	00 97       	sbiw	r24, 0x00	; 0
    2368:	29 f0       	breq	.+10     	; 0x2374 <__vector_2+0x40>
	INT_voidPFCall[1]();
    236a:	e0 91 88 00 	lds	r30, 0x0088
    236e:	f0 91 89 00 	lds	r31, 0x0089
    2372:	09 95       	icall
}
    2374:	cf 91       	pop	r28
    2376:	df 91       	pop	r29
    2378:	ff 91       	pop	r31
    237a:	ef 91       	pop	r30
    237c:	bf 91       	pop	r27
    237e:	af 91       	pop	r26
    2380:	9f 91       	pop	r25
    2382:	8f 91       	pop	r24
    2384:	7f 91       	pop	r23
    2386:	6f 91       	pop	r22
    2388:	5f 91       	pop	r21
    238a:	4f 91       	pop	r20
    238c:	3f 91       	pop	r19
    238e:	2f 91       	pop	r18
    2390:	0f 90       	pop	r0
    2392:	0f be       	out	0x3f, r0	; 63
    2394:	0f 90       	pop	r0
    2396:	1f 90       	pop	r1
    2398:	18 95       	reti

0000239a <__vector_3>:
ISR(INT2_vect)
{
    239a:	1f 92       	push	r1
    239c:	0f 92       	push	r0
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	0f 92       	push	r0
    23a2:	11 24       	eor	r1, r1
    23a4:	2f 93       	push	r18
    23a6:	3f 93       	push	r19
    23a8:	4f 93       	push	r20
    23aa:	5f 93       	push	r21
    23ac:	6f 93       	push	r22
    23ae:	7f 93       	push	r23
    23b0:	8f 93       	push	r24
    23b2:	9f 93       	push	r25
    23b4:	af 93       	push	r26
    23b6:	bf 93       	push	r27
    23b8:	ef 93       	push	r30
    23ba:	ff 93       	push	r31
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
	if (INT_voidPFCall[2] != NULL)
    23c4:	80 91 8a 00 	lds	r24, 0x008A
    23c8:	90 91 8b 00 	lds	r25, 0x008B
    23cc:	00 97       	sbiw	r24, 0x00	; 0
    23ce:	29 f0       	breq	.+10     	; 0x23da <__vector_3+0x40>
	INT_voidPFCall[2]();
    23d0:	e0 91 8a 00 	lds	r30, 0x008A
    23d4:	f0 91 8b 00 	lds	r31, 0x008B
    23d8:	09 95       	icall
}
    23da:	cf 91       	pop	r28
    23dc:	df 91       	pop	r29
    23de:	ff 91       	pop	r31
    23e0:	ef 91       	pop	r30
    23e2:	bf 91       	pop	r27
    23e4:	af 91       	pop	r26
    23e6:	9f 91       	pop	r25
    23e8:	8f 91       	pop	r24
    23ea:	7f 91       	pop	r23
    23ec:	6f 91       	pop	r22
    23ee:	5f 91       	pop	r21
    23f0:	4f 91       	pop	r20
    23f2:	3f 91       	pop	r19
    23f4:	2f 91       	pop	r18
    23f6:	0f 90       	pop	r0
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	0f 90       	pop	r0
    23fc:	1f 90       	pop	r1
    23fe:	18 95       	reti

00002400 <DIO_voidSetPinDirection>:
#include "../../01-LIB/BIT_MATH.h"

#include "DIO.h"

void DIO_voidSetPinDirection (u8 Copy_u8Port , u8 Copy_u8Pin  , u8 Copy_u8Direction)
{
    2400:	df 93       	push	r29
    2402:	cf 93       	push	r28
    2404:	cd b7       	in	r28, 0x3d	; 61
    2406:	de b7       	in	r29, 0x3e	; 62
    2408:	27 97       	sbiw	r28, 0x07	; 7
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	f8 94       	cli
    240e:	de bf       	out	0x3e, r29	; 62
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	cd bf       	out	0x3d, r28	; 61
    2414:	89 83       	std	Y+1, r24	; 0x01
    2416:	6a 83       	std	Y+2, r22	; 0x02
    2418:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Direction == DIO_OUTPUT)
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	81 30       	cpi	r24, 0x01	; 1
    241e:	09 f0       	breq	.+2      	; 0x2422 <DIO_voidSetPinDirection+0x22>
    2420:	6f c0       	rjmp	.+222    	; 0x2500 <DIO_voidSetPinDirection+0x100>
	{
		switch (Copy_u8Port)
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	28 2f       	mov	r18, r24
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	3f 83       	std	Y+7, r19	; 0x07
    242a:	2e 83       	std	Y+6, r18	; 0x06
    242c:	8e 81       	ldd	r24, Y+6	; 0x06
    242e:	9f 81       	ldd	r25, Y+7	; 0x07
    2430:	81 30       	cpi	r24, 0x01	; 1
    2432:	91 05       	cpc	r25, r1
    2434:	49 f1       	breq	.+82     	; 0x2488 <DIO_voidSetPinDirection+0x88>
    2436:	2e 81       	ldd	r18, Y+6	; 0x06
    2438:	3f 81       	ldd	r19, Y+7	; 0x07
    243a:	22 30       	cpi	r18, 0x02	; 2
    243c:	31 05       	cpc	r19, r1
    243e:	2c f4       	brge	.+10     	; 0x244a <DIO_voidSetPinDirection+0x4a>
    2440:	8e 81       	ldd	r24, Y+6	; 0x06
    2442:	9f 81       	ldd	r25, Y+7	; 0x07
    2444:	00 97       	sbiw	r24, 0x00	; 0
    2446:	61 f0       	breq	.+24     	; 0x2460 <DIO_voidSetPinDirection+0x60>
    2448:	d2 c0       	rjmp	.+420    	; 0x25ee <DIO_voidSetPinDirection+0x1ee>
    244a:	2e 81       	ldd	r18, Y+6	; 0x06
    244c:	3f 81       	ldd	r19, Y+7	; 0x07
    244e:	22 30       	cpi	r18, 0x02	; 2
    2450:	31 05       	cpc	r19, r1
    2452:	71 f1       	breq	.+92     	; 0x24b0 <DIO_voidSetPinDirection+0xb0>
    2454:	8e 81       	ldd	r24, Y+6	; 0x06
    2456:	9f 81       	ldd	r25, Y+7	; 0x07
    2458:	83 30       	cpi	r24, 0x03	; 3
    245a:	91 05       	cpc	r25, r1
    245c:	e9 f1       	breq	.+122    	; 0x24d8 <DIO_voidSetPinDirection+0xd8>
    245e:	c7 c0       	rjmp	.+398    	; 0x25ee <DIO_voidSetPinDirection+0x1ee>
		{
			case DIO_PORTA : SET_BIT(DDRA , Copy_u8Pin); break ;
    2460:	aa e3       	ldi	r26, 0x3A	; 58
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	ea e3       	ldi	r30, 0x3A	; 58
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	48 2f       	mov	r20, r24
    246c:	8a 81       	ldd	r24, Y+2	; 0x02
    246e:	28 2f       	mov	r18, r24
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	02 2e       	mov	r0, r18
    2478:	02 c0       	rjmp	.+4      	; 0x247e <DIO_voidSetPinDirection+0x7e>
    247a:	88 0f       	add	r24, r24
    247c:	99 1f       	adc	r25, r25
    247e:	0a 94       	dec	r0
    2480:	e2 f7       	brpl	.-8      	; 0x247a <DIO_voidSetPinDirection+0x7a>
    2482:	84 2b       	or	r24, r20
    2484:	8c 93       	st	X, r24
    2486:	b3 c0       	rjmp	.+358    	; 0x25ee <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTB : SET_BIT(DDRB , Copy_u8Pin); break ;
    2488:	a7 e3       	ldi	r26, 0x37	; 55
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	e7 e3       	ldi	r30, 0x37	; 55
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	48 2f       	mov	r20, r24
    2494:	8a 81       	ldd	r24, Y+2	; 0x02
    2496:	28 2f       	mov	r18, r24
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	02 2e       	mov	r0, r18
    24a0:	02 c0       	rjmp	.+4      	; 0x24a6 <DIO_voidSetPinDirection+0xa6>
    24a2:	88 0f       	add	r24, r24
    24a4:	99 1f       	adc	r25, r25
    24a6:	0a 94       	dec	r0
    24a8:	e2 f7       	brpl	.-8      	; 0x24a2 <DIO_voidSetPinDirection+0xa2>
    24aa:	84 2b       	or	r24, r20
    24ac:	8c 93       	st	X, r24
    24ae:	9f c0       	rjmp	.+318    	; 0x25ee <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTC : SET_BIT(DDRC , Copy_u8Pin); break ;
    24b0:	a4 e3       	ldi	r26, 0x34	; 52
    24b2:	b0 e0       	ldi	r27, 0x00	; 0
    24b4:	e4 e3       	ldi	r30, 0x34	; 52
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	80 81       	ld	r24, Z
    24ba:	48 2f       	mov	r20, r24
    24bc:	8a 81       	ldd	r24, Y+2	; 0x02
    24be:	28 2f       	mov	r18, r24
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	02 2e       	mov	r0, r18
    24c8:	02 c0       	rjmp	.+4      	; 0x24ce <DIO_voidSetPinDirection+0xce>
    24ca:	88 0f       	add	r24, r24
    24cc:	99 1f       	adc	r25, r25
    24ce:	0a 94       	dec	r0
    24d0:	e2 f7       	brpl	.-8      	; 0x24ca <DIO_voidSetPinDirection+0xca>
    24d2:	84 2b       	or	r24, r20
    24d4:	8c 93       	st	X, r24
    24d6:	8b c0       	rjmp	.+278    	; 0x25ee <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTD : SET_BIT(DDRD , Copy_u8Pin); break ;
    24d8:	a1 e3       	ldi	r26, 0x31	; 49
    24da:	b0 e0       	ldi	r27, 0x00	; 0
    24dc:	e1 e3       	ldi	r30, 0x31	; 49
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	80 81       	ld	r24, Z
    24e2:	48 2f       	mov	r20, r24
    24e4:	8a 81       	ldd	r24, Y+2	; 0x02
    24e6:	28 2f       	mov	r18, r24
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	02 2e       	mov	r0, r18
    24f0:	02 c0       	rjmp	.+4      	; 0x24f6 <DIO_voidSetPinDirection+0xf6>
    24f2:	88 0f       	add	r24, r24
    24f4:	99 1f       	adc	r25, r25
    24f6:	0a 94       	dec	r0
    24f8:	e2 f7       	brpl	.-8      	; 0x24f2 <DIO_voidSetPinDirection+0xf2>
    24fa:	84 2b       	or	r24, r20
    24fc:	8c 93       	st	X, r24
    24fe:	77 c0       	rjmp	.+238    	; 0x25ee <DIO_voidSetPinDirection+0x1ee>
		}
	}
	else if (Copy_u8Direction == DIO_INPUT)
    2500:	8b 81       	ldd	r24, Y+3	; 0x03
    2502:	88 23       	and	r24, r24
    2504:	09 f0       	breq	.+2      	; 0x2508 <DIO_voidSetPinDirection+0x108>
    2506:	73 c0       	rjmp	.+230    	; 0x25ee <DIO_voidSetPinDirection+0x1ee>
	{
		switch (Copy_u8Port)
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	28 2f       	mov	r18, r24
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	3d 83       	std	Y+5, r19	; 0x05
    2510:	2c 83       	std	Y+4, r18	; 0x04
    2512:	8c 81       	ldd	r24, Y+4	; 0x04
    2514:	9d 81       	ldd	r25, Y+5	; 0x05
    2516:	81 30       	cpi	r24, 0x01	; 1
    2518:	91 05       	cpc	r25, r1
    251a:	59 f1       	breq	.+86     	; 0x2572 <DIO_voidSetPinDirection+0x172>
    251c:	2c 81       	ldd	r18, Y+4	; 0x04
    251e:	3d 81       	ldd	r19, Y+5	; 0x05
    2520:	22 30       	cpi	r18, 0x02	; 2
    2522:	31 05       	cpc	r19, r1
    2524:	2c f4       	brge	.+10     	; 0x2530 <DIO_voidSetPinDirection+0x130>
    2526:	8c 81       	ldd	r24, Y+4	; 0x04
    2528:	9d 81       	ldd	r25, Y+5	; 0x05
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	69 f0       	breq	.+26     	; 0x2548 <DIO_voidSetPinDirection+0x148>
    252e:	5f c0       	rjmp	.+190    	; 0x25ee <DIO_voidSetPinDirection+0x1ee>
    2530:	2c 81       	ldd	r18, Y+4	; 0x04
    2532:	3d 81       	ldd	r19, Y+5	; 0x05
    2534:	22 30       	cpi	r18, 0x02	; 2
    2536:	31 05       	cpc	r19, r1
    2538:	89 f1       	breq	.+98     	; 0x259c <DIO_voidSetPinDirection+0x19c>
    253a:	8c 81       	ldd	r24, Y+4	; 0x04
    253c:	9d 81       	ldd	r25, Y+5	; 0x05
    253e:	83 30       	cpi	r24, 0x03	; 3
    2540:	91 05       	cpc	r25, r1
    2542:	09 f4       	brne	.+2      	; 0x2546 <DIO_voidSetPinDirection+0x146>
    2544:	40 c0       	rjmp	.+128    	; 0x25c6 <DIO_voidSetPinDirection+0x1c6>
    2546:	53 c0       	rjmp	.+166    	; 0x25ee <DIO_voidSetPinDirection+0x1ee>
		{
			case DIO_PORTA : CLR_BIT(DDRA , Copy_u8Pin); break ;
    2548:	aa e3       	ldi	r26, 0x3A	; 58
    254a:	b0 e0       	ldi	r27, 0x00	; 0
    254c:	ea e3       	ldi	r30, 0x3A	; 58
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	80 81       	ld	r24, Z
    2552:	48 2f       	mov	r20, r24
    2554:	8a 81       	ldd	r24, Y+2	; 0x02
    2556:	28 2f       	mov	r18, r24
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	02 2e       	mov	r0, r18
    2560:	02 c0       	rjmp	.+4      	; 0x2566 <DIO_voidSetPinDirection+0x166>
    2562:	88 0f       	add	r24, r24
    2564:	99 1f       	adc	r25, r25
    2566:	0a 94       	dec	r0
    2568:	e2 f7       	brpl	.-8      	; 0x2562 <DIO_voidSetPinDirection+0x162>
    256a:	80 95       	com	r24
    256c:	84 23       	and	r24, r20
    256e:	8c 93       	st	X, r24
    2570:	3e c0       	rjmp	.+124    	; 0x25ee <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTB : CLR_BIT(DDRB , Copy_u8Pin); break ;
    2572:	a7 e3       	ldi	r26, 0x37	; 55
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	e7 e3       	ldi	r30, 0x37	; 55
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	48 2f       	mov	r20, r24
    257e:	8a 81       	ldd	r24, Y+2	; 0x02
    2580:	28 2f       	mov	r18, r24
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	02 2e       	mov	r0, r18
    258a:	02 c0       	rjmp	.+4      	; 0x2590 <DIO_voidSetPinDirection+0x190>
    258c:	88 0f       	add	r24, r24
    258e:	99 1f       	adc	r25, r25
    2590:	0a 94       	dec	r0
    2592:	e2 f7       	brpl	.-8      	; 0x258c <DIO_voidSetPinDirection+0x18c>
    2594:	80 95       	com	r24
    2596:	84 23       	and	r24, r20
    2598:	8c 93       	st	X, r24
    259a:	29 c0       	rjmp	.+82     	; 0x25ee <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTC : CLR_BIT(DDRC , Copy_u8Pin); break ;
    259c:	a4 e3       	ldi	r26, 0x34	; 52
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	e4 e3       	ldi	r30, 0x34	; 52
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	48 2f       	mov	r20, r24
    25a8:	8a 81       	ldd	r24, Y+2	; 0x02
    25aa:	28 2f       	mov	r18, r24
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	02 2e       	mov	r0, r18
    25b4:	02 c0       	rjmp	.+4      	; 0x25ba <DIO_voidSetPinDirection+0x1ba>
    25b6:	88 0f       	add	r24, r24
    25b8:	99 1f       	adc	r25, r25
    25ba:	0a 94       	dec	r0
    25bc:	e2 f7       	brpl	.-8      	; 0x25b6 <DIO_voidSetPinDirection+0x1b6>
    25be:	80 95       	com	r24
    25c0:	84 23       	and	r24, r20
    25c2:	8c 93       	st	X, r24
    25c4:	14 c0       	rjmp	.+40     	; 0x25ee <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTD : CLR_BIT(DDRD , Copy_u8Pin); break ;
    25c6:	a1 e3       	ldi	r26, 0x31	; 49
    25c8:	b0 e0       	ldi	r27, 0x00	; 0
    25ca:	e1 e3       	ldi	r30, 0x31	; 49
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	80 81       	ld	r24, Z
    25d0:	48 2f       	mov	r20, r24
    25d2:	8a 81       	ldd	r24, Y+2	; 0x02
    25d4:	28 2f       	mov	r18, r24
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	02 2e       	mov	r0, r18
    25de:	02 c0       	rjmp	.+4      	; 0x25e4 <DIO_voidSetPinDirection+0x1e4>
    25e0:	88 0f       	add	r24, r24
    25e2:	99 1f       	adc	r25, r25
    25e4:	0a 94       	dec	r0
    25e6:	e2 f7       	brpl	.-8      	; 0x25e0 <DIO_voidSetPinDirection+0x1e0>
    25e8:	80 95       	com	r24
    25ea:	84 23       	and	r24, r20
    25ec:	8c 93       	st	X, r24
		}
	}
	
}
    25ee:	27 96       	adiw	r28, 0x07	; 7
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	08 95       	ret

00002600 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue (u8 Copy_u8Port , u8 Copy_u8Pin  , u8 Copy_u8State)
{
    2600:	df 93       	push	r29
    2602:	cf 93       	push	r28
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62
    2608:	27 97       	sbiw	r28, 0x07	; 7
    260a:	0f b6       	in	r0, 0x3f	; 63
    260c:	f8 94       	cli
    260e:	de bf       	out	0x3e, r29	; 62
    2610:	0f be       	out	0x3f, r0	; 63
    2612:	cd bf       	out	0x3d, r28	; 61
    2614:	89 83       	std	Y+1, r24	; 0x01
    2616:	6a 83       	std	Y+2, r22	; 0x02
    2618:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8State == DIO_HIGH)
    261a:	8b 81       	ldd	r24, Y+3	; 0x03
    261c:	81 30       	cpi	r24, 0x01	; 1
    261e:	09 f0       	breq	.+2      	; 0x2622 <DIO_voidSetPinValue+0x22>
    2620:	6f c0       	rjmp	.+222    	; 0x2700 <DIO_voidSetPinValue+0x100>
	{
		switch (Copy_u8Port)
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	28 2f       	mov	r18, r24
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	3f 83       	std	Y+7, r19	; 0x07
    262a:	2e 83       	std	Y+6, r18	; 0x06
    262c:	8e 81       	ldd	r24, Y+6	; 0x06
    262e:	9f 81       	ldd	r25, Y+7	; 0x07
    2630:	81 30       	cpi	r24, 0x01	; 1
    2632:	91 05       	cpc	r25, r1
    2634:	49 f1       	breq	.+82     	; 0x2688 <DIO_voidSetPinValue+0x88>
    2636:	2e 81       	ldd	r18, Y+6	; 0x06
    2638:	3f 81       	ldd	r19, Y+7	; 0x07
    263a:	22 30       	cpi	r18, 0x02	; 2
    263c:	31 05       	cpc	r19, r1
    263e:	2c f4       	brge	.+10     	; 0x264a <DIO_voidSetPinValue+0x4a>
    2640:	8e 81       	ldd	r24, Y+6	; 0x06
    2642:	9f 81       	ldd	r25, Y+7	; 0x07
    2644:	00 97       	sbiw	r24, 0x00	; 0
    2646:	61 f0       	breq	.+24     	; 0x2660 <DIO_voidSetPinValue+0x60>
    2648:	d2 c0       	rjmp	.+420    	; 0x27ee <DIO_voidSetPinValue+0x1ee>
    264a:	2e 81       	ldd	r18, Y+6	; 0x06
    264c:	3f 81       	ldd	r19, Y+7	; 0x07
    264e:	22 30       	cpi	r18, 0x02	; 2
    2650:	31 05       	cpc	r19, r1
    2652:	71 f1       	breq	.+92     	; 0x26b0 <DIO_voidSetPinValue+0xb0>
    2654:	8e 81       	ldd	r24, Y+6	; 0x06
    2656:	9f 81       	ldd	r25, Y+7	; 0x07
    2658:	83 30       	cpi	r24, 0x03	; 3
    265a:	91 05       	cpc	r25, r1
    265c:	e9 f1       	breq	.+122    	; 0x26d8 <DIO_voidSetPinValue+0xd8>
    265e:	c7 c0       	rjmp	.+398    	; 0x27ee <DIO_voidSetPinValue+0x1ee>
		{
			case DIO_PORTA : SET_BIT(PORTA , Copy_u8Pin); break ;
    2660:	ab e3       	ldi	r26, 0x3B	; 59
    2662:	b0 e0       	ldi	r27, 0x00	; 0
    2664:	eb e3       	ldi	r30, 0x3B	; 59
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	48 2f       	mov	r20, r24
    266c:	8a 81       	ldd	r24, Y+2	; 0x02
    266e:	28 2f       	mov	r18, r24
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	02 2e       	mov	r0, r18
    2678:	02 c0       	rjmp	.+4      	; 0x267e <DIO_voidSetPinValue+0x7e>
    267a:	88 0f       	add	r24, r24
    267c:	99 1f       	adc	r25, r25
    267e:	0a 94       	dec	r0
    2680:	e2 f7       	brpl	.-8      	; 0x267a <DIO_voidSetPinValue+0x7a>
    2682:	84 2b       	or	r24, r20
    2684:	8c 93       	st	X, r24
    2686:	b3 c0       	rjmp	.+358    	; 0x27ee <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTB : SET_BIT(PORTB , Copy_u8Pin); break ;
    2688:	a8 e3       	ldi	r26, 0x38	; 56
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	e8 e3       	ldi	r30, 0x38	; 56
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
    2692:	48 2f       	mov	r20, r24
    2694:	8a 81       	ldd	r24, Y+2	; 0x02
    2696:	28 2f       	mov	r18, r24
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	02 2e       	mov	r0, r18
    26a0:	02 c0       	rjmp	.+4      	; 0x26a6 <DIO_voidSetPinValue+0xa6>
    26a2:	88 0f       	add	r24, r24
    26a4:	99 1f       	adc	r25, r25
    26a6:	0a 94       	dec	r0
    26a8:	e2 f7       	brpl	.-8      	; 0x26a2 <DIO_voidSetPinValue+0xa2>
    26aa:	84 2b       	or	r24, r20
    26ac:	8c 93       	st	X, r24
    26ae:	9f c0       	rjmp	.+318    	; 0x27ee <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTC : SET_BIT(PORTC , Copy_u8Pin); break ;
    26b0:	a5 e3       	ldi	r26, 0x35	; 53
    26b2:	b0 e0       	ldi	r27, 0x00	; 0
    26b4:	e5 e3       	ldi	r30, 0x35	; 53
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	80 81       	ld	r24, Z
    26ba:	48 2f       	mov	r20, r24
    26bc:	8a 81       	ldd	r24, Y+2	; 0x02
    26be:	28 2f       	mov	r18, r24
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	02 2e       	mov	r0, r18
    26c8:	02 c0       	rjmp	.+4      	; 0x26ce <DIO_voidSetPinValue+0xce>
    26ca:	88 0f       	add	r24, r24
    26cc:	99 1f       	adc	r25, r25
    26ce:	0a 94       	dec	r0
    26d0:	e2 f7       	brpl	.-8      	; 0x26ca <DIO_voidSetPinValue+0xca>
    26d2:	84 2b       	or	r24, r20
    26d4:	8c 93       	st	X, r24
    26d6:	8b c0       	rjmp	.+278    	; 0x27ee <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTD : SET_BIT(PORTD , Copy_u8Pin); break ;
    26d8:	a2 e3       	ldi	r26, 0x32	; 50
    26da:	b0 e0       	ldi	r27, 0x00	; 0
    26dc:	e2 e3       	ldi	r30, 0x32	; 50
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 81       	ld	r24, Z
    26e2:	48 2f       	mov	r20, r24
    26e4:	8a 81       	ldd	r24, Y+2	; 0x02
    26e6:	28 2f       	mov	r18, r24
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	02 2e       	mov	r0, r18
    26f0:	02 c0       	rjmp	.+4      	; 0x26f6 <DIO_voidSetPinValue+0xf6>
    26f2:	88 0f       	add	r24, r24
    26f4:	99 1f       	adc	r25, r25
    26f6:	0a 94       	dec	r0
    26f8:	e2 f7       	brpl	.-8      	; 0x26f2 <DIO_voidSetPinValue+0xf2>
    26fa:	84 2b       	or	r24, r20
    26fc:	8c 93       	st	X, r24
    26fe:	77 c0       	rjmp	.+238    	; 0x27ee <DIO_voidSetPinValue+0x1ee>
		}
	}
	else if (Copy_u8State == DIO_LOW)
    2700:	8b 81       	ldd	r24, Y+3	; 0x03
    2702:	88 23       	and	r24, r24
    2704:	09 f0       	breq	.+2      	; 0x2708 <DIO_voidSetPinValue+0x108>
    2706:	73 c0       	rjmp	.+230    	; 0x27ee <DIO_voidSetPinValue+0x1ee>
	{
		switch (Copy_u8Port)
    2708:	89 81       	ldd	r24, Y+1	; 0x01
    270a:	28 2f       	mov	r18, r24
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	3d 83       	std	Y+5, r19	; 0x05
    2710:	2c 83       	std	Y+4, r18	; 0x04
    2712:	8c 81       	ldd	r24, Y+4	; 0x04
    2714:	9d 81       	ldd	r25, Y+5	; 0x05
    2716:	81 30       	cpi	r24, 0x01	; 1
    2718:	91 05       	cpc	r25, r1
    271a:	59 f1       	breq	.+86     	; 0x2772 <DIO_voidSetPinValue+0x172>
    271c:	2c 81       	ldd	r18, Y+4	; 0x04
    271e:	3d 81       	ldd	r19, Y+5	; 0x05
    2720:	22 30       	cpi	r18, 0x02	; 2
    2722:	31 05       	cpc	r19, r1
    2724:	2c f4       	brge	.+10     	; 0x2730 <DIO_voidSetPinValue+0x130>
    2726:	8c 81       	ldd	r24, Y+4	; 0x04
    2728:	9d 81       	ldd	r25, Y+5	; 0x05
    272a:	00 97       	sbiw	r24, 0x00	; 0
    272c:	69 f0       	breq	.+26     	; 0x2748 <DIO_voidSetPinValue+0x148>
    272e:	5f c0       	rjmp	.+190    	; 0x27ee <DIO_voidSetPinValue+0x1ee>
    2730:	2c 81       	ldd	r18, Y+4	; 0x04
    2732:	3d 81       	ldd	r19, Y+5	; 0x05
    2734:	22 30       	cpi	r18, 0x02	; 2
    2736:	31 05       	cpc	r19, r1
    2738:	89 f1       	breq	.+98     	; 0x279c <DIO_voidSetPinValue+0x19c>
    273a:	8c 81       	ldd	r24, Y+4	; 0x04
    273c:	9d 81       	ldd	r25, Y+5	; 0x05
    273e:	83 30       	cpi	r24, 0x03	; 3
    2740:	91 05       	cpc	r25, r1
    2742:	09 f4       	brne	.+2      	; 0x2746 <DIO_voidSetPinValue+0x146>
    2744:	40 c0       	rjmp	.+128    	; 0x27c6 <DIO_voidSetPinValue+0x1c6>
    2746:	53 c0       	rjmp	.+166    	; 0x27ee <DIO_voidSetPinValue+0x1ee>
		{
			case DIO_PORTA : CLR_BIT(PORTA , Copy_u8Pin); break ;
    2748:	ab e3       	ldi	r26, 0x3B	; 59
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	eb e3       	ldi	r30, 0x3B	; 59
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	48 2f       	mov	r20, r24
    2754:	8a 81       	ldd	r24, Y+2	; 0x02
    2756:	28 2f       	mov	r18, r24
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	02 2e       	mov	r0, r18
    2760:	02 c0       	rjmp	.+4      	; 0x2766 <DIO_voidSetPinValue+0x166>
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	0a 94       	dec	r0
    2768:	e2 f7       	brpl	.-8      	; 0x2762 <DIO_voidSetPinValue+0x162>
    276a:	80 95       	com	r24
    276c:	84 23       	and	r24, r20
    276e:	8c 93       	st	X, r24
    2770:	3e c0       	rjmp	.+124    	; 0x27ee <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTB : CLR_BIT(PORTB , Copy_u8Pin); break ;
    2772:	a8 e3       	ldi	r26, 0x38	; 56
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	e8 e3       	ldi	r30, 0x38	; 56
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	48 2f       	mov	r20, r24
    277e:	8a 81       	ldd	r24, Y+2	; 0x02
    2780:	28 2f       	mov	r18, r24
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	02 2e       	mov	r0, r18
    278a:	02 c0       	rjmp	.+4      	; 0x2790 <DIO_voidSetPinValue+0x190>
    278c:	88 0f       	add	r24, r24
    278e:	99 1f       	adc	r25, r25
    2790:	0a 94       	dec	r0
    2792:	e2 f7       	brpl	.-8      	; 0x278c <DIO_voidSetPinValue+0x18c>
    2794:	80 95       	com	r24
    2796:	84 23       	and	r24, r20
    2798:	8c 93       	st	X, r24
    279a:	29 c0       	rjmp	.+82     	; 0x27ee <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTC : CLR_BIT(PORTC , Copy_u8Pin); break ;
    279c:	a5 e3       	ldi	r26, 0x35	; 53
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	e5 e3       	ldi	r30, 0x35	; 53
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	80 81       	ld	r24, Z
    27a6:	48 2f       	mov	r20, r24
    27a8:	8a 81       	ldd	r24, Y+2	; 0x02
    27aa:	28 2f       	mov	r18, r24
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	02 2e       	mov	r0, r18
    27b4:	02 c0       	rjmp	.+4      	; 0x27ba <DIO_voidSetPinValue+0x1ba>
    27b6:	88 0f       	add	r24, r24
    27b8:	99 1f       	adc	r25, r25
    27ba:	0a 94       	dec	r0
    27bc:	e2 f7       	brpl	.-8      	; 0x27b6 <DIO_voidSetPinValue+0x1b6>
    27be:	80 95       	com	r24
    27c0:	84 23       	and	r24, r20
    27c2:	8c 93       	st	X, r24
    27c4:	14 c0       	rjmp	.+40     	; 0x27ee <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTD : CLR_BIT(PORTD , Copy_u8Pin); break ;
    27c6:	a2 e3       	ldi	r26, 0x32	; 50
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	e2 e3       	ldi	r30, 0x32	; 50
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	48 2f       	mov	r20, r24
    27d2:	8a 81       	ldd	r24, Y+2	; 0x02
    27d4:	28 2f       	mov	r18, r24
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	02 2e       	mov	r0, r18
    27de:	02 c0       	rjmp	.+4      	; 0x27e4 <DIO_voidSetPinValue+0x1e4>
    27e0:	88 0f       	add	r24, r24
    27e2:	99 1f       	adc	r25, r25
    27e4:	0a 94       	dec	r0
    27e6:	e2 f7       	brpl	.-8      	; 0x27e0 <DIO_voidSetPinValue+0x1e0>
    27e8:	80 95       	com	r24
    27ea:	84 23       	and	r24, r20
    27ec:	8c 93       	st	X, r24
		}
	}
}
    27ee:	27 96       	adiw	r28, 0x07	; 7
    27f0:	0f b6       	in	r0, 0x3f	; 63
    27f2:	f8 94       	cli
    27f4:	de bf       	out	0x3e, r29	; 62
    27f6:	0f be       	out	0x3f, r0	; 63
    27f8:	cd bf       	out	0x3d, r28	; 61
    27fa:	cf 91       	pop	r28
    27fc:	df 91       	pop	r29
    27fe:	08 95       	ret

00002800 <DIO_u8GetPinValue>:

u8 	 DIO_u8GetPinValue (u8 Copy_u8Port , u8 Copy_u8Pin)
{
    2800:	df 93       	push	r29
    2802:	cf 93       	push	r28
    2804:	00 d0       	rcall	.+0      	; 0x2806 <DIO_u8GetPinValue+0x6>
    2806:	00 d0       	rcall	.+0      	; 0x2808 <DIO_u8GetPinValue+0x8>
    2808:	00 d0       	rcall	.+0      	; 0x280a <DIO_u8GetPinValue+0xa>
    280a:	cd b7       	in	r28, 0x3d	; 61
    280c:	de b7       	in	r29, 0x3e	; 62
    280e:	89 83       	std	Y+1, r24	; 0x01
    2810:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	28 2f       	mov	r18, r24
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	3d 83       	std	Y+5, r19	; 0x05
    281a:	2c 83       	std	Y+4, r18	; 0x04
    281c:	4c 81       	ldd	r20, Y+4	; 0x04
    281e:	5d 81       	ldd	r21, Y+5	; 0x05
    2820:	41 30       	cpi	r20, 0x01	; 1
    2822:	51 05       	cpc	r21, r1
    2824:	49 f1       	breq	.+82     	; 0x2878 <DIO_u8GetPinValue+0x78>
    2826:	8c 81       	ldd	r24, Y+4	; 0x04
    2828:	9d 81       	ldd	r25, Y+5	; 0x05
    282a:	82 30       	cpi	r24, 0x02	; 2
    282c:	91 05       	cpc	r25, r1
    282e:	34 f4       	brge	.+12     	; 0x283c <DIO_u8GetPinValue+0x3c>
    2830:	2c 81       	ldd	r18, Y+4	; 0x04
    2832:	3d 81       	ldd	r19, Y+5	; 0x05
    2834:	21 15       	cp	r18, r1
    2836:	31 05       	cpc	r19, r1
    2838:	61 f0       	breq	.+24     	; 0x2852 <DIO_u8GetPinValue+0x52>
    283a:	57 c0       	rjmp	.+174    	; 0x28ea <DIO_u8GetPinValue+0xea>
    283c:	4c 81       	ldd	r20, Y+4	; 0x04
    283e:	5d 81       	ldd	r21, Y+5	; 0x05
    2840:	42 30       	cpi	r20, 0x02	; 2
    2842:	51 05       	cpc	r21, r1
    2844:	61 f1       	breq	.+88     	; 0x289e <DIO_u8GetPinValue+0x9e>
    2846:	8c 81       	ldd	r24, Y+4	; 0x04
    2848:	9d 81       	ldd	r25, Y+5	; 0x05
    284a:	83 30       	cpi	r24, 0x03	; 3
    284c:	91 05       	cpc	r25, r1
    284e:	d1 f1       	breq	.+116    	; 0x28c4 <DIO_u8GetPinValue+0xc4>
    2850:	4c c0       	rjmp	.+152    	; 0x28ea <DIO_u8GetPinValue+0xea>
	{
		case DIO_PORTA : return GET_BIT(PINA , Copy_u8Pin);
    2852:	e9 e3       	ldi	r30, 0x39	; 57
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	80 81       	ld	r24, Z
    2858:	28 2f       	mov	r18, r24
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	8a 81       	ldd	r24, Y+2	; 0x02
    285e:	88 2f       	mov	r24, r24
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	a9 01       	movw	r20, r18
    2864:	02 c0       	rjmp	.+4      	; 0x286a <DIO_u8GetPinValue+0x6a>
    2866:	55 95       	asr	r21
    2868:	47 95       	ror	r20
    286a:	8a 95       	dec	r24
    286c:	e2 f7       	brpl	.-8      	; 0x2866 <DIO_u8GetPinValue+0x66>
    286e:	ca 01       	movw	r24, r20
    2870:	58 2f       	mov	r21, r24
    2872:	51 70       	andi	r21, 0x01	; 1
    2874:	5b 83       	std	Y+3, r21	; 0x03
    2876:	3a c0       	rjmp	.+116    	; 0x28ec <DIO_u8GetPinValue+0xec>
		case DIO_PORTB : return GET_BIT(PINB , Copy_u8Pin);
    2878:	e6 e3       	ldi	r30, 0x36	; 54
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	80 81       	ld	r24, Z
    287e:	28 2f       	mov	r18, r24
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	8a 81       	ldd	r24, Y+2	; 0x02
    2884:	88 2f       	mov	r24, r24
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	a9 01       	movw	r20, r18
    288a:	02 c0       	rjmp	.+4      	; 0x2890 <DIO_u8GetPinValue+0x90>
    288c:	55 95       	asr	r21
    288e:	47 95       	ror	r20
    2890:	8a 95       	dec	r24
    2892:	e2 f7       	brpl	.-8      	; 0x288c <DIO_u8GetPinValue+0x8c>
    2894:	ca 01       	movw	r24, r20
    2896:	58 2f       	mov	r21, r24
    2898:	51 70       	andi	r21, 0x01	; 1
    289a:	5b 83       	std	Y+3, r21	; 0x03
    289c:	27 c0       	rjmp	.+78     	; 0x28ec <DIO_u8GetPinValue+0xec>
		case DIO_PORTC : return GET_BIT(PINC , Copy_u8Pin);
    289e:	e3 e3       	ldi	r30, 0x33	; 51
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	80 81       	ld	r24, Z
    28a4:	28 2f       	mov	r18, r24
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	8a 81       	ldd	r24, Y+2	; 0x02
    28aa:	88 2f       	mov	r24, r24
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	a9 01       	movw	r20, r18
    28b0:	02 c0       	rjmp	.+4      	; 0x28b6 <DIO_u8GetPinValue+0xb6>
    28b2:	55 95       	asr	r21
    28b4:	47 95       	ror	r20
    28b6:	8a 95       	dec	r24
    28b8:	e2 f7       	brpl	.-8      	; 0x28b2 <DIO_u8GetPinValue+0xb2>
    28ba:	ca 01       	movw	r24, r20
    28bc:	58 2f       	mov	r21, r24
    28be:	51 70       	andi	r21, 0x01	; 1
    28c0:	5b 83       	std	Y+3, r21	; 0x03
    28c2:	14 c0       	rjmp	.+40     	; 0x28ec <DIO_u8GetPinValue+0xec>
		case DIO_PORTD : return GET_BIT(PIND , Copy_u8Pin);
    28c4:	e0 e3       	ldi	r30, 0x30	; 48
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	80 81       	ld	r24, Z
    28ca:	28 2f       	mov	r18, r24
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	8a 81       	ldd	r24, Y+2	; 0x02
    28d0:	88 2f       	mov	r24, r24
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	a9 01       	movw	r20, r18
    28d6:	02 c0       	rjmp	.+4      	; 0x28dc <DIO_u8GetPinValue+0xdc>
    28d8:	55 95       	asr	r21
    28da:	47 95       	ror	r20
    28dc:	8a 95       	dec	r24
    28de:	e2 f7       	brpl	.-8      	; 0x28d8 <DIO_u8GetPinValue+0xd8>
    28e0:	ca 01       	movw	r24, r20
    28e2:	58 2f       	mov	r21, r24
    28e4:	51 70       	andi	r21, 0x01	; 1
    28e6:	5b 83       	std	Y+3, r21	; 0x03
    28e8:	01 c0       	rjmp	.+2      	; 0x28ec <DIO_u8GetPinValue+0xec>
    28ea:	02 c0       	rjmp	.+4      	; 0x28f0 <DIO_u8GetPinValue+0xf0>
	}
}
    28ec:	8b 81       	ldd	r24, Y+3	; 0x03
    28ee:	8e 83       	std	Y+6, r24	; 0x06
    28f0:	8e 81       	ldd	r24, Y+6	; 0x06
    28f2:	26 96       	adiw	r28, 0x06	; 6
    28f4:	0f b6       	in	r0, 0x3f	; 63
    28f6:	f8 94       	cli
    28f8:	de bf       	out	0x3e, r29	; 62
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	cd bf       	out	0x3d, r28	; 61
    28fe:	cf 91       	pop	r28
    2900:	df 91       	pop	r29
    2902:	08 95       	ret

00002904 <DIO_voidTogglePin>:

void DIO_voidTogglePin 	 (u8 Copy_u8Port , u8 Copy_u8Pin)
{
    2904:	df 93       	push	r29
    2906:	cf 93       	push	r28
    2908:	00 d0       	rcall	.+0      	; 0x290a <DIO_voidTogglePin+0x6>
    290a:	00 d0       	rcall	.+0      	; 0x290c <DIO_voidTogglePin+0x8>
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
    2910:	89 83       	std	Y+1, r24	; 0x01
    2912:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	28 2f       	mov	r18, r24
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	3c 83       	std	Y+4, r19	; 0x04
    291c:	2b 83       	std	Y+3, r18	; 0x03
    291e:	8b 81       	ldd	r24, Y+3	; 0x03
    2920:	9c 81       	ldd	r25, Y+4	; 0x04
    2922:	81 30       	cpi	r24, 0x01	; 1
    2924:	91 05       	cpc	r25, r1
    2926:	49 f1       	breq	.+82     	; 0x297a <DIO_voidTogglePin+0x76>
    2928:	2b 81       	ldd	r18, Y+3	; 0x03
    292a:	3c 81       	ldd	r19, Y+4	; 0x04
    292c:	22 30       	cpi	r18, 0x02	; 2
    292e:	31 05       	cpc	r19, r1
    2930:	2c f4       	brge	.+10     	; 0x293c <DIO_voidTogglePin+0x38>
    2932:	8b 81       	ldd	r24, Y+3	; 0x03
    2934:	9c 81       	ldd	r25, Y+4	; 0x04
    2936:	00 97       	sbiw	r24, 0x00	; 0
    2938:	61 f0       	breq	.+24     	; 0x2952 <DIO_voidTogglePin+0x4e>
    293a:	5a c0       	rjmp	.+180    	; 0x29f0 <DIO_voidTogglePin+0xec>
    293c:	2b 81       	ldd	r18, Y+3	; 0x03
    293e:	3c 81       	ldd	r19, Y+4	; 0x04
    2940:	22 30       	cpi	r18, 0x02	; 2
    2942:	31 05       	cpc	r19, r1
    2944:	71 f1       	breq	.+92     	; 0x29a2 <DIO_voidTogglePin+0x9e>
    2946:	8b 81       	ldd	r24, Y+3	; 0x03
    2948:	9c 81       	ldd	r25, Y+4	; 0x04
    294a:	83 30       	cpi	r24, 0x03	; 3
    294c:	91 05       	cpc	r25, r1
    294e:	e9 f1       	breq	.+122    	; 0x29ca <DIO_voidTogglePin+0xc6>
    2950:	4f c0       	rjmp	.+158    	; 0x29f0 <DIO_voidTogglePin+0xec>
	{
		case DIO_PORTA : TOGGLE_BIT(PORTA , Copy_u8Pin); break ;
    2952:	ab e3       	ldi	r26, 0x3B	; 59
    2954:	b0 e0       	ldi	r27, 0x00	; 0
    2956:	eb e3       	ldi	r30, 0x3B	; 59
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	80 81       	ld	r24, Z
    295c:	48 2f       	mov	r20, r24
    295e:	8a 81       	ldd	r24, Y+2	; 0x02
    2960:	28 2f       	mov	r18, r24
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	02 2e       	mov	r0, r18
    296a:	02 c0       	rjmp	.+4      	; 0x2970 <DIO_voidTogglePin+0x6c>
    296c:	88 0f       	add	r24, r24
    296e:	99 1f       	adc	r25, r25
    2970:	0a 94       	dec	r0
    2972:	e2 f7       	brpl	.-8      	; 0x296c <DIO_voidTogglePin+0x68>
    2974:	84 27       	eor	r24, r20
    2976:	8c 93       	st	X, r24
    2978:	3b c0       	rjmp	.+118    	; 0x29f0 <DIO_voidTogglePin+0xec>
		case DIO_PORTB : TOGGLE_BIT(PORTB , Copy_u8Pin); break ;
    297a:	a8 e3       	ldi	r26, 0x38	; 56
    297c:	b0 e0       	ldi	r27, 0x00	; 0
    297e:	e8 e3       	ldi	r30, 0x38	; 56
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	80 81       	ld	r24, Z
    2984:	48 2f       	mov	r20, r24
    2986:	8a 81       	ldd	r24, Y+2	; 0x02
    2988:	28 2f       	mov	r18, r24
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	02 2e       	mov	r0, r18
    2992:	02 c0       	rjmp	.+4      	; 0x2998 <DIO_voidTogglePin+0x94>
    2994:	88 0f       	add	r24, r24
    2996:	99 1f       	adc	r25, r25
    2998:	0a 94       	dec	r0
    299a:	e2 f7       	brpl	.-8      	; 0x2994 <DIO_voidTogglePin+0x90>
    299c:	84 27       	eor	r24, r20
    299e:	8c 93       	st	X, r24
    29a0:	27 c0       	rjmp	.+78     	; 0x29f0 <DIO_voidTogglePin+0xec>
		case DIO_PORTC : TOGGLE_BIT(PORTC , Copy_u8Pin); break ;
    29a2:	a5 e3       	ldi	r26, 0x35	; 53
    29a4:	b0 e0       	ldi	r27, 0x00	; 0
    29a6:	e5 e3       	ldi	r30, 0x35	; 53
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	80 81       	ld	r24, Z
    29ac:	48 2f       	mov	r20, r24
    29ae:	8a 81       	ldd	r24, Y+2	; 0x02
    29b0:	28 2f       	mov	r18, r24
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	02 2e       	mov	r0, r18
    29ba:	02 c0       	rjmp	.+4      	; 0x29c0 <DIO_voidTogglePin+0xbc>
    29bc:	88 0f       	add	r24, r24
    29be:	99 1f       	adc	r25, r25
    29c0:	0a 94       	dec	r0
    29c2:	e2 f7       	brpl	.-8      	; 0x29bc <DIO_voidTogglePin+0xb8>
    29c4:	84 27       	eor	r24, r20
    29c6:	8c 93       	st	X, r24
    29c8:	13 c0       	rjmp	.+38     	; 0x29f0 <DIO_voidTogglePin+0xec>
		case DIO_PORTD : TOGGLE_BIT(PORTD , Copy_u8Pin); break ;
    29ca:	a2 e3       	ldi	r26, 0x32	; 50
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	e2 e3       	ldi	r30, 0x32	; 50
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	80 81       	ld	r24, Z
    29d4:	48 2f       	mov	r20, r24
    29d6:	8a 81       	ldd	r24, Y+2	; 0x02
    29d8:	28 2f       	mov	r18, r24
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	02 2e       	mov	r0, r18
    29e2:	02 c0       	rjmp	.+4      	; 0x29e8 <DIO_voidTogglePin+0xe4>
    29e4:	88 0f       	add	r24, r24
    29e6:	99 1f       	adc	r25, r25
    29e8:	0a 94       	dec	r0
    29ea:	e2 f7       	brpl	.-8      	; 0x29e4 <DIO_voidTogglePin+0xe0>
    29ec:	84 27       	eor	r24, r20
    29ee:	8c 93       	st	X, r24
	}
}
    29f0:	0f 90       	pop	r0
    29f2:	0f 90       	pop	r0
    29f4:	0f 90       	pop	r0
    29f6:	0f 90       	pop	r0
    29f8:	cf 91       	pop	r28
    29fa:	df 91       	pop	r29
    29fc:	08 95       	ret

000029fe <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection (u8 Copy_u8Port , u8 Copy_u8Direction)
{
    29fe:	df 93       	push	r29
    2a00:	cf 93       	push	r28
    2a02:	00 d0       	rcall	.+0      	; 0x2a04 <DIO_voidSetPortDirection+0x6>
    2a04:	00 d0       	rcall	.+0      	; 0x2a06 <DIO_voidSetPortDirection+0x8>
    2a06:	cd b7       	in	r28, 0x3d	; 61
    2a08:	de b7       	in	r29, 0x3e	; 62
    2a0a:	89 83       	std	Y+1, r24	; 0x01
    2a0c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    2a0e:	89 81       	ldd	r24, Y+1	; 0x01
    2a10:	28 2f       	mov	r18, r24
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	3c 83       	std	Y+4, r19	; 0x04
    2a16:	2b 83       	std	Y+3, r18	; 0x03
    2a18:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a1c:	81 30       	cpi	r24, 0x01	; 1
    2a1e:	91 05       	cpc	r25, r1
    2a20:	d1 f0       	breq	.+52     	; 0x2a56 <DIO_voidSetPortDirection+0x58>
    2a22:	2b 81       	ldd	r18, Y+3	; 0x03
    2a24:	3c 81       	ldd	r19, Y+4	; 0x04
    2a26:	22 30       	cpi	r18, 0x02	; 2
    2a28:	31 05       	cpc	r19, r1
    2a2a:	2c f4       	brge	.+10     	; 0x2a36 <DIO_voidSetPortDirection+0x38>
    2a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a30:	00 97       	sbiw	r24, 0x00	; 0
    2a32:	61 f0       	breq	.+24     	; 0x2a4c <DIO_voidSetPortDirection+0x4e>
    2a34:	1e c0       	rjmp	.+60     	; 0x2a72 <DIO_voidSetPortDirection+0x74>
    2a36:	2b 81       	ldd	r18, Y+3	; 0x03
    2a38:	3c 81       	ldd	r19, Y+4	; 0x04
    2a3a:	22 30       	cpi	r18, 0x02	; 2
    2a3c:	31 05       	cpc	r19, r1
    2a3e:	81 f0       	breq	.+32     	; 0x2a60 <DIO_voidSetPortDirection+0x62>
    2a40:	8b 81       	ldd	r24, Y+3	; 0x03
    2a42:	9c 81       	ldd	r25, Y+4	; 0x04
    2a44:	83 30       	cpi	r24, 0x03	; 3
    2a46:	91 05       	cpc	r25, r1
    2a48:	81 f0       	breq	.+32     	; 0x2a6a <DIO_voidSetPortDirection+0x6c>
    2a4a:	13 c0       	rjmp	.+38     	; 0x2a72 <DIO_voidSetPortDirection+0x74>
	{
		case DIO_PORTA : DDRA = Copy_u8Direction ; break ;
    2a4c:	ea e3       	ldi	r30, 0x3A	; 58
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	8a 81       	ldd	r24, Y+2	; 0x02
    2a52:	80 83       	st	Z, r24
    2a54:	0e c0       	rjmp	.+28     	; 0x2a72 <DIO_voidSetPortDirection+0x74>
	    case DIO_PORTB : DDRB = Copy_u8Direction ; break ;
    2a56:	e7 e3       	ldi	r30, 0x37	; 55
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5c:	80 83       	st	Z, r24
    2a5e:	09 c0       	rjmp	.+18     	; 0x2a72 <DIO_voidSetPortDirection+0x74>
        case DIO_PORTC : DDRC = Copy_u8Direction ; break ;
    2a60:	e4 e3       	ldi	r30, 0x34	; 52
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	8a 81       	ldd	r24, Y+2	; 0x02
    2a66:	80 83       	st	Z, r24
    2a68:	04 c0       	rjmp	.+8      	; 0x2a72 <DIO_voidSetPortDirection+0x74>
        case DIO_PORTD : DDRD = Copy_u8Direction ; break ;
    2a6a:	e1 e3       	ldi	r30, 0x31	; 49
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a70:	80 83       	st	Z, r24
	}
}
    2a72:	0f 90       	pop	r0
    2a74:	0f 90       	pop	r0
    2a76:	0f 90       	pop	r0
    2a78:	0f 90       	pop	r0
    2a7a:	cf 91       	pop	r28
    2a7c:	df 91       	pop	r29
    2a7e:	08 95       	ret

00002a80 <DIO_voidSetPortValue>:
void DIO_voidSetPortValue (u8 Copy_u8Port , u8 Copy_u8Value)
{
    2a80:	df 93       	push	r29
    2a82:	cf 93       	push	r28
    2a84:	00 d0       	rcall	.+0      	; 0x2a86 <DIO_voidSetPortValue+0x6>
    2a86:	00 d0       	rcall	.+0      	; 0x2a88 <DIO_voidSetPortValue+0x8>
    2a88:	cd b7       	in	r28, 0x3d	; 61
    2a8a:	de b7       	in	r29, 0x3e	; 62
    2a8c:	89 83       	std	Y+1, r24	; 0x01
    2a8e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	28 2f       	mov	r18, r24
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	3c 83       	std	Y+4, r19	; 0x04
    2a98:	2b 83       	std	Y+3, r18	; 0x03
    2a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9e:	81 30       	cpi	r24, 0x01	; 1
    2aa0:	91 05       	cpc	r25, r1
    2aa2:	d1 f0       	breq	.+52     	; 0x2ad8 <DIO_voidSetPortValue+0x58>
    2aa4:	2b 81       	ldd	r18, Y+3	; 0x03
    2aa6:	3c 81       	ldd	r19, Y+4	; 0x04
    2aa8:	22 30       	cpi	r18, 0x02	; 2
    2aaa:	31 05       	cpc	r19, r1
    2aac:	2c f4       	brge	.+10     	; 0x2ab8 <DIO_voidSetPortValue+0x38>
    2aae:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab2:	00 97       	sbiw	r24, 0x00	; 0
    2ab4:	61 f0       	breq	.+24     	; 0x2ace <DIO_voidSetPortValue+0x4e>
    2ab6:	1e c0       	rjmp	.+60     	; 0x2af4 <DIO_voidSetPortValue+0x74>
    2ab8:	2b 81       	ldd	r18, Y+3	; 0x03
    2aba:	3c 81       	ldd	r19, Y+4	; 0x04
    2abc:	22 30       	cpi	r18, 0x02	; 2
    2abe:	31 05       	cpc	r19, r1
    2ac0:	81 f0       	breq	.+32     	; 0x2ae2 <DIO_voidSetPortValue+0x62>
    2ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac6:	83 30       	cpi	r24, 0x03	; 3
    2ac8:	91 05       	cpc	r25, r1
    2aca:	81 f0       	breq	.+32     	; 0x2aec <DIO_voidSetPortValue+0x6c>
    2acc:	13 c0       	rjmp	.+38     	; 0x2af4 <DIO_voidSetPortValue+0x74>
		{
			case DIO_PORTA : PORTA = Copy_u8Value ; break ;
    2ace:	eb e3       	ldi	r30, 0x3B	; 59
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad4:	80 83       	st	Z, r24
    2ad6:	0e c0       	rjmp	.+28     	; 0x2af4 <DIO_voidSetPortValue+0x74>
			case DIO_PORTB : PORTB = Copy_u8Value ; break ;
    2ad8:	e8 e3       	ldi	r30, 0x38	; 56
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ade:	80 83       	st	Z, r24
    2ae0:	09 c0       	rjmp	.+18     	; 0x2af4 <DIO_voidSetPortValue+0x74>
			case DIO_PORTC : PORTC = Copy_u8Value ; break ;
    2ae2:	e5 e3       	ldi	r30, 0x35	; 53
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae8:	80 83       	st	Z, r24
    2aea:	04 c0       	rjmp	.+8      	; 0x2af4 <DIO_voidSetPortValue+0x74>
			case DIO_PORTD : PORTD = Copy_u8Value ; break ;
    2aec:	e2 e3       	ldi	r30, 0x32	; 50
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	8a 81       	ldd	r24, Y+2	; 0x02
    2af2:	80 83       	st	Z, r24
		}
}
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	0f 90       	pop	r0
    2afa:	0f 90       	pop	r0
    2afc:	cf 91       	pop	r28
    2afe:	df 91       	pop	r29
    2b00:	08 95       	ret

00002b02 <DIO_u8GetPortValue>:

u8   DIO_u8GetPortValue (u8 Copy_u8Port)
{
    2b02:	df 93       	push	r29
    2b04:	cf 93       	push	r28
    2b06:	00 d0       	rcall	.+0      	; 0x2b08 <DIO_u8GetPortValue+0x6>
    2b08:	00 d0       	rcall	.+0      	; 0x2b0a <DIO_u8GetPortValue+0x8>
    2b0a:	0f 92       	push	r0
    2b0c:	cd b7       	in	r28, 0x3d	; 61
    2b0e:	de b7       	in	r29, 0x3e	; 62
    2b10:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Port)
    2b12:	89 81       	ldd	r24, Y+1	; 0x01
    2b14:	28 2f       	mov	r18, r24
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	3c 83       	std	Y+4, r19	; 0x04
    2b1a:	2b 83       	std	Y+3, r18	; 0x03
    2b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b20:	81 30       	cpi	r24, 0x01	; 1
    2b22:	91 05       	cpc	r25, r1
    2b24:	d1 f0       	breq	.+52     	; 0x2b5a <DIO_u8GetPortValue+0x58>
    2b26:	2b 81       	ldd	r18, Y+3	; 0x03
    2b28:	3c 81       	ldd	r19, Y+4	; 0x04
    2b2a:	22 30       	cpi	r18, 0x02	; 2
    2b2c:	31 05       	cpc	r19, r1
    2b2e:	2c f4       	brge	.+10     	; 0x2b3a <DIO_u8GetPortValue+0x38>
    2b30:	8b 81       	ldd	r24, Y+3	; 0x03
    2b32:	9c 81       	ldd	r25, Y+4	; 0x04
    2b34:	00 97       	sbiw	r24, 0x00	; 0
    2b36:	61 f0       	breq	.+24     	; 0x2b50 <DIO_u8GetPortValue+0x4e>
    2b38:	1f c0       	rjmp	.+62     	; 0x2b78 <DIO_u8GetPortValue+0x76>
    2b3a:	2b 81       	ldd	r18, Y+3	; 0x03
    2b3c:	3c 81       	ldd	r19, Y+4	; 0x04
    2b3e:	22 30       	cpi	r18, 0x02	; 2
    2b40:	31 05       	cpc	r19, r1
    2b42:	81 f0       	breq	.+32     	; 0x2b64 <DIO_u8GetPortValue+0x62>
    2b44:	8b 81       	ldd	r24, Y+3	; 0x03
    2b46:	9c 81       	ldd	r25, Y+4	; 0x04
    2b48:	83 30       	cpi	r24, 0x03	; 3
    2b4a:	91 05       	cpc	r25, r1
    2b4c:	81 f0       	breq	.+32     	; 0x2b6e <DIO_u8GetPortValue+0x6c>
    2b4e:	14 c0       	rjmp	.+40     	; 0x2b78 <DIO_u8GetPortValue+0x76>
		{
			case DIO_PORTA : return PINA ;
    2b50:	e9 e3       	ldi	r30, 0x39	; 57
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	90 81       	ld	r25, Z
    2b56:	9a 83       	std	Y+2, r25	; 0x02
    2b58:	10 c0       	rjmp	.+32     	; 0x2b7a <DIO_u8GetPortValue+0x78>
			case DIO_PORTB : return PINB ;
    2b5a:	e6 e3       	ldi	r30, 0x36	; 54
    2b5c:	f0 e0       	ldi	r31, 0x00	; 0
    2b5e:	20 81       	ld	r18, Z
    2b60:	2a 83       	std	Y+2, r18	; 0x02
    2b62:	0b c0       	rjmp	.+22     	; 0x2b7a <DIO_u8GetPortValue+0x78>
			case DIO_PORTC : return PINC ;
    2b64:	e3 e3       	ldi	r30, 0x33	; 51
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	30 81       	ld	r19, Z
    2b6a:	3a 83       	std	Y+2, r19	; 0x02
    2b6c:	06 c0       	rjmp	.+12     	; 0x2b7a <DIO_u8GetPortValue+0x78>
			case DIO_PORTD : return PIND ;
    2b6e:	e0 e3       	ldi	r30, 0x30	; 48
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	80 81       	ld	r24, Z
    2b74:	8a 83       	std	Y+2, r24	; 0x02
    2b76:	01 c0       	rjmp	.+2      	; 0x2b7a <DIO_u8GetPortValue+0x78>
    2b78:	02 c0       	rjmp	.+4      	; 0x2b7e <DIO_u8GetPortValue+0x7c>
		}
}
    2b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7c:	9d 83       	std	Y+5, r25	; 0x05
    2b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b80:	0f 90       	pop	r0
    2b82:	0f 90       	pop	r0
    2b84:	0f 90       	pop	r0
    2b86:	0f 90       	pop	r0
    2b88:	0f 90       	pop	r0
    2b8a:	cf 91       	pop	r28
    2b8c:	df 91       	pop	r29
    2b8e:	08 95       	ret

00002b90 <__mulsi3>:
    2b90:	62 9f       	mul	r22, r18
    2b92:	d0 01       	movw	r26, r0
    2b94:	73 9f       	mul	r23, r19
    2b96:	f0 01       	movw	r30, r0
    2b98:	82 9f       	mul	r24, r18
    2b9a:	e0 0d       	add	r30, r0
    2b9c:	f1 1d       	adc	r31, r1
    2b9e:	64 9f       	mul	r22, r20
    2ba0:	e0 0d       	add	r30, r0
    2ba2:	f1 1d       	adc	r31, r1
    2ba4:	92 9f       	mul	r25, r18
    2ba6:	f0 0d       	add	r31, r0
    2ba8:	83 9f       	mul	r24, r19
    2baa:	f0 0d       	add	r31, r0
    2bac:	74 9f       	mul	r23, r20
    2bae:	f0 0d       	add	r31, r0
    2bb0:	65 9f       	mul	r22, r21
    2bb2:	f0 0d       	add	r31, r0
    2bb4:	99 27       	eor	r25, r25
    2bb6:	72 9f       	mul	r23, r18
    2bb8:	b0 0d       	add	r27, r0
    2bba:	e1 1d       	adc	r30, r1
    2bbc:	f9 1f       	adc	r31, r25
    2bbe:	63 9f       	mul	r22, r19
    2bc0:	b0 0d       	add	r27, r0
    2bc2:	e1 1d       	adc	r30, r1
    2bc4:	f9 1f       	adc	r31, r25
    2bc6:	bd 01       	movw	r22, r26
    2bc8:	cf 01       	movw	r24, r30
    2bca:	11 24       	eor	r1, r1
    2bcc:	08 95       	ret

00002bce <__udivmodsi4>:
    2bce:	a1 e2       	ldi	r26, 0x21	; 33
    2bd0:	1a 2e       	mov	r1, r26
    2bd2:	aa 1b       	sub	r26, r26
    2bd4:	bb 1b       	sub	r27, r27
    2bd6:	fd 01       	movw	r30, r26
    2bd8:	0d c0       	rjmp	.+26     	; 0x2bf4 <__udivmodsi4_ep>

00002bda <__udivmodsi4_loop>:
    2bda:	aa 1f       	adc	r26, r26
    2bdc:	bb 1f       	adc	r27, r27
    2bde:	ee 1f       	adc	r30, r30
    2be0:	ff 1f       	adc	r31, r31
    2be2:	a2 17       	cp	r26, r18
    2be4:	b3 07       	cpc	r27, r19
    2be6:	e4 07       	cpc	r30, r20
    2be8:	f5 07       	cpc	r31, r21
    2bea:	20 f0       	brcs	.+8      	; 0x2bf4 <__udivmodsi4_ep>
    2bec:	a2 1b       	sub	r26, r18
    2bee:	b3 0b       	sbc	r27, r19
    2bf0:	e4 0b       	sbc	r30, r20
    2bf2:	f5 0b       	sbc	r31, r21

00002bf4 <__udivmodsi4_ep>:
    2bf4:	66 1f       	adc	r22, r22
    2bf6:	77 1f       	adc	r23, r23
    2bf8:	88 1f       	adc	r24, r24
    2bfa:	99 1f       	adc	r25, r25
    2bfc:	1a 94       	dec	r1
    2bfe:	69 f7       	brne	.-38     	; 0x2bda <__udivmodsi4_loop>
    2c00:	60 95       	com	r22
    2c02:	70 95       	com	r23
    2c04:	80 95       	com	r24
    2c06:	90 95       	com	r25
    2c08:	9b 01       	movw	r18, r22
    2c0a:	ac 01       	movw	r20, r24
    2c0c:	bd 01       	movw	r22, r26
    2c0e:	cf 01       	movw	r24, r30
    2c10:	08 95       	ret

00002c12 <__prologue_saves__>:
    2c12:	2f 92       	push	r2
    2c14:	3f 92       	push	r3
    2c16:	4f 92       	push	r4
    2c18:	5f 92       	push	r5
    2c1a:	6f 92       	push	r6
    2c1c:	7f 92       	push	r7
    2c1e:	8f 92       	push	r8
    2c20:	9f 92       	push	r9
    2c22:	af 92       	push	r10
    2c24:	bf 92       	push	r11
    2c26:	cf 92       	push	r12
    2c28:	df 92       	push	r13
    2c2a:	ef 92       	push	r14
    2c2c:	ff 92       	push	r15
    2c2e:	0f 93       	push	r16
    2c30:	1f 93       	push	r17
    2c32:	cf 93       	push	r28
    2c34:	df 93       	push	r29
    2c36:	cd b7       	in	r28, 0x3d	; 61
    2c38:	de b7       	in	r29, 0x3e	; 62
    2c3a:	ca 1b       	sub	r28, r26
    2c3c:	db 0b       	sbc	r29, r27
    2c3e:	0f b6       	in	r0, 0x3f	; 63
    2c40:	f8 94       	cli
    2c42:	de bf       	out	0x3e, r29	; 62
    2c44:	0f be       	out	0x3f, r0	; 63
    2c46:	cd bf       	out	0x3d, r28	; 61
    2c48:	09 94       	ijmp

00002c4a <__epilogue_restores__>:
    2c4a:	2a 88       	ldd	r2, Y+18	; 0x12
    2c4c:	39 88       	ldd	r3, Y+17	; 0x11
    2c4e:	48 88       	ldd	r4, Y+16	; 0x10
    2c50:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c52:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c54:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c56:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c58:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c5a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c5c:	b9 84       	ldd	r11, Y+9	; 0x09
    2c5e:	c8 84       	ldd	r12, Y+8	; 0x08
    2c60:	df 80       	ldd	r13, Y+7	; 0x07
    2c62:	ee 80       	ldd	r14, Y+6	; 0x06
    2c64:	fd 80       	ldd	r15, Y+5	; 0x05
    2c66:	0c 81       	ldd	r16, Y+4	; 0x04
    2c68:	1b 81       	ldd	r17, Y+3	; 0x03
    2c6a:	aa 81       	ldd	r26, Y+2	; 0x02
    2c6c:	b9 81       	ldd	r27, Y+1	; 0x01
    2c6e:	ce 0f       	add	r28, r30
    2c70:	d1 1d       	adc	r29, r1
    2c72:	0f b6       	in	r0, 0x3f	; 63
    2c74:	f8 94       	cli
    2c76:	de bf       	out	0x3e, r29	; 62
    2c78:	0f be       	out	0x3f, r0	; 63
    2c7a:	cd bf       	out	0x3d, r28	; 61
    2c7c:	ed 01       	movw	r28, r26
    2c7e:	08 95       	ret

00002c80 <_exit>:
    2c80:	f8 94       	cli

00002c82 <__stop_program>:
    2c82:	ff cf       	rjmp	.-2      	; 0x2c82 <__stop_program>
